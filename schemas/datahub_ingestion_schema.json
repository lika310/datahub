{
    "$schema": "https://json-schema.org/draft/2020-12/schema",
    "id": "https://json.schemastore.org/datahub-ingestion",
    "title": "Datahub Ingestion",
    "description": "Root schema of Datahub Ingestion",
    "definitions": {
        "console_sink": {
            "type": "object",
            "properties": {
                "type": {
                    "type": "string",
                    "enum": [
                        "console"
                    ]
                }
            },
            "required": [
                "type"
            ]
        },
        "file_sink": {
            "type": "object",
            "properties": {
                "type": {
                    "type": "string",
                    "enum": [
                        "file"
                    ]
                },
                "config": {
                    "$ref": "#/definitions/file_sink_config"
                }
            },
            "required": [
                "type",
                "config"
            ]
        },
        "file_sink_config": {
            "type": "object",
            "properties": {
                "filename": {
                    "description": "Path to file to write to.",
                    "type": "string"
                }
            },
            "required": [
                "filename"
            ],
            "additionalProperties": false
        },
        "datahub_rest_sink": {
            "type": "object",
            "properties": {
                "type": {
                    "type": "string",
                    "enum": [
                        "datahub-rest"
                    ]
                },
                "config": {
                    "$ref": "#/definitions/datahub_rest_sink_config"
                }
            },
            "required": [
                "type",
                "config"
            ],
            "additionalProperties": false
        },
        "datahub_rest_sink_config": {
            "type": "object",
            "properties": {
                "ca_certificate_path": {
                    "type": "string",
                    "description": "Path to server's CA certificate for verification of HTTPS communications"
                },
                "client_certificate_path": {
                    "type": "string",
                    "descritption": "Path to client's CA certificate for HTTPS communications"
                },
                "max_threads": {
                    "type": "number",
                    "description": "Experimental: Max parallelism for REST API calls",
                    "default": 15
                },
                "retry_status_codes": {
                    "type": "array",
                    "items": {
                        "type": "number"
                    },
                    "description": "Retry HTTP request also on these status codes",
                    "default": [
                        429,
                        502,
                        503,
                        504
                    ]
                },
                "server": {
                    "type": "string",
                    "description": "URL of DataHub GMS endpoint."
                },
                "timeout_sec": {
                    "type": "number",
                    "description": "Per-HTTP request timeout.",
                    "default": 30
                },
                "token": {
                    "type": "string",
                    "description": "Bearer token used for authentication."
                },
                "extra_headers": {
                    "type": "string",
                    "description": "Extra headers which will be added to the request."
                },
                "disable_ssl_verification": {
                    "type": "boolean",
                    "description": "Disable SSL verification for HTTPS communications.",
                    "default": false
                }
            },
            "required": [
                "server"
            ],
            "additionalProperties": false
        },
        "datahub_kafka_sink": {
            "type": "object",
            "properties": {
                "type": {
                    "type": "string",
                    "enum": [
                        "datahub-kafka"
                    ]
                },
                "config": {
                    "$ref": "#/definitions/datahub_kafka_sink_config"
                }
            },
            "required": [
                "type",
                "config"
            ],
            "additionalProperties": false
        },
        "datahub_kafka_sink_config": {
            "type": "object",
            "properties": {
                "connection": {
                    "type": "object",
                    "properties": {
                        "bootstrap": {
                            "type": "string",
                            "description": "Kafka bootstrap URL.",
                            "default": "localhost:9092"
                        },
                        "producer_config": {
                            "type": "object",
                            "description": "Passed to https://docs.confluent.io/platform/current/clients/confluent-kafka-python/html/index.html#confluent_kafka.SerializingProducer"
                        },
                        "schema_registry_url": {
                            "type": "string",
                            "description": "URL of schema registry being used.",
                            "default": "http://localhost:8081"
                        },
                        "schema_registry_config": {
                            "type": "object",
                            "description": "Passed to https://docs.confluent.io/platform/current/clients/confluent-kafka-python/html/index.html#confluent_kafka.schema_registry.SchemaRegistryClient"
                        }
                    },
                    "additionalProperties": false,
                    "required": [
                        "bootstrap",
                        "schema_registry_url"
                    ]
                },
                "topic_routes": {
                    "type": "object",
                    "properties": {
                        "MetadataChangeEvent": {
                            "type": "string",
                            "description": "Overridden Kafka topic name for the MetadataChangeEvent",
                            "default": "MetadataChangeEvent"
                        },
                        "MetadataChangeProposal": {
                            "type": "string",
                            "description": "Overridden Kafka topic name for the MetadataChangeProposal",
                            "default": "MetadataChangeProposal"
                        }
                    },
                    "additionalProperties": false
                }
            },
            "required": [
                "connection"
            ],
            "additionalProperties": false
        },
        "sac": {
            "type": "object",
            "properties": {
                "type": {
                    "type": "string",
                    "enum": [
                        "sac"
                    ]
                },
                "config": {
                    "$ref": "#/definitions/sac_config"
                }
            },
            "required": [
                "type",
                "config"
            ]
        },
        "sac_config": {
            "title": "SACSourceConfig",
            "description": "Base configuration class for stateful ingestion for source configs to inherit from.",
            "type": "object",
            "properties": {
                "incremental_lineage": {
                    "title": "Incremental Lineage",
                    "description": "When enabled, emits lineage as incremental to existing lineage already in DataHub. When disabled, re-states lineage on each run.",
                    "default": false,
                    "type": "boolean"
                },
                "env": {
                    "title": "Env",
                    "description": "The environment that all assets produced by this connector belong to",
                    "default": "PROD",
                    "type": "string"
                },
                "platform_instance": {
                    "title": "Platform Instance",
                    "description": "The instance of the platform that all assets produced by this recipe belong to. This should be unique within the platform. See https://datahubproject.io/docs/platform-instances/ for more details.",
                    "type": "string"
                },
                "stateful_ingestion": {
                    "title": "Stateful Ingestion",
                    "description": "Stateful ingestion related configs",
                    "allOf": [
                        {
                            "$ref": "#/definitions/StatefulStaleMetadataRemovalConfig"
                        }
                    ]
                },
                "tenant_url": {
                    "title": "Tenant Url",
                    "description": "URL of the SAP Analytics Cloud tenant",
                    "type": "string"
                },
                "token_url": {
                    "title": "Token Url",
                    "description": "URL of the OAuth token endpoint of the SAP Analytics Cloud tenant",
                    "type": "string"
                },
                "client_id": {
                    "title": "Client Id",
                    "description": "Client ID for the OAuth authentication",
                    "type": "string"
                },
                "client_secret": {
                    "title": "Client Secret",
                    "description": "Client secret for the OAuth authentication",
                    "type": "string",
                    "writeOnly": true,
                    "format": "password"
                },
                "ingest_stories": {
                    "title": "Ingest Stories",
                    "description": "Controls whether Stories should be ingested",
                    "default": true,
                    "type": "boolean"
                },
                "ingest_applications": {
                    "title": "Ingest Applications",
                    "description": "Controls whether Analytic Applications should be ingested",
                    "default": true,
                    "type": "boolean"
                },
                "ingest_import_data_model_schema_metadata": {
                    "title": "Ingest Import Data Model Schema Metadata",
                    "description": "Controls whether schema metadata of Import Data Models should be ingested (ingesting schema metadata of Import Data Models significantly increases overall ingestion time)",
                    "default": true,
                    "type": "boolean"
                },
                "resource_id_pattern": {
                    "title": "Resource Id Pattern",
                    "description": "Patterns for selecting resource ids that are to be included",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "allOf": [
                        {
                            "$ref": "#/definitions/AllowDenyPattern"
                        }
                    ]
                },
                "resource_name_pattern": {
                    "title": "Resource Name Pattern",
                    "description": "Patterns for selecting resource names that are to be included",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "allOf": [
                        {
                            "$ref": "#/definitions/AllowDenyPattern"
                        }
                    ]
                },
                "folder_pattern": {
                    "title": "Folder Pattern",
                    "description": "Patterns for selecting folders that are to be included",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "allOf": [
                        {
                            "$ref": "#/definitions/AllowDenyPattern"
                        }
                    ]
                },
                "connection_mapping": {
                    "title": "Connection Mapping",
                    "description": "Custom mappings for connections",
                    "default": {},
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/definitions/ConnectionMappingConfig"
                    }
                },
                "query_name_template": {
                    "title": "Query Name Template",
                    "description": "Template for generating dataset urns of consumed queries, the placeholder {query} can be used within the template for inserting the name of the query",
                    "default": "QUERY/{name}",
                    "type": "string"
                }
            },
            "required": [
                "tenant_url",
                "token_url",
                "client_id",
                "client_secret"
            ],
            "additionalProperties": false
        },
        "powerbi": {
            "type": "object",
            "properties": {
                "type": {
                    "type": "string",
                    "enum": [
                        "powerbi"
                    ]
                },
                "config": {
                    "$ref": "#/definitions/powerbi_config"
                }
            },
            "required": [
                "type",
                "config"
            ]
        },
        "powerbi_config": {
            "title": "PowerBiDashboardSourceConfig",
            "description": "Base configuration class for stateful ingestion for source configs to inherit from.",
            "type": "object",
            "properties": {
                "env": {
                    "title": "Env",
                    "description": "The environment that all assets produced by this connector belong to",
                    "default": "PROD",
                    "type": "string"
                },
                "platform_instance": {
                    "title": "Platform Instance",
                    "description": "The instance of the platform that all assets produced by this recipe belong to",
                    "type": "string"
                },
                "stateful_ingestion": {
                    "title": "Stateful Ingestion",
                    "description": "PowerBI Stateful Ingestion Config.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/StatefulStaleMetadataRemovalConfig"
                        }
                    ]
                },
                "tenant_id": {
                    "title": "Tenant Id",
                    "description": "PowerBI tenant identifier",
                    "type": "string"
                },
                "workspace_id_pattern": {
                    "title": "Workspace Id Pattern",
                    "description": "Regex patterns to filter PowerBI workspaces in ingestion. Note: This field works in conjunction with 'workspace_type_filter' and both must be considered when filtering workspaces.",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "allOf": [
                        {
                            "$ref": "#/definitions/AllowDenyPattern"
                        }
                    ]
                },
                "server_to_platform_instance": {
                    "title": "Server To Platform Instance",
                    "description": "A mapping of PowerBI datasource's server i.e host[:port] to Data platform instance. :port is optional and only needed if your datasource server is running on non-standard port. For Google BigQuery the datasource's server is google bigquery project name. For Databricks Unity Catalog the datasource's server is workspace FQDN.",
                    "default": {},
                    "type": "object",
                    "additionalProperties": {
                        "anyOf": [
                            {
                                "$ref": "#/definitions/PlatformDetail"
                            },
                            {
                                "$ref": "#/definitions/DataBricksPlatformDetail"
                            }
                        ]
                    }
                },
                "client_id": {
                    "title": "Client Id",
                    "description": "Azure app client identifier",
                    "type": "string"
                },
                "client_secret": {
                    "title": "Client Secret",
                    "description": "Azure app client secret",
                    "type": "string"
                },
                "scan_timeout": {
                    "title": "Scan Timeout",
                    "description": "timeout for PowerBI metadata scanning",
                    "default": 60,
                    "type": "integer"
                },
                "scan_batch_size": {
                    "title": "Scan Batch Size",
                    "description": "batch size for sending workspace_ids to PBI, 100 is the limit",
                    "default": 1,
                    "exclusiveMinimum": 0,
                    "maximum": 100,
                    "type": "integer"
                },
                "workspace_id_as_urn_part": {
                    "title": "Workspace Id As Urn Part",
                    "description": "It is recommended to set this to True only if you have legacy workspaces based on Office 365 groups, as those workspaces can have identical names. To maintain backward compatibility, this is set to False which uses workspace name",
                    "default": false,
                    "type": "boolean"
                },
                "extract_ownership": {
                    "title": "Extract Ownership",
                    "description": "Whether ownership should be ingested. Admin API access is required if this setting is enabled. Note that enabling this may overwrite owners that you've added inside DataHub's web application.",
                    "default": false,
                    "type": "boolean"
                },
                "extract_reports": {
                    "title": "Extract Reports",
                    "description": "Whether reports should be ingested",
                    "default": true,
                    "type": "boolean"
                },
                "ownership": {
                    "title": "Ownership",
                    "description": "Configure how is ownership ingested",
                    "default": {
                        "create_corp_user": true,
                        "use_powerbi_email": true,
                        "remove_email_suffix": false,
                        "dataset_configured_by_as_owner": false,
                        "owner_criteria": null
                    },
                    "allOf": [
                        {
                            "$ref": "#/definitions/OwnershipMapping"
                        }
                    ]
                },
                "modified_since": {
                    "title": "Modified Since",
                    "description": "Get only recently modified workspaces based on modified_since datetime '2023-02-10T00:00:00.0000000Z', excludeInActiveWorkspaces limit to last 30 days",
                    "type": "string"
                },
                "extract_dashboards": {
                    "title": "Extract Dashboards",
                    "description": "Whether to ingest PBI Dashboard and Tiles as Datahub Dashboard and Chart",
                    "default": true,
                    "type": "boolean"
                },
                "extract_dataset_schema": {
                    "title": "Extract Dataset Schema",
                    "description": "Whether to ingest PBI Dataset Table columns and measures",
                    "default": false,
                    "type": "boolean"
                },
                "extract_lineage": {
                    "title": "Extract Lineage",
                    "description": "Whether lineage should be ingested between X and Y. Admin API access is required if this setting is enabled",
                    "default": true,
                    "type": "boolean"
                },
                "extract_endorsements_to_tags": {
                    "title": "Extract Endorsements To Tags",
                    "description": "Whether to extract endorsements to tags, note that this may overwrite existing tags. Admin API access is required if this setting is enabled.",
                    "default": false,
                    "type": "boolean"
                },
                "filter_dataset_endorsements": {
                    "title": "Filter Dataset Endorsements",
                    "description": "Filter and ingest datasets which are 'Certified' or 'Promoted' endorsement. If both are added, dataset which are 'Certified' or 'Promoted' will be ingested . Default setting allows all dataset to be ingested",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "allOf": [
                        {
                            "$ref": "#/definitions/AllowDenyPattern"
                        }
                    ]
                },
                "extract_workspaces_to_containers": {
                    "title": "Extract Workspaces To Containers",
                    "description": "Extract workspaces to DataHub containers",
                    "default": true,
                    "type": "boolean"
                },
                "extract_datasets_to_containers": {
                    "title": "Extract Datasets To Containers",
                    "description": "PBI tables will be grouped under a Datahub Container, the container reflect a PBI Dataset",
                    "default": false,
                    "type": "boolean"
                },
                "native_query_parsing": {
                    "title": "Native Query Parsing",
                    "description": "Whether PowerBI native query should be parsed to extract lineage",
                    "default": true,
                    "type": "boolean"
                },
                "convert_urns_to_lowercase": {
                    "title": "Convert Urns To Lowercase",
                    "description": "Whether to convert the PowerBI assets urns to lowercase",
                    "default": false,
                    "type": "boolean"
                },
                "convert_lineage_urns_to_lowercase": {
                    "title": "Convert Lineage Urns To Lowercase",
                    "description": "Whether to convert the urns of ingested lineage dataset to lowercase",
                    "default": true,
                    "type": "boolean"
                },
                "admin_apis_only": {
                    "title": "Admin Apis Only",
                    "description": "Retrieve metadata using PowerBI Admin API only. If this is enabled, then Report Pages will not be extracted. Admin API access is required if this setting is enabled",
                    "default": false,
                    "type": "boolean"
                },
                "extract_independent_datasets": {
                    "title": "Extract Independent Datasets",
                    "description": "Whether to extract datasets not used in any PowerBI visualization",
                    "default": false,
                    "type": "boolean"
                },
                "enable_advance_lineage_sql_construct": {
                    "title": "Enable Advance Lineage Sql Construct",
                    "description": "Whether to enable advance native sql construct for parsing like join, sub-queries. along this flag , the native_query_parsing should be enabled. By default convert_lineage_urns_to_lowercase is enabled, in-case if you have disabled it in previous ingestion execution then it may break lineageas this option generates the upstream datasets URN in lowercase.",
                    "default": true,
                    "type": "boolean"
                },
                "extract_column_level_lineage": {
                    "title": "Extract Column Level Lineage",
                    "description": "Whether to extract column level lineage. Works only if configs `native_query_parsing`, `enable_advance_lineage_sql_construct` & `extract_lineage` are enabled.Works for M-Query where native SQL is used for transformation.",
                    "default": false,
                    "type": "boolean"
                },
                "profile_pattern": {
                    "title": "Profile Pattern",
                    "description": "Regex patterns to filter tables for profiling during ingestion. Note that only tables allowed by the `table_pattern` will be considered. Matched format is 'workspacename.datasetname.tablename'",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "allOf": [
                        {
                            "$ref": "#/definitions/AllowDenyPattern"
                        }
                    ]
                },
                "profiling": {
                    "title": "Profiling",
                    "default": {
                        "enabled": false
                    },
                    "allOf": [
                        {
                            "$ref": "#/definitions/PowerBiProfilingConfig"
                        }
                    ]
                },
                "patch_metadata": {
                    "title": "Patch Metadata",
                    "description": "Patch dashboard metadata",
                    "default": true,
                    "type": "boolean"
                },
                "workspace_type_filter": {
                    "title": "Workspace Type Filter",
                    "description": "Ingest the metadata of the workspace where the workspace type corresponds to the specified workspace_type_filter. Note: This field works in conjunction with 'workspace_id_pattern'. Both must be matched for a workspace to be processed.",
                    "default": [
                        "Workspace"
                    ],
                    "type": "array",
                    "items": {
                        "enum": [
                            "Workspace",
                            "PersonalGroup",
                            "Personal",
                            "AdminWorkspace",
                            "AdminInsights"
                        ],
                        "type": "string"
                    }
                },
                "include_workspace_name_in_dataset_urn": {
                    "title": "Include Workspace Name In Dataset Urn",
                    "description": "It is recommended to set this to true, as it helps prevent the overwriting of datasets.Read section #11560 at https://datahubproject.io/docs/how/updating-datahub/ before enabling this option.To maintain backward compatibility, this is set to False.",
                    "default": false,
                    "type": "boolean"
                },
                "extract_app": {
                    "title": "Extract App",
                    "description": "Whether to ingest workspace app. Requires DataHub server 0.14.2+.",
                    "default": false,
                    "type": "boolean"
                },
                "m_query_parse_timeout": {
                    "title": "M Query Parse Timeout",
                    "description": "Timeout for PowerBI M-query parsing in seconds. Table-level lineage is determined by analyzing the M-query expression. Increase this value if you encounter the 'M-Query Parsing Timeout' message in the connector report.",
                    "default": 70,
                    "type": "integer"
                }
            },
            "required": [
                "tenant_id",
                "client_id",
                "client_secret"
            ],
            "additionalProperties": false
        },
        "cockroachdb": {
            "type": "object",
            "properties": {
                "type": {
                    "type": "string",
                    "enum": [
                        "cockroachdb"
                    ]
                },
                "config": {
                    "$ref": "#/definitions/cockroachdb_config"
                }
            },
            "required": [
                "type",
                "config"
            ]
        },
        "cockroachdb_config": {
            "title": "CockroachDBConfig",
            "description": "Base configuration class for stateful ingestion for source configs to inherit from.",
            "type": "object",
            "properties": {
                "schema_pattern": {
                    "title": "Schema Pattern",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [
                            "information_schema",
                            "crdb_internal"
                        ],
                        "ignoreCase": true
                    },
                    "allOf": [
                        {
                            "$ref": "#/definitions/AllowDenyPattern"
                        }
                    ]
                },
                "table_pattern": {
                    "title": "Table Pattern",
                    "description": "Regex patterns for tables to filter in ingestion. Specify regex to match the entire table name in database.schema.table format. e.g. to match all tables starting with customer in Customer database and public schema, use the regex 'Customer.public.customer.*'",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "allOf": [
                        {
                            "$ref": "#/definitions/AllowDenyPattern"
                        }
                    ]
                },
                "view_pattern": {
                    "title": "View Pattern",
                    "description": "Regex patterns for views to filter in ingestion. Note: Defaults to table_pattern if not specified. Specify regex to match the entire view name in database.schema.view format. e.g. to match all views starting with customer in Customer database and public schema, use the regex 'Customer.public.customer.*'",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "allOf": [
                        {
                            "$ref": "#/definitions/AllowDenyPattern"
                        }
                    ]
                },
                "classification": {
                    "title": "Classification",
                    "description": "For details, refer to [Classification](../../../../metadata-ingestion/docs/dev_guides/classification.md).",
                    "default": {
                        "enabled": false,
                        "sample_size": 100,
                        "max_workers": 4,
                        "table_pattern": {
                            "allow": [
                                ".*"
                            ],
                            "deny": [],
                            "ignoreCase": true
                        },
                        "column_pattern": {
                            "allow": [
                                ".*"
                            ],
                            "deny": [],
                            "ignoreCase": true
                        },
                        "info_type_to_term": {},
                        "classifiers": [
                            {
                                "type": "datahub",
                                "config": null
                            }
                        ]
                    },
                    "allOf": [
                        {
                            "$ref": "#/definitions/ClassificationConfig"
                        }
                    ]
                },
                "incremental_lineage": {
                    "title": "Incremental Lineage",
                    "description": "When enabled, emits lineage as incremental to existing lineage already in DataHub. When disabled, re-states lineage on each run.",
                    "default": false,
                    "type": "boolean"
                },
                "convert_urns_to_lowercase": {
                    "title": "Convert Urns To Lowercase",
                    "description": "Whether to convert dataset urns to lowercase.",
                    "default": false,
                    "type": "boolean"
                },
                "env": {
                    "title": "Env",
                    "description": "The environment that all assets produced by this connector belong to",
                    "default": "PROD",
                    "type": "string"
                },
                "platform_instance": {
                    "title": "Platform Instance",
                    "description": "The instance of the platform that all assets produced by this recipe belong to. This should be unique within the platform. See https://datahubproject.io/docs/platform-instances/ for more details.",
                    "type": "string"
                },
                "stateful_ingestion": {
                    "$ref": "#/definitions/StatefulStaleMetadataRemovalConfig"
                },
                "options": {
                    "title": "Options",
                    "description": "Any options specified here will be passed to [SQLAlchemy.create_engine](https://docs.sqlalchemy.org/en/14/core/engines.html#sqlalchemy.create_engine) as kwargs. To set connection arguments in the URL, specify them under `connect_args`.",
                    "type": "object"
                },
                "profile_pattern": {
                    "title": "Profile Pattern",
                    "description": "Regex patterns to filter tables (or specific columns) for profiling during ingestion. Note that only tables allowed by the `table_pattern` will be considered.",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "allOf": [
                        {
                            "$ref": "#/definitions/AllowDenyPattern"
                        }
                    ]
                },
                "domain": {
                    "title": "Domain",
                    "description": "Attach domains to databases, schemas or tables during ingestion using regex patterns. Domain key can be a guid like *urn:li:domain:ec428203-ce86-4db3-985d-5a8ee6df32ba* or a string like \"Marketing\".) If you provide strings, then datahub will attempt to resolve this name to a guid, and will error out if this fails. There can be multiple domain keys specified.",
                    "default": {},
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/definitions/AllowDenyPattern"
                    }
                },
                "include_views": {
                    "title": "Include Views",
                    "description": "Whether views should be ingested.",
                    "default": true,
                    "type": "boolean"
                },
                "include_tables": {
                    "title": "Include Tables",
                    "description": "Whether tables should be ingested.",
                    "default": true,
                    "type": "boolean"
                },
                "include_table_location_lineage": {
                    "title": "Include Table Location Lineage",
                    "description": "If the source supports it, include table lineage to the underlying storage location.",
                    "default": true,
                    "type": "boolean"
                },
                "include_view_lineage": {
                    "title": "Include View Lineage",
                    "description": "Populates view->view and table->view lineage using DataHub's sql parser.",
                    "default": true,
                    "type": "boolean"
                },
                "include_view_column_lineage": {
                    "title": "Include View Column Lineage",
                    "description": "Populates column-level lineage for  view->view and table->view lineage using DataHub's sql parser. Requires `include_view_lineage` to be enabled.",
                    "default": true,
                    "type": "boolean"
                },
                "use_file_backed_cache": {
                    "title": "Use File Backed Cache",
                    "description": "Whether to use a file backed cache for the view definitions.",
                    "default": true,
                    "type": "boolean"
                },
                "profiling": {
                    "title": "Profiling",
                    "default": {
                        "enabled": false,
                        "operation_config": {
                            "lower_freq_profile_enabled": false,
                            "profile_day_of_week": null,
                            "profile_date_of_month": null
                        },
                        "limit": null,
                        "offset": null,
                        "profile_table_level_only": false,
                        "include_field_null_count": true,
                        "include_field_distinct_count": true,
                        "include_field_min_value": true,
                        "include_field_max_value": true,
                        "include_field_mean_value": true,
                        "include_field_median_value": true,
                        "include_field_stddev_value": true,
                        "include_field_quantiles": false,
                        "include_field_distinct_value_frequencies": false,
                        "include_field_histogram": false,
                        "include_field_sample_values": true,
                        "max_workers": 20,
                        "report_dropped_profiles": false,
                        "turn_off_expensive_profiling_metrics": false,
                        "field_sample_values_limit": 20,
                        "max_number_of_fields_to_profile": null,
                        "profile_if_updated_since_days": null,
                        "profile_table_size_limit": 5,
                        "profile_table_row_limit": 5000000,
                        "profile_table_row_count_estimate_only": false,
                        "query_combiner_enabled": true,
                        "catch_exceptions": true,
                        "partition_profiling_enabled": true,
                        "partition_datetime": null,
                        "use_sampling": true,
                        "sample_size": 10000,
                        "profile_external_tables": false,
                        "tags_to_ignore_sampling": null,
                        "profile_nested_fields": false
                    },
                    "allOf": [
                        {
                            "$ref": "#/definitions/GEProfilingConfig"
                        }
                    ]
                },
                "username": {
                    "title": "Username",
                    "description": "username",
                    "type": "string"
                },
                "password": {
                    "title": "Password",
                    "description": "password",
                    "type": "string",
                    "writeOnly": true,
                    "format": "password"
                },
                "host_port": {
                    "title": "Host Port",
                    "description": "host URL",
                    "type": "string"
                },
                "database": {
                    "title": "Database",
                    "description": "database (catalog). If set to Null, all databases will be considered for ingestion.",
                    "type": "string"
                },
                "scheme": {
                    "title": "Scheme",
                    "description": "database scheme",
                    "default": "cockroachdb+psycopg2",
                    "type": "string"
                },
                "sqlalchemy_uri": {
                    "title": "Sqlalchemy Uri",
                    "description": "URI of database to connect to. See https://docs.sqlalchemy.org/en/14/core/engines.html#database-urls. Takes precedence over other connection parameters.",
                    "type": "string"
                },
                "database_pattern": {
                    "title": "Database Pattern",
                    "description": "Regex patterns for databases to filter in ingestion. Note: this is not used if `database` or `sqlalchemy_uri` are provided.",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "allOf": [
                        {
                            "$ref": "#/definitions/AllowDenyPattern"
                        }
                    ]
                },
                "initial_database": {
                    "title": "Initial Database",
                    "description": "Initial database used to query for the list of databases, when ingesting multiple databases. Note: this is not used if `database` or `sqlalchemy_uri` are provided.",
                    "default": "postgres",
                    "type": "string"
                }
            },
            "required": [
                "host_port"
            ],
            "additionalProperties": false
        },
        "athena": {
            "type": "object",
            "properties": {
                "type": {
                    "type": "string",
                    "enum": [
                        "athena"
                    ]
                },
                "config": {
                    "$ref": "#/definitions/athena_config"
                }
            },
            "required": [
                "type",
                "config"
            ]
        },
        "athena_config": {
            "title": "AthenaConfig",
            "description": "Base configuration class for stateful ingestion for source configs to inherit from.",
            "type": "object",
            "properties": {
                "schema_pattern": {
                    "title": "Schema Pattern",
                    "description": "Regex patterns for schemas to filter in ingestion. Specify regex to only match the schema name. e.g. to match all tables in schema analytics, use the regex 'analytics'",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "allOf": [
                        {
                            "$ref": "#/definitions/AllowDenyPattern"
                        }
                    ]
                },
                "table_pattern": {
                    "title": "Table Pattern",
                    "description": "Regex patterns for tables to filter in ingestion. Specify regex to match the entire table name in database.schema.table format. e.g. to match all tables starting with customer in Customer database and public schema, use the regex 'Customer.public.customer.*'",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "allOf": [
                        {
                            "$ref": "#/definitions/AllowDenyPattern"
                        }
                    ]
                },
                "view_pattern": {
                    "title": "View Pattern",
                    "description": "Regex patterns for views to filter in ingestion. Note: Defaults to table_pattern if not specified. Specify regex to match the entire view name in database.schema.view format. e.g. to match all views starting with customer in Customer database and public schema, use the regex 'Customer.public.customer.*'",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "allOf": [
                        {
                            "$ref": "#/definitions/AllowDenyPattern"
                        }
                    ]
                },
                "classification": {
                    "title": "Classification",
                    "description": "For details, refer to [Classification](../../../../metadata-ingestion/docs/dev_guides/classification.md).",
                    "default": {
                        "enabled": false,
                        "sample_size": 100,
                        "max_workers": 4,
                        "table_pattern": {
                            "allow": [
                                ".*"
                            ],
                            "deny": [],
                            "ignoreCase": true
                        },
                        "column_pattern": {
                            "allow": [
                                ".*"
                            ],
                            "deny": [],
                            "ignoreCase": true
                        },
                        "info_type_to_term": {},
                        "classifiers": [
                            {
                                "type": "datahub",
                                "config": null
                            }
                        ]
                    },
                    "allOf": [
                        {
                            "$ref": "#/definitions/ClassificationConfig"
                        }
                    ]
                },
                "incremental_lineage": {
                    "title": "Incremental Lineage",
                    "description": "When enabled, emits lineage as incremental to existing lineage already in DataHub. When disabled, re-states lineage on each run.",
                    "default": false,
                    "type": "boolean"
                },
                "convert_urns_to_lowercase": {
                    "title": "Convert Urns To Lowercase",
                    "description": "Whether to convert dataset urns to lowercase.",
                    "default": false,
                    "type": "boolean"
                },
                "env": {
                    "title": "Env",
                    "description": "The environment that all assets produced by this connector belong to",
                    "default": "PROD",
                    "type": "string"
                },
                "platform_instance": {
                    "title": "Platform Instance",
                    "description": "The instance of the platform that all assets produced by this recipe belong to. This should be unique within the platform. See https://datahubproject.io/docs/platform-instances/ for more details.",
                    "type": "string"
                },
                "stateful_ingestion": {
                    "$ref": "#/definitions/StatefulStaleMetadataRemovalConfig"
                },
                "options": {
                    "title": "Options",
                    "description": "Any options specified here will be passed to [SQLAlchemy.create_engine](https://docs.sqlalchemy.org/en/14/core/engines.html#sqlalchemy.create_engine) as kwargs.",
                    "type": "object"
                },
                "profile_pattern": {
                    "title": "Profile Pattern",
                    "description": "Regex patterns to filter tables (or specific columns) for profiling during ingestion. Note that only tables allowed by the `table_pattern` will be considered.",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "allOf": [
                        {
                            "$ref": "#/definitions/AllowDenyPattern"
                        }
                    ]
                },
                "domain": {
                    "title": "Domain",
                    "description": "Attach domains to databases, schemas or tables during ingestion using regex patterns. Domain key can be a guid like *urn:li:domain:ec428203-ce86-4db3-985d-5a8ee6df32ba* or a string like \"Marketing\".) If you provide strings, then datahub will attempt to resolve this name to a guid, and will error out if this fails. There can be multiple domain keys specified.",
                    "default": {},
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/definitions/AllowDenyPattern"
                    }
                },
                "include_views": {
                    "title": "Include Views",
                    "description": "Whether views should be ingested.",
                    "default": true,
                    "type": "boolean"
                },
                "include_tables": {
                    "title": "Include Tables",
                    "description": "Whether tables should be ingested.",
                    "default": true,
                    "type": "boolean"
                },
                "include_table_location_lineage": {
                    "title": "Include Table Location Lineage",
                    "description": "If the source supports it, include table lineage to the underlying storage location.",
                    "default": true,
                    "type": "boolean"
                },
                "include_view_lineage": {
                    "title": "Include View Lineage",
                    "description": "Populates view->view and table->view lineage using DataHub's sql parser.",
                    "default": true,
                    "type": "boolean"
                },
                "include_view_column_lineage": {
                    "title": "Include View Column Lineage",
                    "description": "Populates column-level lineage for  view->view and table->view lineage using DataHub's sql parser. Requires `include_view_lineage` to be enabled.",
                    "default": true,
                    "type": "boolean"
                },
                "use_file_backed_cache": {
                    "title": "Use File Backed Cache",
                    "description": "Whether to use a file backed cache for the view definitions.",
                    "default": true,
                    "type": "boolean"
                },
                "profiling": {
                    "title": "Profiling",
                    "default": {
                        "enabled": false,
                        "operation_config": {
                            "lower_freq_profile_enabled": false,
                            "profile_day_of_week": null,
                            "profile_date_of_month": null
                        },
                        "limit": null,
                        "offset": null,
                        "profile_table_level_only": false,
                        "include_field_null_count": true,
                        "include_field_distinct_count": true,
                        "include_field_min_value": true,
                        "include_field_max_value": true,
                        "include_field_mean_value": true,
                        "include_field_median_value": true,
                        "include_field_stddev_value": true,
                        "include_field_quantiles": false,
                        "include_field_distinct_value_frequencies": false,
                        "include_field_histogram": false,
                        "include_field_sample_values": true,
                        "max_workers": 20,
                        "report_dropped_profiles": false,
                        "turn_off_expensive_profiling_metrics": false,
                        "field_sample_values_limit": 20,
                        "max_number_of_fields_to_profile": null,
                        "profile_if_updated_since_days": null,
                        "profile_table_size_limit": 5,
                        "profile_table_row_limit": 5000000,
                        "profile_table_row_count_estimate_only": false,
                        "query_combiner_enabled": true,
                        "catch_exceptions": true,
                        "partition_profiling_enabled": false,
                        "partition_datetime": null,
                        "use_sampling": true,
                        "sample_size": 10000,
                        "profile_external_tables": false,
                        "tags_to_ignore_sampling": null,
                        "profile_nested_fields": false
                    },
                    "allOf": [
                        {
                            "$ref": "#/definitions/AthenaProfilingConfig"
                        }
                    ]
                },
                "scheme": {
                    "title": "Scheme",
                    "default": "awsathena+rest",
                    "type": "string"
                },
                "username": {
                    "title": "Username",
                    "description": "Username credential. If not specified, detected with boto3 rules. See https://boto3.amazonaws.com/v1/documentation/api/latest/guide/credentials.html",
                    "type": "string"
                },
                "password": {
                    "title": "Password",
                    "description": "Same detection scheme as username",
                    "type": "string",
                    "writeOnly": true,
                    "format": "password"
                },
                "database": {
                    "title": "Database",
                    "description": "The athena database to ingest from. If not set it will be autodetected",
                    "type": "string"
                },
                "aws_region": {
                    "title": "Aws Region",
                    "description": "Aws region where your Athena database is located",
                    "type": "string"
                },
                "aws_role_arn": {
                    "title": "Aws Role Arn",
                    "description": "AWS Role arn for Pyathena to assume in its connection",
                    "type": "string"
                },
                "aws_role_assumption_duration": {
                    "title": "Aws Role Assumption Duration",
                    "description": "Duration to assume the AWS Role for. Maximum of 43200 (12 hours)",
                    "default": 3600,
                    "type": "integer"
                },
                "s3_staging_dir": {
                    "title": "S3 Staging Dir",
                    "description": "[deprecated in favor of `query_result_location`] S3 query location",
                    "deprecated": true,
                    "type": "string"
                },
                "work_group": {
                    "title": "Work Group",
                    "description": "The name of your Amazon Athena Workgroups",
                    "type": "string"
                },
                "catalog_name": {
                    "title": "Catalog Name",
                    "description": "Athena Catalog Name",
                    "default": "awsdatacatalog",
                    "type": "string"
                },
                "query_result_location": {
                    "title": "Query Result Location",
                    "description": "S3 path to the [query result bucket](https://docs.aws.amazon.com/athena/latest/ug/querying.html#query-results-specify-location) which should be used by AWS Athena to store results of thequeries executed by DataHub.",
                    "type": "string"
                },
                "extract_partitions": {
                    "title": "Extract Partitions",
                    "description": "Extract partitions for tables. Partition extraction needs to run a query (`select * from table$partitions`) on the table. Disable this if you don't want to grant select permission.",
                    "default": true,
                    "type": "boolean"
                }
            },
            "required": [
                "aws_region",
                "work_group",
                "query_result_location"
            ],
            "additionalProperties": false
        },
        "clickhouse-usage": {
            "type": "object",
            "properties": {
                "type": {
                    "type": "string",
                    "enum": [
                        "clickhouse-usage"
                    ]
                },
                "config": {
                    "$ref": "#/definitions/clickhouse-usage_config"
                }
            },
            "required": [
                "type",
                "config"
            ]
        },
        "clickhouse-usage_config": {
            "title": "ClickHouseUsageConfig",
            "description": "Base configuration class for stateful ingestion for source configs to inherit from.",
            "type": "object",
            "properties": {
                "env": {
                    "title": "Env",
                    "description": "The environment that all assets produced by this connector belong to",
                    "default": "PROD",
                    "type": "string"
                },
                "bucket_duration": {
                    "description": "Size of the time window to aggregate usage stats.",
                    "default": "DAY",
                    "allOf": [
                        {
                            "$ref": "#/definitions/BucketDuration"
                        }
                    ]
                },
                "end_time": {
                    "title": "End Time",
                    "description": "Latest date of lineage/usage to consider. Default: Current time in UTC",
                    "type": "string",
                    "format": "date-time"
                },
                "start_time": {
                    "title": "Start Time",
                    "description": "Earliest date of lineage/usage to consider. Default: Last full day in UTC (or hour, depending on `bucket_duration`). You can also specify relative time with respect to end_time such as '-7 days' Or '-7d'.",
                    "type": "string",
                    "format": "date-time"
                },
                "top_n_queries": {
                    "title": "Top N Queries",
                    "description": "Number of top queries to save to each table.",
                    "default": 10,
                    "exclusiveMinimum": 0,
                    "type": "integer"
                },
                "user_email_pattern": {
                    "title": "User Email Pattern",
                    "description": "regex patterns for user emails to filter in usage.",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "allOf": [
                        {
                            "$ref": "#/definitions/AllowDenyPattern"
                        }
                    ]
                },
                "include_operational_stats": {
                    "title": "Include Operational Stats",
                    "description": "Whether to display operational stats.",
                    "default": true,
                    "type": "boolean"
                },
                "include_read_operational_stats": {
                    "title": "Include Read Operational Stats",
                    "description": "Whether to report read operational stats. Experimental.",
                    "default": false,
                    "type": "boolean"
                },
                "format_sql_queries": {
                    "title": "Format Sql Queries",
                    "description": "Whether to format sql queries",
                    "default": false,
                    "type": "boolean"
                },
                "include_top_n_queries": {
                    "title": "Include Top N Queries",
                    "description": "Whether to ingest the top_n_queries.",
                    "default": true,
                    "type": "boolean"
                },
                "platform_instance_map": {
                    "title": "Platform Instance Map",
                    "description": "A holder for platform -> platform_instance mappings to generate correct dataset urns",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "table_pattern": {
                    "title": "Table Pattern",
                    "description": "Regex patterns for tables to filter in ingestion. Specify regex to match the entire table name in database.schema.table format. e.g. to match all tables starting with customer in Customer database and public schema, use the regex 'Customer.public.customer.*'",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "allOf": [
                        {
                            "$ref": "#/definitions/AllowDenyPattern"
                        }
                    ]
                },
                "view_pattern": {
                    "title": "View Pattern",
                    "description": "Regex patterns for views to filter in ingestion. Note: Defaults to table_pattern if not specified. Specify regex to match the entire view name in database.schema.view format. e.g. to match all views starting with customer in Customer database and public schema, use the regex 'Customer.public.customer.*'",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "allOf": [
                        {
                            "$ref": "#/definitions/AllowDenyPattern"
                        }
                    ]
                },
                "classification": {
                    "title": "Classification",
                    "description": "For details, refer to [Classification](../../../../metadata-ingestion/docs/dev_guides/classification.md).",
                    "default": {
                        "enabled": false,
                        "sample_size": 100,
                        "max_workers": 4,
                        "table_pattern": {
                            "allow": [
                                ".*"
                            ],
                            "deny": [],
                            "ignoreCase": true
                        },
                        "column_pattern": {
                            "allow": [
                                ".*"
                            ],
                            "deny": [],
                            "ignoreCase": true
                        },
                        "info_type_to_term": {},
                        "classifiers": [
                            {
                                "type": "datahub",
                                "config": null
                            }
                        ]
                    },
                    "allOf": [
                        {
                            "$ref": "#/definitions/ClassificationConfig"
                        }
                    ]
                },
                "incremental_lineage": {
                    "title": "Incremental Lineage",
                    "description": "When enabled, emits lineage as incremental to existing lineage already in DataHub. When disabled, re-states lineage on each run.",
                    "default": false,
                    "type": "boolean"
                },
                "convert_urns_to_lowercase": {
                    "title": "Convert Urns To Lowercase",
                    "description": "Whether to convert dataset urns to lowercase.",
                    "default": false,
                    "type": "boolean"
                },
                "platform_instance": {
                    "title": "Platform Instance",
                    "description": "The instance of the platform that all assets produced by this recipe belong to. This should be unique within the platform. See https://datahubproject.io/docs/platform-instances/ for more details.",
                    "type": "string"
                },
                "stateful_ingestion": {
                    "$ref": "#/definitions/StatefulStaleMetadataRemovalConfig"
                },
                "options": {
                    "title": "Options",
                    "default": {},
                    "type": "object"
                },
                "profile_pattern": {
                    "title": "Profile Pattern",
                    "description": "Regex patterns to filter tables (or specific columns) for profiling during ingestion. Note that only tables allowed by the `table_pattern` will be considered.",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "allOf": [
                        {
                            "$ref": "#/definitions/AllowDenyPattern"
                        }
                    ]
                },
                "domain": {
                    "title": "Domain",
                    "description": "Attach domains to databases, schemas or tables during ingestion using regex patterns. Domain key can be a guid like *urn:li:domain:ec428203-ce86-4db3-985d-5a8ee6df32ba* or a string like \"Marketing\".) If you provide strings, then datahub will attempt to resolve this name to a guid, and will error out if this fails. There can be multiple domain keys specified.",
                    "default": {},
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/definitions/AllowDenyPattern"
                    }
                },
                "include_views": {
                    "title": "Include Views",
                    "description": "Whether views should be ingested.",
                    "default": true,
                    "type": "boolean"
                },
                "include_tables": {
                    "title": "Include Tables",
                    "description": "Whether tables should be ingested.",
                    "default": true,
                    "type": "boolean"
                },
                "include_table_location_lineage": {
                    "title": "Include Table Location Lineage",
                    "description": "If the source supports it, include table lineage to the underlying storage location.",
                    "default": true,
                    "type": "boolean"
                },
                "include_view_lineage": {
                    "title": "Include View Lineage",
                    "description": "Populates view->view and table->view lineage using DataHub's sql parser.",
                    "default": true,
                    "type": "boolean"
                },
                "include_view_column_lineage": {
                    "title": "Include View Column Lineage",
                    "description": "Populates column-level lineage for  view->view and table->view lineage using DataHub's sql parser. Requires `include_view_lineage` to be enabled.",
                    "default": true,
                    "type": "boolean"
                },
                "use_file_backed_cache": {
                    "title": "Use File Backed Cache",
                    "description": "Whether to use a file backed cache for the view definitions.",
                    "default": true,
                    "type": "boolean"
                },
                "profiling": {
                    "title": "Profiling",
                    "default": {
                        "enabled": false,
                        "operation_config": {
                            "lower_freq_profile_enabled": false,
                            "profile_day_of_week": null,
                            "profile_date_of_month": null
                        },
                        "limit": null,
                        "offset": null,
                        "profile_table_level_only": false,
                        "include_field_null_count": true,
                        "include_field_distinct_count": true,
                        "include_field_min_value": true,
                        "include_field_max_value": true,
                        "include_field_mean_value": true,
                        "include_field_median_value": true,
                        "include_field_stddev_value": true,
                        "include_field_quantiles": false,
                        "include_field_distinct_value_frequencies": false,
                        "include_field_histogram": false,
                        "include_field_sample_values": true,
                        "max_workers": 20,
                        "report_dropped_profiles": false,
                        "turn_off_expensive_profiling_metrics": false,
                        "field_sample_values_limit": 20,
                        "max_number_of_fields_to_profile": null,
                        "profile_if_updated_since_days": null,
                        "profile_table_size_limit": 5,
                        "profile_table_row_limit": 5000000,
                        "profile_table_row_count_estimate_only": false,
                        "query_combiner_enabled": true,
                        "catch_exceptions": true,
                        "partition_profiling_enabled": true,
                        "partition_datetime": null,
                        "use_sampling": true,
                        "sample_size": 10000,
                        "profile_external_tables": false,
                        "tags_to_ignore_sampling": null,
                        "profile_nested_fields": false
                    },
                    "allOf": [
                        {
                            "$ref": "#/definitions/GEProfilingConfig"
                        }
                    ]
                },
                "username": {
                    "title": "Username",
                    "description": "username",
                    "type": "string"
                },
                "password": {
                    "title": "Password",
                    "description": "password",
                    "default": "",
                    "type": "string",
                    "writeOnly": true,
                    "format": "password"
                },
                "host_port": {
                    "title": "Host Port",
                    "description": "ClickHouse host URL.",
                    "default": "localhost:8123",
                    "type": "string"
                },
                "database": {
                    "title": "Database",
                    "description": "database (catalog)",
                    "type": "string"
                },
                "sqlalchemy_uri": {
                    "title": "Sqlalchemy Uri",
                    "description": "URI of database to connect to. See https://docs.sqlalchemy.org/en/14/core/engines.html#database-urls. Takes precedence over other connection parameters.",
                    "type": "string"
                },
                "database_pattern": {
                    "title": "Database Pattern",
                    "description": "Regex patterns for databases to filter in ingestion.",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "allOf": [
                        {
                            "$ref": "#/definitions/AllowDenyPattern"
                        }
                    ]
                },
                "secure": {
                    "title": "Secure",
                    "type": "boolean"
                },
                "protocol": {
                    "title": "Protocol",
                    "type": "string"
                },
                "uri_opts": {
                    "title": "Uri Opts",
                    "description": "The part of the URI and it's used to provide additional configuration options or parameters for the database connection.",
                    "default": {},
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "include_table_lineage": {
                    "title": "Include Table Lineage",
                    "description": "Whether table lineage should be ingested.",
                    "default": true,
                    "type": "boolean"
                },
                "include_materialized_views": {
                    "title": "Include Materialized Views",
                    "default": true,
                    "type": "boolean"
                },
                "email_domain": {
                    "title": "Email Domain",
                    "type": "string"
                },
                "query_log_table": {
                    "title": "Query Log Table",
                    "default": "system.query_log",
                    "type": "string"
                }
            },
            "required": [
                "email_domain"
            ],
            "additionalProperties": false
        },
        "cassandra": {
            "type": "object",
            "properties": {
                "type": {
                    "type": "string",
                    "enum": [
                        "cassandra"
                    ]
                },
                "config": {
                    "$ref": "#/definitions/cassandra_config"
                }
            },
            "required": [
                "type",
                "config"
            ]
        },
        "cassandra_config": {
            "title": "CassandraSourceConfig",
            "description": "Configuration for connecting to a Cassandra or DataStax Astra DB source.",
            "type": "object",
            "properties": {
                "env": {
                    "title": "Env",
                    "description": "The environment that all assets produced by this connector belong to",
                    "default": "PROD",
                    "type": "string"
                },
                "stateful_ingestion": {
                    "title": "Stateful Ingestion",
                    "description": "Configuration for stateful ingestion and stale metadata removal.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/StatefulStaleMetadataRemovalConfig"
                        }
                    ]
                },
                "platform_instance": {
                    "title": "Platform Instance",
                    "description": "The instance of the platform that all assets produced by this recipe belong to. This should be unique within the platform. See https://datahubproject.io/docs/platform-instances/ for more details.",
                    "type": "string"
                },
                "contact_point": {
                    "title": "Contact Point",
                    "description": "Domain or IP address of the Cassandra instance (excluding port).",
                    "default": "localhost",
                    "type": "string"
                },
                "port": {
                    "title": "Port",
                    "description": "Port number to connect to the Cassandra instance.",
                    "default": 9042,
                    "type": "integer"
                },
                "username": {
                    "title": "Username",
                    "description": "Username credential with read access to the system_schema keyspace.",
                    "type": "string"
                },
                "password": {
                    "title": "Password",
                    "description": "Password credential associated with the specified username.",
                    "type": "string"
                },
                "cloud_config": {
                    "title": "Cloud Config",
                    "description": "Configuration for cloud-based Cassandra, such as DataStax Astra DB.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/CassandraCloudConfig"
                        }
                    ]
                },
                "keyspace_pattern": {
                    "title": "Keyspace Pattern",
                    "description": "Regex patterns to filter keyspaces for ingestion.",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "allOf": [
                        {
                            "$ref": "#/definitions/AllowDenyPattern"
                        }
                    ]
                },
                "table_pattern": {
                    "title": "Table Pattern",
                    "description": "Regex patterns to filter keyspaces.tables for ingestion.",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "allOf": [
                        {
                            "$ref": "#/definitions/AllowDenyPattern"
                        }
                    ]
                },
                "profile_pattern": {
                    "title": "Profile Pattern",
                    "description": "Regex patterns for tables to profile",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "allOf": [
                        {
                            "$ref": "#/definitions/AllowDenyPattern"
                        }
                    ]
                },
                "profiling": {
                    "title": "Profiling",
                    "description": "Configuration for profiling",
                    "default": {
                        "enabled": false,
                        "operation_config": {
                            "lower_freq_profile_enabled": false,
                            "profile_day_of_week": null,
                            "profile_date_of_month": null
                        },
                        "limit": null,
                        "offset": null,
                        "profile_table_level_only": false,
                        "include_field_null_count": true,
                        "include_field_distinct_count": true,
                        "include_field_min_value": true,
                        "include_field_max_value": true,
                        "include_field_mean_value": true,
                        "include_field_median_value": true,
                        "include_field_stddev_value": true,
                        "include_field_quantiles": false,
                        "include_field_distinct_value_frequencies": false,
                        "include_field_histogram": false,
                        "include_field_sample_values": true,
                        "max_workers": 20
                    },
                    "allOf": [
                        {
                            "$ref": "#/definitions/GEProfilingBaseConfig"
                        }
                    ]
                }
            },
            "additionalProperties": false
        },
        "azure-ad": {
            "type": "object",
            "properties": {
                "type": {
                    "type": "string",
                    "enum": [
                        "azure-ad"
                    ]
                },
                "config": {
                    "$ref": "#/definitions/azure-ad_config"
                }
            },
            "required": [
                "type",
                "config"
            ]
        },
        "azure-ad_config": {
            "title": "AzureADConfig",
            "description": "Config to create a token and connect to Azure AD instance",
            "type": "object",
            "properties": {
                "env": {
                    "title": "Env",
                    "description": "The environment that all assets produced by this connector belong to",
                    "default": "PROD",
                    "type": "string"
                },
                "platform_instance": {
                    "title": "Platform Instance",
                    "description": "The instance of the platform that all assets produced by this recipe belong to. This should be unique within the platform. See https://datahubproject.io/docs/platform-instances/ for more details.",
                    "type": "string"
                },
                "stateful_ingestion": {
                    "title": "Stateful Ingestion",
                    "description": "Azure AD Stateful Ingestion Config.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/StatefulStaleMetadataRemovalConfig"
                        }
                    ]
                },
                "client_id": {
                    "title": "Client Id",
                    "description": "Application ID. Found in your app registration on Azure AD Portal",
                    "type": "string"
                },
                "tenant_id": {
                    "title": "Tenant Id",
                    "description": "Directory ID. Found in your app registration on Azure AD Portal",
                    "type": "string"
                },
                "client_secret": {
                    "title": "Client Secret",
                    "description": "Client secret. Found in your app registration on Azure AD Portal",
                    "type": "string"
                },
                "authority": {
                    "title": "Authority",
                    "description": "The authority (https://docs.microsoft.com/en-us/azure/active-directory/develop/msal-client-application-configuration) is a URL that indicates a directory that MSAL can request tokens from.",
                    "type": "string"
                },
                "token_url": {
                    "title": "Token Url",
                    "description": "The token URL that acquires a token from Azure AD for authorizing requests.  This source will only work with v1.0 endpoint.",
                    "type": "string"
                },
                "redirect": {
                    "title": "Redirect",
                    "description": "Redirect URI.  Found in your app registration on Azure AD Portal.",
                    "default": "https://login.microsoftonline.com/common/oauth2/nativeclient",
                    "type": "string"
                },
                "graph_url": {
                    "title": "Graph Url",
                    "description": "[Microsoft Graph API endpoint](https://docs.microsoft.com/en-us/graph/use-the-api)",
                    "default": "https://graph.microsoft.com/v1.0",
                    "type": "string"
                },
                "azure_ad_response_to_username_attr": {
                    "title": "Azure Ad Response To Username Attr",
                    "description": "Which Azure AD User Response attribute to use as input to DataHub username mapping.",
                    "default": "userPrincipalName",
                    "type": "string"
                },
                "azure_ad_response_to_username_regex": {
                    "title": "Azure Ad Response To Username Regex",
                    "description": "A regex used to parse the DataHub username from the attribute specified in `azure_ad_response_to_username_attr`.",
                    "default": "(.*)",
                    "type": "string"
                },
                "azure_ad_response_to_groupname_attr": {
                    "title": "Azure Ad Response To Groupname Attr",
                    "description": "Which Azure AD Group Response attribute to use as input to DataHub group name mapping.",
                    "default": "displayName",
                    "type": "string"
                },
                "azure_ad_response_to_groupname_regex": {
                    "title": "Azure Ad Response To Groupname Regex",
                    "description": "A regex used to parse the DataHub group name from the attribute specified in `azure_ad_response_to_groupname_attr`.",
                    "default": "(.*)",
                    "type": "string"
                },
                "ingest_users": {
                    "title": "Ingest Users",
                    "description": "Whether users should be ingested into DataHub.",
                    "default": true,
                    "type": "boolean"
                },
                "ingest_groups": {
                    "title": "Ingest Groups",
                    "description": "Whether groups should be ingested into DataHub.",
                    "default": true,
                    "type": "boolean"
                },
                "ingest_group_membership": {
                    "title": "Ingest Group Membership",
                    "description": "Whether group membership should be ingested into DataHub. ingest_groups must be True if this is True.",
                    "default": true,
                    "type": "boolean"
                },
                "ingest_groups_users": {
                    "title": "Ingest Groups Users",
                    "description": "This option is useful only when `ingest_users` is set to False and `ingest_group_membership` to True. As effect, only the users which belongs to the selected groups will be ingested.",
                    "default": true,
                    "type": "boolean"
                },
                "users_pattern": {
                    "title": "Users Pattern",
                    "description": "regex patterns for users to filter in ingestion.",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "allOf": [
                        {
                            "$ref": "#/definitions/AllowDenyPattern"
                        }
                    ]
                },
                "groups_pattern": {
                    "title": "Groups Pattern",
                    "description": "regex patterns for groups to include in ingestion.",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "allOf": [
                        {
                            "$ref": "#/definitions/AllowDenyPattern"
                        }
                    ]
                },
                "filtered_tracking": {
                    "title": "Filtered Tracking",
                    "description": "If enabled, report will contain names of filtered users and groups.",
                    "default": true,
                    "type": "boolean"
                },
                "mask_group_id": {
                    "title": "Mask Group Id",
                    "description": "Whether workunit ID's for groups should be masked to avoid leaking sensitive information.",
                    "default": true,
                    "type": "boolean"
                },
                "mask_user_id": {
                    "title": "Mask User Id",
                    "description": "Whether workunit ID's for users should be masked to avoid leaking sensitive information.",
                    "default": true,
                    "type": "boolean"
                }
            },
            "required": [
                "client_id",
                "tenant_id",
                "client_secret",
                "authority",
                "token_url"
            ],
            "additionalProperties": false
        },
        "neo4j": {
            "type": "object",
            "properties": {
                "type": {
                    "type": "string",
                    "enum": [
                        "neo4j"
                    ]
                },
                "config": {
                    "$ref": "#/definitions/neo4j_config"
                }
            },
            "required": [
                "type",
                "config"
            ]
        },
        "neo4j_config": {
            "title": "Neo4jConfig",
            "description": "Any source that produces dataset urns in a single environment should inherit this class",
            "type": "object",
            "properties": {
                "env": {
                    "title": "Env",
                    "description": "Neo4j env",
                    "type": "string"
                },
                "username": {
                    "title": "Username",
                    "description": "Neo4j Username",
                    "type": "string"
                },
                "password": {
                    "title": "Password",
                    "description": "Neo4j Password",
                    "type": "string"
                },
                "uri": {
                    "title": "Uri",
                    "description": "The URI for the Neo4j server",
                    "type": "string"
                }
            },
            "required": [
                "env",
                "username",
                "password",
                "uri"
            ],
            "additionalProperties": false
        },
        "gcs": {
            "type": "object",
            "properties": {
                "type": {
                    "type": "string",
                    "enum": [
                        "gcs"
                    ]
                },
                "config": {
                    "$ref": "#/definitions/gcs_config"
                }
            },
            "required": [
                "type",
                "config"
            ]
        },
        "gcs_config": {
            "title": "GCSSourceConfig",
            "description": "Base configuration class for stateful ingestion for source configs to inherit from.",
            "type": "object",
            "properties": {
                "path_specs": {
                    "title": "Path Specs",
                    "description": "List of PathSpec. See [below](#path-spec) the details about PathSpec",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/PathSpec"
                    }
                },
                "env": {
                    "title": "Env",
                    "description": "The environment that all assets produced by this connector belong to",
                    "default": "PROD",
                    "type": "string"
                },
                "platform_instance": {
                    "title": "Platform Instance",
                    "description": "The instance of the platform that all assets produced by this recipe belong to. This should be unique within the platform. See https://datahubproject.io/docs/platform-instances/ for more details.",
                    "type": "string"
                },
                "stateful_ingestion": {
                    "$ref": "#/definitions/StatefulStaleMetadataRemovalConfig"
                },
                "credential": {
                    "title": "Credential",
                    "description": "Google cloud storage [HMAC keys](https://cloud.google.com/storage/docs/authentication/hmackeys)",
                    "allOf": [
                        {
                            "$ref": "#/definitions/HMACKey"
                        }
                    ]
                },
                "max_rows": {
                    "title": "Max Rows",
                    "description": "Maximum number of rows to use when inferring schemas for TSV and CSV files.",
                    "default": 100,
                    "type": "integer"
                },
                "number_of_files_to_sample": {
                    "title": "Number Of Files To Sample",
                    "description": "Number of files to list to sample for schema inference. This will be ignored if sample_files is set to False in the pathspec.",
                    "default": 100,
                    "type": "integer"
                }
            },
            "required": [
                "path_specs",
                "credential"
            ],
            "additionalProperties": false
        },
        "hive-metastore": {
            "type": "object",
            "properties": {
                "type": {
                    "type": "string",
                    "enum": [
                        "hive-metastore"
                    ]
                },
                "config": {
                    "$ref": "#/definitions/hive-metastore_config"
                }
            },
            "required": [
                "type",
                "config"
            ]
        },
        "hive-metastore_config": {
            "title": "HiveMetastore",
            "description": "Base configuration class for stateful ingestion for source configs to inherit from.",
            "type": "object",
            "properties": {
                "schema_pattern": {
                    "title": "Schema Pattern",
                    "description": "Regex patterns for schemas to filter in ingestion. Specify regex to only match the schema name. e.g. to match all tables in schema analytics, use the regex 'analytics'",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "allOf": [
                        {
                            "$ref": "#/definitions/AllowDenyPattern"
                        }
                    ]
                },
                "table_pattern": {
                    "title": "Table Pattern",
                    "description": "Regex patterns for tables to filter in ingestion. Specify regex to match the entire table name in database.schema.table format. e.g. to match all tables starting with customer in Customer database and public schema, use the regex 'Customer.public.customer.*'",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "allOf": [
                        {
                            "$ref": "#/definitions/AllowDenyPattern"
                        }
                    ]
                },
                "view_pattern": {
                    "title": "View Pattern",
                    "description": "Regex patterns for views to filter in ingestion. Note: Defaults to table_pattern if not specified. Specify regex to match the entire view name in database.schema.view format. e.g. to match all views starting with customer in Customer database and public schema, use the regex 'Customer.public.customer.*'",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "allOf": [
                        {
                            "$ref": "#/definitions/AllowDenyPattern"
                        }
                    ]
                },
                "classification": {
                    "title": "Classification",
                    "description": "For details, refer to [Classification](../../../../metadata-ingestion/docs/dev_guides/classification.md).",
                    "default": {
                        "enabled": false,
                        "sample_size": 100,
                        "max_workers": 4,
                        "table_pattern": {
                            "allow": [
                                ".*"
                            ],
                            "deny": [],
                            "ignoreCase": true
                        },
                        "column_pattern": {
                            "allow": [
                                ".*"
                            ],
                            "deny": [],
                            "ignoreCase": true
                        },
                        "info_type_to_term": {},
                        "classifiers": [
                            {
                                "type": "datahub",
                                "config": null
                            }
                        ]
                    },
                    "allOf": [
                        {
                            "$ref": "#/definitions/ClassificationConfig"
                        }
                    ]
                },
                "incremental_lineage": {
                    "title": "Incremental Lineage",
                    "description": "When enabled, emits lineage as incremental to existing lineage already in DataHub. When disabled, re-states lineage on each run.",
                    "default": false,
                    "type": "boolean"
                },
                "convert_urns_to_lowercase": {
                    "title": "Convert Urns To Lowercase",
                    "description": "Whether to convert dataset urns to lowercase.",
                    "default": false,
                    "type": "boolean"
                },
                "env": {
                    "title": "Env",
                    "description": "The environment that all assets produced by this connector belong to",
                    "default": "PROD",
                    "type": "string"
                },
                "platform_instance": {
                    "title": "Platform Instance",
                    "description": "The instance of the platform that all assets produced by this recipe belong to. This should be unique within the platform. See https://datahubproject.io/docs/platform-instances/ for more details.",
                    "type": "string"
                },
                "stateful_ingestion": {
                    "$ref": "#/definitions/StatefulStaleMetadataRemovalConfig"
                },
                "options": {
                    "title": "Options",
                    "description": "Any options specified here will be passed to [SQLAlchemy.create_engine](https://docs.sqlalchemy.org/en/14/core/engines.html#sqlalchemy.create_engine) as kwargs. To set connection arguments in the URL, specify them under `connect_args`.",
                    "type": "object"
                },
                "profile_pattern": {
                    "title": "Profile Pattern",
                    "description": "Regex patterns to filter tables (or specific columns) for profiling during ingestion. Note that only tables allowed by the `table_pattern` will be considered.",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "allOf": [
                        {
                            "$ref": "#/definitions/AllowDenyPattern"
                        }
                    ]
                },
                "domain": {
                    "title": "Domain",
                    "description": "Attach domains to databases, schemas or tables during ingestion using regex patterns. Domain key can be a guid like *urn:li:domain:ec428203-ce86-4db3-985d-5a8ee6df32ba* or a string like \"Marketing\".) If you provide strings, then datahub will attempt to resolve this name to a guid, and will error out if this fails. There can be multiple domain keys specified.",
                    "default": {},
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/definitions/AllowDenyPattern"
                    }
                },
                "include_views": {
                    "title": "Include Views",
                    "description": "Whether views should be ingested.",
                    "default": true,
                    "type": "boolean"
                },
                "include_tables": {
                    "title": "Include Tables",
                    "description": "Whether tables should be ingested.",
                    "default": true,
                    "type": "boolean"
                },
                "include_table_location_lineage": {
                    "title": "Include Table Location Lineage",
                    "description": "If the source supports it, include table lineage to the underlying storage location.",
                    "default": true,
                    "type": "boolean"
                },
                "include_view_lineage": {
                    "title": "Include View Lineage",
                    "description": "Populates view->view and table->view lineage using DataHub's sql parser.",
                    "default": true,
                    "type": "boolean"
                },
                "include_view_column_lineage": {
                    "title": "Include View Column Lineage",
                    "description": "Populates column-level lineage for  view->view and table->view lineage using DataHub's sql parser. Requires `include_view_lineage` to be enabled.",
                    "default": true,
                    "type": "boolean"
                },
                "use_file_backed_cache": {
                    "title": "Use File Backed Cache",
                    "description": "Whether to use a file backed cache for the view definitions.",
                    "default": true,
                    "type": "boolean"
                },
                "profiling": {
                    "title": "Profiling",
                    "default": {
                        "enabled": false,
                        "operation_config": {
                            "lower_freq_profile_enabled": false,
                            "profile_day_of_week": null,
                            "profile_date_of_month": null
                        },
                        "limit": null,
                        "offset": null,
                        "profile_table_level_only": false,
                        "include_field_null_count": true,
                        "include_field_distinct_count": true,
                        "include_field_min_value": true,
                        "include_field_max_value": true,
                        "include_field_mean_value": true,
                        "include_field_median_value": true,
                        "include_field_stddev_value": true,
                        "include_field_quantiles": false,
                        "include_field_distinct_value_frequencies": false,
                        "include_field_histogram": false,
                        "include_field_sample_values": true,
                        "max_workers": 20,
                        "report_dropped_profiles": false,
                        "turn_off_expensive_profiling_metrics": false,
                        "field_sample_values_limit": 20,
                        "max_number_of_fields_to_profile": null,
                        "profile_if_updated_since_days": null,
                        "profile_table_size_limit": 5,
                        "profile_table_row_limit": 5000000,
                        "profile_table_row_count_estimate_only": false,
                        "query_combiner_enabled": true,
                        "catch_exceptions": true,
                        "partition_profiling_enabled": true,
                        "partition_datetime": null,
                        "use_sampling": true,
                        "sample_size": 10000,
                        "profile_external_tables": false,
                        "tags_to_ignore_sampling": null,
                        "profile_nested_fields": false
                    },
                    "allOf": [
                        {
                            "$ref": "#/definitions/GEProfilingConfig"
                        }
                    ]
                },
                "username": {
                    "title": "Username",
                    "description": "username",
                    "type": "string"
                },
                "password": {
                    "title": "Password",
                    "description": "password",
                    "type": "string",
                    "writeOnly": true,
                    "format": "password"
                },
                "host_port": {
                    "title": "Host Port",
                    "description": "Host URL and port to connect to. Example: localhost:3306",
                    "default": "localhost:3306",
                    "type": "string"
                },
                "database": {
                    "title": "Database",
                    "description": "database (catalog)",
                    "type": "string"
                },
                "sqlalchemy_uri": {
                    "title": "Sqlalchemy Uri",
                    "description": "URI of database to connect to. See https://docs.sqlalchemy.org/en/14/core/engines.html#database-urls. Takes precedence over other connection parameters.",
                    "type": "string"
                },
                "views_where_clause_suffix": {
                    "title": "Views Where Clause Suffix",
                    "description": "Where clause to specify what Presto views should be ingested.",
                    "default": "",
                    "type": "string"
                },
                "tables_where_clause_suffix": {
                    "title": "Tables Where Clause Suffix",
                    "description": "Where clause to specify what Hive tables should be ingested.",
                    "default": "",
                    "type": "string"
                },
                "schemas_where_clause_suffix": {
                    "title": "Schemas Where Clause Suffix",
                    "description": "Where clause to specify what Hive schemas should be ingested.",
                    "default": "",
                    "type": "string"
                },
                "ingestion_job_id": {
                    "title": "Ingestion Job Id",
                    "default": "",
                    "type": "string"
                },
                "database_pattern": {
                    "title": "Database Pattern",
                    "description": "Regex patterns for hive/presto database to filter in ingestion. Specify regex to only match the database name. e.g. to match all tables in database analytics, use the regex 'analytics'",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "allOf": [
                        {
                            "$ref": "#/definitions/AllowDenyPattern"
                        }
                    ]
                },
                "metastore_db_name": {
                    "title": "Metastore Db Name",
                    "description": "Name of the Hive metastore's database (usually: metastore). For backward compatibility, if this field is not provided, the database field will be used. If both the 'database' and 'metastore_db_name' fields are set then the 'database' field will be used to filter the hive/presto/trino database",
                    "type": "string"
                },
                "mode": {
                    "description": "The ingested data will be stored under this platform. Valid options: ['hive', 'presto', 'presto-on-hive', 'trino']",
                    "default": "hive",
                    "allOf": [
                        {
                            "$ref": "#/definitions/HiveMetastoreConfigMode"
                        }
                    ]
                },
                "use_catalog_subtype": {
                    "title": "Use Catalog Subtype",
                    "description": "Container Subtype name to be 'Database' or 'Catalog' Valid options: ['True', 'False']",
                    "default": true,
                    "type": "boolean"
                },
                "use_dataset_pascalcase_subtype": {
                    "title": "Use Dataset Pascalcase Subtype",
                    "description": "Dataset Subtype name to be 'Table' or 'View' Valid options: ['True', 'False']",
                    "default": false,
                    "type": "boolean"
                },
                "include_catalog_name_in_ids": {
                    "title": "Include Catalog Name In Ids",
                    "description": "Add the Presto catalog name (e.g. hive) to the generated dataset urns. `urn:li:dataset:(urn:li:dataPlatform:hive,hive.user.logging_events,PROD)` versus `urn:li:dataset:(urn:li:dataPlatform:hive,user.logging_events,PROD)`",
                    "default": false,
                    "type": "boolean"
                },
                "enable_properties_merge": {
                    "title": "Enable Properties Merge",
                    "description": "By default, the connector enables merging of properties with what exists on the server. Set this to False to enable the default connector behavior of overwriting properties on each ingestion.",
                    "default": true,
                    "type": "boolean"
                },
                "simplify_nested_field_paths": {
                    "title": "Simplify Nested Field Paths",
                    "description": "Simplify v2 field paths to v1 by default. If the schema has Union or Array types, still falls back to v2",
                    "default": false,
                    "type": "boolean"
                }
            },
            "additionalProperties": false
        },
        "datahub-gc": {
            "type": "object",
            "properties": {
                "type": {
                    "type": "string",
                    "enum": [
                        "datahub-gc"
                    ]
                },
                "config": {
                    "$ref": "#/definitions/datahub-gc_config"
                }
            },
            "required": [
                "type",
                "config"
            ]
        },
        "datahub-gc_config": {
            "title": "DataHubGcSourceConfig",
            "type": "object",
            "properties": {
                "dry_run": {
                    "title": "Dry Run",
                    "description": "Whether to perform a dry run or not. This is only supported for dataprocess cleanup and soft deleted entities cleanup.",
                    "default": false,
                    "type": "boolean"
                },
                "cleanup_expired_tokens": {
                    "title": "Cleanup Expired Tokens",
                    "description": "Whether to clean up expired tokens or not",
                    "default": true,
                    "type": "boolean"
                },
                "truncate_indices": {
                    "title": "Truncate Indices",
                    "description": "Whether to truncate elasticsearch indices or not which can be safely truncated",
                    "default": true,
                    "type": "boolean"
                },
                "truncate_index_older_than_days": {
                    "title": "Truncate Index Older Than Days",
                    "description": "Indices older than this number of days will be truncated",
                    "default": 30,
                    "type": "integer"
                },
                "truncation_watch_until": {
                    "title": "Truncation Watch Until",
                    "description": "Wait for truncation of indices until this number of documents are left",
                    "default": 10000,
                    "type": "integer"
                },
                "truncation_sleep_between_seconds": {
                    "title": "Truncation Sleep Between Seconds",
                    "description": "Sleep between truncation monitoring.",
                    "default": 30,
                    "type": "integer"
                },
                "dataprocess_cleanup": {
                    "title": "Dataprocess Cleanup",
                    "description": "Configuration for data process cleanup",
                    "allOf": [
                        {
                            "$ref": "#/definitions/DataProcessCleanupConfig"
                        }
                    ]
                },
                "soft_deleted_entities_cleanup": {
                    "title": "Soft Deleted Entities Cleanup",
                    "description": "Configuration for soft deleted entities cleanup",
                    "allOf": [
                        {
                            "$ref": "#/definitions/SoftDeletedEntitiesCleanupConfig"
                        }
                    ]
                },
                "execution_request_cleanup": {
                    "title": "Execution Request Cleanup",
                    "description": "Configuration for execution request cleanup",
                    "allOf": [
                        {
                            "$ref": "#/definitions/DatahubExecutionRequestCleanupConfig"
                        }
                    ]
                }
            },
            "additionalProperties": false
        },
        "teradata": {
            "type": "object",
            "properties": {
                "type": {
                    "type": "string",
                    "enum": [
                        "teradata"
                    ]
                },
                "config": {
                    "$ref": "#/definitions/teradata_config"
                }
            },
            "required": [
                "type",
                "config"
            ]
        },
        "teradata_config": {
            "title": "TeradataConfig",
            "description": "Base configuration class for stateful ingestion for source configs to inherit from.",
            "type": "object",
            "properties": {
                "bucket_duration": {
                    "description": "Size of the time window to aggregate usage stats.",
                    "default": "DAY",
                    "allOf": [
                        {
                            "$ref": "#/definitions/BucketDuration"
                        }
                    ]
                },
                "end_time": {
                    "title": "End Time",
                    "description": "Latest date of lineage/usage to consider. Default: Current time in UTC",
                    "type": "string",
                    "format": "date-time"
                },
                "start_time": {
                    "title": "Start Time",
                    "description": "Earliest date of lineage/usage to consider. Default: Last full day in UTC (or hour, depending on `bucket_duration`). You can also specify relative time with respect to end_time such as '-7 days' Or '-7d'.",
                    "type": "string",
                    "format": "date-time"
                },
                "table_pattern": {
                    "title": "Table Pattern",
                    "description": "Regex patterns for tables to filter in ingestion. Specify regex to match the entire table name in database.schema.table format. e.g. to match all tables starting with customer in Customer database and public schema, use the regex 'Customer.public.customer.*'",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "allOf": [
                        {
                            "$ref": "#/definitions/AllowDenyPattern"
                        }
                    ]
                },
                "view_pattern": {
                    "title": "View Pattern",
                    "description": "Regex patterns for views to filter in ingestion. Note: Defaults to table_pattern if not specified. Specify regex to match the entire view name in database.schema.view format. e.g. to match all views starting with customer in Customer database and public schema, use the regex 'Customer.public.customer.*'",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "allOf": [
                        {
                            "$ref": "#/definitions/AllowDenyPattern"
                        }
                    ]
                },
                "classification": {
                    "title": "Classification",
                    "description": "For details, refer to [Classification](../../../../metadata-ingestion/docs/dev_guides/classification.md).",
                    "default": {
                        "enabled": false,
                        "sample_size": 100,
                        "max_workers": 4,
                        "table_pattern": {
                            "allow": [
                                ".*"
                            ],
                            "deny": [],
                            "ignoreCase": true
                        },
                        "column_pattern": {
                            "allow": [
                                ".*"
                            ],
                            "deny": [],
                            "ignoreCase": true
                        },
                        "info_type_to_term": {},
                        "classifiers": [
                            {
                                "type": "datahub",
                                "config": null
                            }
                        ]
                    },
                    "allOf": [
                        {
                            "$ref": "#/definitions/ClassificationConfig"
                        }
                    ]
                },
                "incremental_lineage": {
                    "title": "Incremental Lineage",
                    "description": "When enabled, emits lineage as incremental to existing lineage already in DataHub. When disabled, re-states lineage on each run.",
                    "default": false,
                    "type": "boolean"
                },
                "convert_urns_to_lowercase": {
                    "title": "Convert Urns To Lowercase",
                    "description": "Whether to convert dataset urns to lowercase.",
                    "default": false,
                    "type": "boolean"
                },
                "env": {
                    "title": "Env",
                    "description": "The environment that all assets produced by this connector belong to",
                    "default": "PROD",
                    "type": "string"
                },
                "platform_instance": {
                    "title": "Platform Instance",
                    "description": "The instance of the platform that all assets produced by this recipe belong to. This should be unique within the platform. See https://datahubproject.io/docs/platform-instances/ for more details.",
                    "type": "string"
                },
                "stateful_ingestion": {
                    "$ref": "#/definitions/StatefulStaleMetadataRemovalConfig"
                },
                "options": {
                    "title": "Options",
                    "description": "Any options specified here will be passed to [SQLAlchemy.create_engine](https://docs.sqlalchemy.org/en/14/core/engines.html#sqlalchemy.create_engine) as kwargs. To set connection arguments in the URL, specify them under `connect_args`.",
                    "type": "object"
                },
                "profile_pattern": {
                    "title": "Profile Pattern",
                    "description": "Regex patterns to filter tables (or specific columns) for profiling during ingestion. Note that only tables allowed by the `table_pattern` will be considered.",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "allOf": [
                        {
                            "$ref": "#/definitions/AllowDenyPattern"
                        }
                    ]
                },
                "domain": {
                    "title": "Domain",
                    "description": "Attach domains to databases, schemas or tables during ingestion using regex patterns. Domain key can be a guid like *urn:li:domain:ec428203-ce86-4db3-985d-5a8ee6df32ba* or a string like \"Marketing\".) If you provide strings, then datahub will attempt to resolve this name to a guid, and will error out if this fails. There can be multiple domain keys specified.",
                    "default": {},
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/definitions/AllowDenyPattern"
                    }
                },
                "include_views": {
                    "title": "Include Views",
                    "description": "Whether views should be ingested.",
                    "default": true,
                    "type": "boolean"
                },
                "include_tables": {
                    "title": "Include Tables",
                    "description": "Whether tables should be ingested.",
                    "default": true,
                    "type": "boolean"
                },
                "include_table_location_lineage": {
                    "title": "Include Table Location Lineage",
                    "description": "If the source supports it, include table lineage to the underlying storage location.",
                    "default": true,
                    "type": "boolean"
                },
                "include_view_lineage": {
                    "title": "Include View Lineage",
                    "description": "Whether to include view lineage in the ingestion. This requires to have the view lineage feature enabled.",
                    "default": true,
                    "type": "boolean"
                },
                "include_view_column_lineage": {
                    "title": "Include View Column Lineage",
                    "description": "Populates column-level lineage for  view->view and table->view lineage using DataHub's sql parser. Requires `include_view_lineage` to be enabled.",
                    "default": true,
                    "type": "boolean"
                },
                "use_file_backed_cache": {
                    "title": "Use File Backed Cache",
                    "description": "Whether to use a file backed cache for the view definitions.",
                    "default": true,
                    "type": "boolean"
                },
                "profiling": {
                    "title": "Profiling",
                    "default": {
                        "enabled": false,
                        "operation_config": {
                            "lower_freq_profile_enabled": false,
                            "profile_day_of_week": null,
                            "profile_date_of_month": null
                        },
                        "limit": null,
                        "offset": null,
                        "profile_table_level_only": false,
                        "include_field_null_count": true,
                        "include_field_distinct_count": true,
                        "include_field_min_value": true,
                        "include_field_max_value": true,
                        "include_field_mean_value": true,
                        "include_field_median_value": true,
                        "include_field_stddev_value": true,
                        "include_field_quantiles": false,
                        "include_field_distinct_value_frequencies": false,
                        "include_field_histogram": false,
                        "include_field_sample_values": true,
                        "max_workers": 20,
                        "report_dropped_profiles": false,
                        "turn_off_expensive_profiling_metrics": false,
                        "field_sample_values_limit": 20,
                        "max_number_of_fields_to_profile": null,
                        "profile_if_updated_since_days": null,
                        "profile_table_size_limit": 5,
                        "profile_table_row_limit": 5000000,
                        "profile_table_row_count_estimate_only": false,
                        "query_combiner_enabled": true,
                        "catch_exceptions": true,
                        "partition_profiling_enabled": true,
                        "partition_datetime": null,
                        "use_sampling": true,
                        "sample_size": 10000,
                        "profile_external_tables": false,
                        "tags_to_ignore_sampling": null,
                        "profile_nested_fields": false
                    },
                    "allOf": [
                        {
                            "$ref": "#/definitions/GEProfilingConfig"
                        }
                    ]
                },
                "username": {
                    "title": "Username",
                    "description": "username",
                    "type": "string"
                },
                "password": {
                    "title": "Password",
                    "description": "password",
                    "type": "string",
                    "writeOnly": true,
                    "format": "password"
                },
                "host_port": {
                    "title": "Host Port",
                    "description": "host URL",
                    "type": "string"
                },
                "database": {
                    "title": "Database",
                    "description": "database (catalog)",
                    "type": "string"
                },
                "scheme": {
                    "title": "Scheme",
                    "description": "database scheme",
                    "default": "teradatasql",
                    "type": "string"
                },
                "sqlalchemy_uri": {
                    "title": "Sqlalchemy Uri",
                    "description": "URI of database to connect to. See https://docs.sqlalchemy.org/en/14/core/engines.html#database-urls. Takes precedence over other connection parameters.",
                    "type": "string"
                },
                "database_pattern": {
                    "title": "Database Pattern",
                    "description": "Regex patterns for databases to filter in ingestion.",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [
                            "All",
                            "Crashdumps",
                            "Default",
                            "DemoNow_Monitor",
                            "EXTUSER",
                            "External_AP",
                            "GLOBAL_FUNCTIONS",
                            "LockLogShredder",
                            "PUBLIC",
                            "SQLJ",
                            "SYSBAR",
                            "SYSJDBC",
                            "SYSLIB",
                            "SYSSPATIAL",
                            "SYSUDTLIB",
                            "SYSUIF",
                            "SysAdmin",
                            "Sys_Calendar",
                            "SystemFe",
                            "TDBCMgmt",
                            "TDMaps",
                            "TDPUSER",
                            "TDQCD",
                            "TDStats",
                            "TD_ANALYTICS_DB",
                            "TD_SERVER_DB",
                            "TD_SYSFNLIB",
                            "TD_SYSGPL",
                            "TD_SYSXML",
                            "TDaaS_BAR",
                            "TDaaS_DB",
                            "TDaaS_Maint",
                            "TDaaS_Monitor",
                            "TDaaS_Support",
                            "TDaaS_TDBCMgmt1",
                            "TDaaS_TDBCMgmt2",
                            "dbcmngr",
                            "mldb",
                            "system",
                            "tapidb",
                            "tdwm",
                            "val",
                            "dbc"
                        ],
                        "ignoreCase": true
                    },
                    "allOf": [
                        {
                            "$ref": "#/definitions/AllowDenyPattern"
                        }
                    ]
                },
                "databases": {
                    "title": "Databases",
                    "description": "List of databases to ingest. If not specified, all databases will be ingested. Even if this is specified, databases will still be filtered by `database_pattern`.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "usage": {
                    "title": "Usage",
                    "description": "The usage config to use when generating usage statistics",
                    "default": {
                        "bucket_duration": "DAY",
                        "end_time": "2024-12-24T12:58:47.160086+00:00",
                        "start_time": "2024-12-23T00:00:00+00:00",
                        "queries_character_limit": 24000,
                        "top_n_queries": 10,
                        "user_email_pattern": {
                            "allow": [
                                ".*"
                            ],
                            "deny": [],
                            "ignoreCase": true
                        },
                        "include_operational_stats": true,
                        "include_read_operational_stats": false,
                        "format_sql_queries": false,
                        "include_top_n_queries": true
                    },
                    "allOf": [
                        {
                            "$ref": "#/definitions/BaseUsageConfig"
                        }
                    ]
                },
                "default_db": {
                    "title": "Default Db",
                    "description": "The default database to use for unqualified table names",
                    "type": "string"
                },
                "include_usage_statistics": {
                    "title": "Include Usage Statistics",
                    "description": "Generate usage statistic.",
                    "default": false,
                    "type": "boolean"
                },
                "use_qvci": {
                    "title": "Use Qvci",
                    "description": "Whether to use QVCI to get column information. This is faster but requires to have QVCI enabled.",
                    "default": false,
                    "type": "boolean"
                },
                "include_table_lineage": {
                    "title": "Include Table Lineage",
                    "description": "Whether to include table lineage in the ingestion. This requires to have the table lineage feature enabled.",
                    "default": false,
                    "type": "boolean"
                }
            },
            "required": [
                "host_port"
            ],
            "additionalProperties": false
        },
        "abs": {
            "type": "object",
            "properties": {
                "type": {
                    "type": "string",
                    "enum": [
                        "abs"
                    ]
                },
                "config": {
                    "$ref": "#/definitions/abs_config"
                }
            },
            "required": [
                "type",
                "config"
            ]
        },
        "abs_config": {
            "title": "DataLakeSourceConfig",
            "description": "Base configuration class for stateful ingestion for source configs to inherit from.",
            "type": "object",
            "properties": {
                "path_specs": {
                    "title": "Path Specs",
                    "description": "List of PathSpec. See [below](#path-spec) the details about PathSpec",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/PathSpec"
                    }
                },
                "env": {
                    "title": "Env",
                    "description": "The environment that all assets produced by this connector belong to",
                    "default": "PROD",
                    "type": "string"
                },
                "platform_instance": {
                    "title": "Platform Instance",
                    "description": "The instance of the platform that all assets produced by this recipe belong to. This should be unique within the platform. See https://datahubproject.io/docs/platform-instances/ for more details.",
                    "type": "string"
                },
                "stateful_ingestion": {
                    "$ref": "#/definitions/StatefulStaleMetadataRemovalConfig"
                },
                "platform": {
                    "title": "Platform",
                    "description": "The platform that this source connects to (either 'abs' or 'file'). If not specified, the platform will be inferred from the path_specs.",
                    "default": "",
                    "type": "string"
                },
                "azure_config": {
                    "title": "Azure Config",
                    "description": "Azure configuration",
                    "allOf": [
                        {
                            "$ref": "#/definitions/AzureConnectionConfig"
                        }
                    ]
                },
                "use_abs_container_properties": {
                    "title": "Use Abs Container Properties",
                    "description": "Whether to create tags in datahub from the abs container properties",
                    "type": "boolean"
                },
                "use_abs_blob_tags": {
                    "title": "Use Abs Blob Tags",
                    "description": "Whether to create tags in datahub from the abs blob tags",
                    "type": "boolean"
                },
                "use_abs_blob_properties": {
                    "title": "Use Abs Blob Properties",
                    "description": "Whether to create tags in datahub from the abs blob properties",
                    "type": "boolean"
                },
                "profile_patterns": {
                    "title": "Profile Patterns",
                    "description": "regex patterns for tables to profile ",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "allOf": [
                        {
                            "$ref": "#/definitions/AllowDenyPattern"
                        }
                    ]
                },
                "profiling": {
                    "title": "Profiling",
                    "description": "Data profiling configuration",
                    "default": {
                        "enabled": false,
                        "operation_config": {
                            "lower_freq_profile_enabled": false,
                            "profile_day_of_week": null,
                            "profile_date_of_month": null
                        },
                        "profile_table_level_only": false,
                        "max_number_of_fields_to_profile": null,
                        "include_field_null_count": true,
                        "include_field_min_value": true,
                        "include_field_max_value": true,
                        "include_field_mean_value": true,
                        "include_field_median_value": true,
                        "include_field_stddev_value": true,
                        "include_field_quantiles": true,
                        "include_field_distinct_value_frequencies": true,
                        "include_field_histogram": true,
                        "include_field_sample_values": true
                    },
                    "allOf": [
                        {
                            "$ref": "#/definitions/DataLakeProfilerConfig"
                        }
                    ]
                },
                "spark_driver_memory": {
                    "title": "Spark Driver Memory",
                    "description": "Max amount of memory to grant Spark.",
                    "default": "4g",
                    "type": "string"
                },
                "spark_config": {
                    "title": "Spark Config",
                    "description": "Spark configuration properties to set on the SparkSession. Put config property names into quotes. For example: '\"spark.executor.memory\": \"2g\"'",
                    "default": {},
                    "type": "object"
                },
                "max_rows": {
                    "title": "Max Rows",
                    "description": "Maximum number of rows to use when inferring schemas for TSV and CSV files.",
                    "default": 100,
                    "type": "integer"
                },
                "add_partition_columns_to_schema": {
                    "title": "Add Partition Columns To Schema",
                    "description": "Whether to add partition fields to the schema.",
                    "default": false,
                    "type": "boolean"
                },
                "verify_ssl": {
                    "title": "Verify Ssl",
                    "description": "Either a boolean, in which case it controls whether we verify the server's TLS certificate, or a string, in which case it must be a path to a CA bundle to use.",
                    "default": true,
                    "anyOf": [
                        {
                            "type": "boolean"
                        },
                        {
                            "type": "string"
                        }
                    ]
                },
                "number_of_files_to_sample": {
                    "title": "Number Of Files To Sample",
                    "description": "Number of files to list to sample for schema inference. This will be ignored if sample_files is set to False in the pathspec.",
                    "default": 100,
                    "type": "integer"
                }
            },
            "required": [
                "path_specs"
            ],
            "additionalProperties": false
        },
        "elasticsearch": {
            "type": "object",
            "properties": {
                "type": {
                    "type": "string",
                    "enum": [
                        "elasticsearch"
                    ]
                },
                "config": {
                    "$ref": "#/definitions/elasticsearch_config"
                }
            },
            "required": [
                "type",
                "config"
            ]
        },
        "elasticsearch_config": {
            "title": "ElasticsearchSourceConfig",
            "description": "Any source that connects to a platform should inherit this class",
            "type": "object",
            "properties": {
                "env": {
                    "title": "Env",
                    "description": "The environment that all assets produced by this connector belong to",
                    "default": "PROD",
                    "type": "string"
                },
                "platform_instance": {
                    "title": "Platform Instance",
                    "description": "The instance of the platform that all assets produced by this recipe belong to. This should be unique within the platform. See https://datahubproject.io/docs/platform-instances/ for more details.",
                    "type": "string"
                },
                "host": {
                    "title": "Host",
                    "description": "The elastic search host URI.",
                    "default": "localhost:9200",
                    "type": "string"
                },
                "username": {
                    "title": "Username",
                    "description": "The username credential.",
                    "type": "string"
                },
                "password": {
                    "title": "Password",
                    "description": "The password credential.",
                    "type": "string"
                },
                "api_key": {
                    "title": "Api Key",
                    "description": "API Key authentication. Accepts either a list with id and api_key (UTF-8 representation), or a base64 encoded string of id and api_key combined by ':'.",
                    "anyOf": [
                        {},
                        {
                            "type": "string"
                        }
                    ]
                },
                "use_ssl": {
                    "title": "Use Ssl",
                    "description": "Whether to use SSL for the connection or not.",
                    "default": false,
                    "type": "boolean"
                },
                "verify_certs": {
                    "title": "Verify Certs",
                    "description": "Whether to verify SSL certificates.",
                    "default": false,
                    "type": "boolean"
                },
                "ca_certs": {
                    "title": "Ca Certs",
                    "description": "Path to a certificate authority (CA) certificate.",
                    "type": "string"
                },
                "client_cert": {
                    "title": "Client Cert",
                    "description": "Path to the file containing the private key and the certificate, or cert only if using client_key.",
                    "type": "string"
                },
                "client_key": {
                    "title": "Client Key",
                    "description": "Path to the file containing the private key if using separate cert and key files.",
                    "type": "string"
                },
                "ssl_assert_hostname": {
                    "title": "Ssl Assert Hostname",
                    "description": "Use hostname verification if not False.",
                    "default": false,
                    "type": "boolean"
                },
                "ssl_assert_fingerprint": {
                    "title": "Ssl Assert Fingerprint",
                    "description": "Verify the supplied certificate fingerprint if not None.",
                    "type": "string"
                },
                "url_prefix": {
                    "title": "Url Prefix",
                    "description": "There are cases where an enterprise would have multiple elastic search clusters. One way for them to manage is to have a single endpoint for all the elastic search clusters and use url_prefix for routing requests to different clusters.",
                    "default": "",
                    "type": "string"
                },
                "index_pattern": {
                    "title": "Index Pattern",
                    "description": "regex patterns for indexes to filter in ingestion.",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [
                            "^_.*",
                            "^ilm-history.*"
                        ],
                        "ignoreCase": true
                    },
                    "allOf": [
                        {
                            "$ref": "#/definitions/AllowDenyPattern"
                        }
                    ]
                },
                "ingest_index_templates": {
                    "title": "Ingest Index Templates",
                    "description": "Ingests ES index templates if enabled.",
                    "default": false,
                    "type": "boolean"
                },
                "index_template_pattern": {
                    "title": "Index Template Pattern",
                    "description": "The regex patterns for filtering index templates to ingest.",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [
                            "^_.*"
                        ],
                        "ignoreCase": true
                    },
                    "allOf": [
                        {
                            "$ref": "#/definitions/AllowDenyPattern"
                        }
                    ]
                },
                "profiling": {
                    "title": "Profiling",
                    "description": "Configs to ingest data profiles from ElasticSearch.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/ElasticProfiling"
                        }
                    ]
                },
                "collapse_urns": {
                    "title": "Collapse Urns",
                    "description": "List of regex patterns to remove from the name of the URN. All of the indices before removal of URNs are considered as the same dataset. These are applied in order for each URN.\n        The main case where you would want to have multiple of these if the name where you are trying to remove suffix from have different formats.\n        e.g. ending with -YYYY-MM-DD as well as ending -epochtime would require you to have 2 regex patterns to remove the suffixes across all URNs.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/CollapseUrns"
                        }
                    ]
                }
            },
            "additionalProperties": false
        },
        "trino": {
            "type": "object",
            "properties": {
                "type": {
                    "type": "string",
                    "enum": [
                        "trino"
                    ]
                },
                "config": {
                    "$ref": "#/definitions/trino_config"
                }
            },
            "required": [
                "type",
                "config"
            ]
        },
        "trino_config": {
            "title": "TrinoConfig",
            "description": "Base configuration class for stateful ingestion for source configs to inherit from.",
            "type": "object",
            "properties": {
                "schema_pattern": {
                    "title": "Schema Pattern",
                    "description": "Regex patterns for schemas to filter in ingestion. Specify regex to only match the schema name. e.g. to match all tables in schema analytics, use the regex 'analytics'",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "allOf": [
                        {
                            "$ref": "#/definitions/AllowDenyPattern"
                        }
                    ]
                },
                "table_pattern": {
                    "title": "Table Pattern",
                    "description": "Regex patterns for tables to filter in ingestion. Specify regex to match the entire table name in database.schema.table format. e.g. to match all tables starting with customer in Customer database and public schema, use the regex 'Customer.public.customer.*'",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "allOf": [
                        {
                            "$ref": "#/definitions/AllowDenyPattern"
                        }
                    ]
                },
                "view_pattern": {
                    "title": "View Pattern",
                    "description": "Regex patterns for views to filter in ingestion. Note: Defaults to table_pattern if not specified. Specify regex to match the entire view name in database.schema.view format. e.g. to match all views starting with customer in Customer database and public schema, use the regex 'Customer.public.customer.*'",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "allOf": [
                        {
                            "$ref": "#/definitions/AllowDenyPattern"
                        }
                    ]
                },
                "classification": {
                    "title": "Classification",
                    "description": "For details, refer to [Classification](../../../../metadata-ingestion/docs/dev_guides/classification.md).",
                    "default": {
                        "enabled": false,
                        "sample_size": 100,
                        "max_workers": 4,
                        "table_pattern": {
                            "allow": [
                                ".*"
                            ],
                            "deny": [],
                            "ignoreCase": true
                        },
                        "column_pattern": {
                            "allow": [
                                ".*"
                            ],
                            "deny": [],
                            "ignoreCase": true
                        },
                        "info_type_to_term": {},
                        "classifiers": [
                            {
                                "type": "datahub",
                                "config": null
                            }
                        ]
                    },
                    "allOf": [
                        {
                            "$ref": "#/definitions/ClassificationConfig"
                        }
                    ]
                },
                "incremental_lineage": {
                    "title": "Incremental Lineage",
                    "description": "When enabled, emits lineage as incremental to existing lineage already in DataHub. When disabled, re-states lineage on each run.",
                    "default": false,
                    "type": "boolean"
                },
                "convert_urns_to_lowercase": {
                    "title": "Convert Urns To Lowercase",
                    "description": "Whether to convert dataset urns to lowercase.",
                    "default": false,
                    "type": "boolean"
                },
                "env": {
                    "title": "Env",
                    "description": "The environment that all assets produced by this connector belong to",
                    "default": "PROD",
                    "type": "string"
                },
                "platform_instance": {
                    "title": "Platform Instance",
                    "description": "The instance of the platform that all assets produced by this recipe belong to. This should be unique within the platform. See https://datahubproject.io/docs/platform-instances/ for more details.",
                    "type": "string"
                },
                "stateful_ingestion": {
                    "$ref": "#/definitions/StatefulStaleMetadataRemovalConfig"
                },
                "options": {
                    "title": "Options",
                    "description": "Any options specified here will be passed to [SQLAlchemy.create_engine](https://docs.sqlalchemy.org/en/14/core/engines.html#sqlalchemy.create_engine) as kwargs. To set connection arguments in the URL, specify them under `connect_args`.",
                    "type": "object"
                },
                "profile_pattern": {
                    "title": "Profile Pattern",
                    "description": "Regex patterns to filter tables (or specific columns) for profiling during ingestion. Note that only tables allowed by the `table_pattern` will be considered.",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "allOf": [
                        {
                            "$ref": "#/definitions/AllowDenyPattern"
                        }
                    ]
                },
                "domain": {
                    "title": "Domain",
                    "description": "Attach domains to databases, schemas or tables during ingestion using regex patterns. Domain key can be a guid like *urn:li:domain:ec428203-ce86-4db3-985d-5a8ee6df32ba* or a string like \"Marketing\".) If you provide strings, then datahub will attempt to resolve this name to a guid, and will error out if this fails. There can be multiple domain keys specified.",
                    "default": {},
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/definitions/AllowDenyPattern"
                    }
                },
                "include_views": {
                    "title": "Include Views",
                    "description": "Whether views should be ingested.",
                    "default": true,
                    "type": "boolean"
                },
                "include_tables": {
                    "title": "Include Tables",
                    "description": "Whether tables should be ingested.",
                    "default": true,
                    "type": "boolean"
                },
                "include_table_location_lineage": {
                    "title": "Include Table Location Lineage",
                    "description": "If the source supports it, include table lineage to the underlying storage location.",
                    "default": true,
                    "type": "boolean"
                },
                "include_view_lineage": {
                    "title": "Include View Lineage",
                    "description": "Populates view->view and table->view lineage using DataHub's sql parser.",
                    "default": true,
                    "type": "boolean"
                },
                "include_view_column_lineage": {
                    "title": "Include View Column Lineage",
                    "description": "Populates column-level lineage for  view->view and table->view lineage using DataHub's sql parser. Requires `include_view_lineage` to be enabled.",
                    "default": true,
                    "type": "boolean"
                },
                "use_file_backed_cache": {
                    "title": "Use File Backed Cache",
                    "description": "Whether to use a file backed cache for the view definitions.",
                    "default": true,
                    "type": "boolean"
                },
                "profiling": {
                    "title": "Profiling",
                    "default": {
                        "enabled": false,
                        "operation_config": {
                            "lower_freq_profile_enabled": false,
                            "profile_day_of_week": null,
                            "profile_date_of_month": null
                        },
                        "limit": null,
                        "offset": null,
                        "profile_table_level_only": false,
                        "include_field_null_count": true,
                        "include_field_distinct_count": true,
                        "include_field_min_value": true,
                        "include_field_max_value": true,
                        "include_field_mean_value": true,
                        "include_field_median_value": true,
                        "include_field_stddev_value": true,
                        "include_field_quantiles": false,
                        "include_field_distinct_value_frequencies": false,
                        "include_field_histogram": false,
                        "include_field_sample_values": true,
                        "max_workers": 20,
                        "report_dropped_profiles": false,
                        "turn_off_expensive_profiling_metrics": false,
                        "field_sample_values_limit": 20,
                        "max_number_of_fields_to_profile": null,
                        "profile_if_updated_since_days": null,
                        "profile_table_size_limit": 5,
                        "profile_table_row_limit": 5000000,
                        "profile_table_row_count_estimate_only": false,
                        "query_combiner_enabled": true,
                        "catch_exceptions": true,
                        "partition_profiling_enabled": true,
                        "partition_datetime": null,
                        "use_sampling": true,
                        "sample_size": 10000,
                        "profile_external_tables": false,
                        "tags_to_ignore_sampling": null,
                        "profile_nested_fields": false
                    },
                    "allOf": [
                        {
                            "$ref": "#/definitions/GEProfilingConfig"
                        }
                    ]
                },
                "username": {
                    "title": "Username",
                    "description": "username",
                    "type": "string"
                },
                "password": {
                    "title": "Password",
                    "description": "password",
                    "type": "string",
                    "writeOnly": true,
                    "format": "password"
                },
                "host_port": {
                    "title": "Host Port",
                    "description": "host URL",
                    "type": "string"
                },
                "database": {
                    "title": "Database",
                    "description": "database (catalog)",
                    "type": "string"
                },
                "sqlalchemy_uri": {
                    "title": "Sqlalchemy Uri",
                    "description": "URI of database to connect to. See https://docs.sqlalchemy.org/en/14/core/engines.html#database-urls. Takes precedence over other connection parameters.",
                    "type": "string"
                },
                "catalog_to_connector_details": {
                    "title": "Catalog To Connector Details",
                    "description": "A mapping of trino catalog to its connector details like connector database, env and platform instance.This configuration is used to build lineage to the underlying connector. Use catalog name as key.",
                    "default": {},
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/definitions/ConnectorDetail"
                    }
                },
                "ingest_lineage_to_connectors": {
                    "title": "Ingest Lineage To Connectors",
                    "description": "Whether lineage of datasets to connectors should be ingested",
                    "default": true,
                    "type": "boolean"
                },
                "trino_as_primary": {
                    "title": "Trino As Primary",
                    "description": "Experimental feature. Whether trino dataset should be primary entity of the set of siblings",
                    "default": true,
                    "type": "boolean"
                }
            },
            "required": [
                "host_port",
                "database"
            ],
            "additionalProperties": false
        },
        "datahub-business-glossary": {
            "type": "object",
            "properties": {
                "type": {
                    "type": "string",
                    "enum": [
                        "datahub-business-glossary"
                    ]
                },
                "config": {
                    "$ref": "#/definitions/datahub-business-glossary_config"
                }
            },
            "required": [
                "type",
                "config"
            ]
        },
        "datahub-business-glossary_config": {
            "title": "BusinessGlossarySourceConfig",
            "type": "object",
            "properties": {
                "file": {
                    "title": "File",
                    "description": "File path or URL to business glossary file to ingest.",
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "string",
                            "format": "path"
                        }
                    ]
                },
                "enable_auto_id": {
                    "title": "Enable Auto Id",
                    "description": "Generate guid urns instead of a plaintext path urn with the node/term's hierarchy.",
                    "default": false,
                    "type": "boolean"
                }
            },
            "required": [
                "file"
            ],
            "additionalProperties": false
        },
        "pulsar": {
            "type": "object",
            "properties": {
                "type": {
                    "type": "string",
                    "enum": [
                        "pulsar"
                    ]
                },
                "config": {
                    "$ref": "#/definitions/pulsar_config"
                }
            },
            "required": [
                "type",
                "config"
            ]
        },
        "pulsar_config": {
            "title": "PulsarSourceConfig",
            "description": "Base configuration class for stateful ingestion for source configs to inherit from.",
            "type": "object",
            "properties": {
                "env": {
                    "title": "Env",
                    "description": "The environment that all assets produced by this connector belong to",
                    "default": "PROD",
                    "type": "string"
                },
                "platform_instance": {
                    "title": "Platform Instance",
                    "description": "The instance of the platform that all assets produced by this recipe belong to. This should be unique within the platform. See https://datahubproject.io/docs/platform-instances/ for more details.",
                    "type": "string"
                },
                "stateful_ingestion": {
                    "title": "Stateful Ingestion",
                    "description": "see Stateful Ingestion",
                    "allOf": [
                        {
                            "$ref": "#/definitions/StatefulStaleMetadataRemovalConfig"
                        }
                    ]
                },
                "web_service_url": {
                    "title": "Web Service Url",
                    "description": "The web URL for the cluster.",
                    "default": "http://localhost:8080",
                    "type": "string"
                },
                "timeout": {
                    "title": "Timeout",
                    "description": "Timout setting, how long to wait for the Pulsar rest api to send data before giving up",
                    "default": 5,
                    "type": "integer"
                },
                "issuer_url": {
                    "title": "Issuer Url",
                    "description": "The complete URL for a Custom Authorization Server. Mandatory for OAuth based authentication.",
                    "type": "string"
                },
                "client_id": {
                    "title": "Client Id",
                    "description": "The application's client ID",
                    "type": "string"
                },
                "client_secret": {
                    "title": "Client Secret",
                    "description": "The application's client secret",
                    "type": "string"
                },
                "token": {
                    "title": "Token",
                    "description": "The access token for the application. Mandatory for token based authentication.",
                    "type": "string"
                },
                "verify_ssl": {
                    "title": "Verify Ssl",
                    "description": "Either a boolean, in which case it controls whether we verify the server's TLS certificate, or a string, in which case it must be a path to a CA bundle to use.",
                    "default": true,
                    "anyOf": [
                        {
                            "type": "boolean"
                        },
                        {
                            "type": "string"
                        }
                    ]
                },
                "tenant_patterns": {
                    "title": "Tenant Patterns",
                    "description": "List of regex patterns for tenants to include/exclude from ingestion. By default all tenants are allowed.",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [
                            "pulsar"
                        ],
                        "ignoreCase": true
                    },
                    "allOf": [
                        {
                            "$ref": "#/definitions/AllowDenyPattern"
                        }
                    ]
                },
                "namespace_patterns": {
                    "title": "Namespace Patterns",
                    "description": "List of regex patterns for namespaces to include/exclude from ingestion. By default the functions namespace is denied.",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [
                            "public/functions"
                        ],
                        "ignoreCase": true
                    },
                    "allOf": [
                        {
                            "$ref": "#/definitions/AllowDenyPattern"
                        }
                    ]
                },
                "topic_patterns": {
                    "title": "Topic Patterns",
                    "description": "List of regex patterns for topics to include/exclude from ingestion. By default the Pulsar system topics are denied.",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [
                            "/__.*$"
                        ],
                        "ignoreCase": true
                    },
                    "allOf": [
                        {
                            "$ref": "#/definitions/AllowDenyPattern"
                        }
                    ]
                },
                "exclude_individual_partitions": {
                    "title": "Exclude Individual Partitions",
                    "description": "Extract each individual partitioned topic. e.g. when turned off a topic with 100 partitions will result in 100 Datasets.",
                    "default": true,
                    "type": "boolean"
                },
                "tenants": {
                    "title": "Tenants",
                    "description": "Listing all tenants requires superUser role, alternative you can set a list of tenants you want to scrape using the tenant admin role",
                    "default": [],
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "domain": {
                    "title": "Domain",
                    "description": "Domain patterns",
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/definitions/AllowDenyPattern"
                    }
                },
                "oid_config": {
                    "title": "Oid Config",
                    "description": "Placeholder for OpenId discovery document",
                    "type": "object"
                }
            },
            "additionalProperties": false
        },
        "oracle": {
            "type": "object",
            "properties": {
                "type": {
                    "type": "string",
                    "enum": [
                        "oracle"
                    ]
                },
                "config": {
                    "$ref": "#/definitions/oracle_config"
                }
            },
            "required": [
                "type",
                "config"
            ]
        },
        "oracle_config": {
            "title": "OracleConfig",
            "description": "Base configuration class for stateful ingestion for source configs to inherit from.",
            "type": "object",
            "properties": {
                "schema_pattern": {
                    "title": "Schema Pattern",
                    "description": "Regex patterns for schemas to filter in ingestion. Specify regex to only match the schema name. e.g. to match all tables in schema analytics, use the regex 'analytics'",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "allOf": [
                        {
                            "$ref": "#/definitions/AllowDenyPattern"
                        }
                    ]
                },
                "table_pattern": {
                    "title": "Table Pattern",
                    "description": "Regex patterns for tables to filter in ingestion. Specify regex to match the entire table name in database.schema.table format. e.g. to match all tables starting with customer in Customer database and public schema, use the regex 'Customer.public.customer.*'",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "allOf": [
                        {
                            "$ref": "#/definitions/AllowDenyPattern"
                        }
                    ]
                },
                "view_pattern": {
                    "title": "View Pattern",
                    "description": "Regex patterns for views to filter in ingestion. Note: Defaults to table_pattern if not specified. Specify regex to match the entire view name in database.schema.view format. e.g. to match all views starting with customer in Customer database and public schema, use the regex 'Customer.public.customer.*'",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "allOf": [
                        {
                            "$ref": "#/definitions/AllowDenyPattern"
                        }
                    ]
                },
                "classification": {
                    "title": "Classification",
                    "description": "For details, refer to [Classification](../../../../metadata-ingestion/docs/dev_guides/classification.md).",
                    "default": {
                        "enabled": false,
                        "sample_size": 100,
                        "max_workers": 4,
                        "table_pattern": {
                            "allow": [
                                ".*"
                            ],
                            "deny": [],
                            "ignoreCase": true
                        },
                        "column_pattern": {
                            "allow": [
                                ".*"
                            ],
                            "deny": [],
                            "ignoreCase": true
                        },
                        "info_type_to_term": {},
                        "classifiers": [
                            {
                                "type": "datahub",
                                "config": null
                            }
                        ]
                    },
                    "allOf": [
                        {
                            "$ref": "#/definitions/ClassificationConfig"
                        }
                    ]
                },
                "incremental_lineage": {
                    "title": "Incremental Lineage",
                    "description": "When enabled, emits lineage as incremental to existing lineage already in DataHub. When disabled, re-states lineage on each run.",
                    "default": false,
                    "type": "boolean"
                },
                "convert_urns_to_lowercase": {
                    "title": "Convert Urns To Lowercase",
                    "description": "Whether to convert dataset urns to lowercase.",
                    "default": false,
                    "type": "boolean"
                },
                "env": {
                    "title": "Env",
                    "description": "The environment that all assets produced by this connector belong to",
                    "default": "PROD",
                    "type": "string"
                },
                "platform_instance": {
                    "title": "Platform Instance",
                    "description": "The instance of the platform that all assets produced by this recipe belong to. This should be unique within the platform. See https://datahubproject.io/docs/platform-instances/ for more details.",
                    "type": "string"
                },
                "stateful_ingestion": {
                    "$ref": "#/definitions/StatefulStaleMetadataRemovalConfig"
                },
                "options": {
                    "title": "Options",
                    "description": "Any options specified here will be passed to [SQLAlchemy.create_engine](https://docs.sqlalchemy.org/en/14/core/engines.html#sqlalchemy.create_engine) as kwargs. To set connection arguments in the URL, specify them under `connect_args`.",
                    "type": "object"
                },
                "profile_pattern": {
                    "title": "Profile Pattern",
                    "description": "Regex patterns to filter tables (or specific columns) for profiling during ingestion. Note that only tables allowed by the `table_pattern` will be considered.",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "allOf": [
                        {
                            "$ref": "#/definitions/AllowDenyPattern"
                        }
                    ]
                },
                "domain": {
                    "title": "Domain",
                    "description": "Attach domains to databases, schemas or tables during ingestion using regex patterns. Domain key can be a guid like *urn:li:domain:ec428203-ce86-4db3-985d-5a8ee6df32ba* or a string like \"Marketing\".) If you provide strings, then datahub will attempt to resolve this name to a guid, and will error out if this fails. There can be multiple domain keys specified.",
                    "default": {},
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/definitions/AllowDenyPattern"
                    }
                },
                "include_views": {
                    "title": "Include Views",
                    "description": "Whether views should be ingested.",
                    "default": true,
                    "type": "boolean"
                },
                "include_tables": {
                    "title": "Include Tables",
                    "description": "Whether tables should be ingested.",
                    "default": true,
                    "type": "boolean"
                },
                "include_table_location_lineage": {
                    "title": "Include Table Location Lineage",
                    "description": "If the source supports it, include table lineage to the underlying storage location.",
                    "default": true,
                    "type": "boolean"
                },
                "include_view_lineage": {
                    "title": "Include View Lineage",
                    "description": "Populates view->view and table->view lineage using DataHub's sql parser.",
                    "default": true,
                    "type": "boolean"
                },
                "include_view_column_lineage": {
                    "title": "Include View Column Lineage",
                    "description": "Populates column-level lineage for  view->view and table->view lineage using DataHub's sql parser. Requires `include_view_lineage` to be enabled.",
                    "default": true,
                    "type": "boolean"
                },
                "use_file_backed_cache": {
                    "title": "Use File Backed Cache",
                    "description": "Whether to use a file backed cache for the view definitions.",
                    "default": true,
                    "type": "boolean"
                },
                "profiling": {
                    "title": "Profiling",
                    "default": {
                        "enabled": false,
                        "operation_config": {
                            "lower_freq_profile_enabled": false,
                            "profile_day_of_week": null,
                            "profile_date_of_month": null
                        },
                        "limit": null,
                        "offset": null,
                        "profile_table_level_only": false,
                        "include_field_null_count": true,
                        "include_field_distinct_count": true,
                        "include_field_min_value": true,
                        "include_field_max_value": true,
                        "include_field_mean_value": true,
                        "include_field_median_value": true,
                        "include_field_stddev_value": true,
                        "include_field_quantiles": false,
                        "include_field_distinct_value_frequencies": false,
                        "include_field_histogram": false,
                        "include_field_sample_values": true,
                        "max_workers": 20,
                        "report_dropped_profiles": false,
                        "turn_off_expensive_profiling_metrics": false,
                        "field_sample_values_limit": 20,
                        "max_number_of_fields_to_profile": null,
                        "profile_if_updated_since_days": null,
                        "profile_table_size_limit": 5,
                        "profile_table_row_limit": 5000000,
                        "profile_table_row_count_estimate_only": false,
                        "query_combiner_enabled": true,
                        "catch_exceptions": true,
                        "partition_profiling_enabled": true,
                        "partition_datetime": null,
                        "use_sampling": true,
                        "sample_size": 10000,
                        "profile_external_tables": false,
                        "tags_to_ignore_sampling": null,
                        "profile_nested_fields": false
                    },
                    "allOf": [
                        {
                            "$ref": "#/definitions/GEProfilingConfig"
                        }
                    ]
                },
                "username": {
                    "title": "Username",
                    "description": "username",
                    "type": "string"
                },
                "password": {
                    "title": "Password",
                    "description": "password",
                    "type": "string",
                    "writeOnly": true,
                    "format": "password"
                },
                "host_port": {
                    "title": "Host Port",
                    "description": "host URL",
                    "type": "string"
                },
                "database": {
                    "title": "Database",
                    "description": "If using, omit `service_name`.",
                    "type": "string"
                },
                "scheme": {
                    "title": "Scheme",
                    "description": "Will be set automatically to default value.",
                    "default": "oracle",
                    "type": "string"
                },
                "sqlalchemy_uri": {
                    "title": "Sqlalchemy Uri",
                    "description": "URI of database to connect to. See https://docs.sqlalchemy.org/en/14/core/engines.html#database-urls. Takes precedence over other connection parameters.",
                    "type": "string"
                },
                "service_name": {
                    "title": "Service Name",
                    "description": "Oracle service name. If using, omit `database`.",
                    "type": "string"
                },
                "add_database_name_to_urn": {
                    "title": "Add Database Name To Urn",
                    "description": "Add oracle database name to urn, default urn is schema.table",
                    "default": false,
                    "type": "boolean"
                },
                "data_dictionary_mode": {
                    "title": "Data Dictionary Mode",
                    "description": "The data dictionary views mode, to extract information about schema objects ('ALL' and 'DBA' views are supported). (https://docs.oracle.com/cd/E11882_01/nav/catalog_views.htm)",
                    "default": "ALL",
                    "type": "string"
                }
            },
            "required": [
                "host_port"
            ],
            "additionalProperties": false
        },
        "sql-queries": {
            "type": "object",
            "properties": {
                "type": {
                    "type": "string",
                    "enum": [
                        "sql-queries"
                    ]
                },
                "config": {
                    "$ref": "#/definitions/sql-queries_config"
                }
            },
            "required": [
                "type",
                "config"
            ]
        },
        "sql-queries_config": {
            "title": "SqlQueriesSourceConfig",
            "description": "Any source that connects to a platform should inherit this class",
            "type": "object",
            "properties": {
                "env": {
                    "title": "Env",
                    "description": "The environment that all assets produced by this connector belong to",
                    "default": "PROD",
                    "type": "string"
                },
                "platform_instance": {
                    "title": "Platform Instance",
                    "description": "The instance of the platform that all assets produced by this recipe belong to. This should be unique within the platform. See https://datahubproject.io/docs/platform-instances/ for more details.",
                    "type": "string"
                },
                "query_file": {
                    "title": "Query File",
                    "description": "Path to file to ingest",
                    "type": "string"
                },
                "platform": {
                    "title": "Platform",
                    "description": "The platform for which to generate data, e.g. snowflake",
                    "type": "string"
                },
                "usage": {
                    "title": "Usage",
                    "description": "The usage config to use when generating usage statistics",
                    "default": {
                        "bucket_duration": "DAY",
                        "end_time": "2024-12-24T12:58:46.595372+00:00",
                        "start_time": "2024-12-23T00:00:00+00:00",
                        "queries_character_limit": 24000,
                        "top_n_queries": 10,
                        "user_email_pattern": {
                            "allow": [
                                ".*"
                            ],
                            "deny": [],
                            "ignoreCase": true
                        },
                        "include_operational_stats": true,
                        "include_read_operational_stats": false,
                        "format_sql_queries": false,
                        "include_top_n_queries": true
                    },
                    "allOf": [
                        {
                            "$ref": "#/definitions/BaseUsageConfig"
                        }
                    ]
                },
                "default_db": {
                    "title": "Default Db",
                    "description": "The default database to use for unqualified table names",
                    "type": "string"
                },
                "default_schema": {
                    "title": "Default Schema",
                    "description": "The default schema to use for unqualified table names",
                    "type": "string"
                },
                "default_dialect": {
                    "title": "Default Dialect",
                    "description": "The SQL dialect to use when parsing queries. Overrides automatic dialect detection.",
                    "type": "string"
                }
            },
            "required": [
                "query_file",
                "platform"
            ],
            "additionalProperties": false
        },
        "grafana": {
            "type": "object",
            "properties": {
                "type": {
                    "type": "string",
                    "enum": [
                        "grafana"
                    ]
                },
                "config": {
                    "$ref": "#/definitions/grafana_config"
                }
            },
            "required": [
                "type",
                "config"
            ]
        },
        "grafana_config": {
            "title": "GrafanaSourceConfig",
            "description": "Base configuration class for stateful ingestion for source configs to inherit from.",
            "type": "object",
            "properties": {
                "platform_instance": {
                    "title": "Platform Instance",
                    "description": "The instance of the platform that all assets produced by this recipe belong to. This should be unique within the platform. See https://datahubproject.io/docs/platform-instances/ for more details.",
                    "type": "string"
                },
                "stateful_ingestion": {
                    "title": "Stateful Ingestion",
                    "description": "Stateful Ingestion Config",
                    "allOf": [
                        {
                            "$ref": "#/definitions/StatefulIngestionConfig"
                        }
                    ]
                },
                "url": {
                    "title": "Url",
                    "description": "Grafana URL in the format http://your-grafana-instance with no trailing slash",
                    "default": "",
                    "type": "string"
                },
                "service_account_token": {
                    "title": "Service Account Token",
                    "description": "Service account token for Grafana",
                    "type": "string",
                    "writeOnly": true,
                    "format": "password"
                }
            },
            "required": [
                "service_account_token"
            ],
            "additionalProperties": false
        },
        "hana": {
            "type": "object",
            "properties": {
                "type": {
                    "type": "string",
                    "enum": [
                        "hana"
                    ]
                },
                "config": {
                    "$ref": "#/definitions/hana_config"
                }
            },
            "required": [
                "type",
                "config"
            ]
        },
        "hana_config": {
            "title": "HanaConfig",
            "description": "Base configuration class for stateful ingestion for source configs to inherit from.",
            "type": "object",
            "properties": {
                "schema_pattern": {
                    "title": "Schema Pattern",
                    "description": "Regex patterns for schemas to filter in ingestion. Specify regex to only match the schema name. e.g. to match all tables in schema analytics, use the regex 'analytics'",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "allOf": [
                        {
                            "$ref": "#/definitions/AllowDenyPattern"
                        }
                    ]
                },
                "table_pattern": {
                    "title": "Table Pattern",
                    "description": "Regex patterns for tables to filter in ingestion. Specify regex to match the entire table name in database.schema.table format. e.g. to match all tables starting with customer in Customer database and public schema, use the regex 'Customer.public.customer.*'",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "allOf": [
                        {
                            "$ref": "#/definitions/AllowDenyPattern"
                        }
                    ]
                },
                "view_pattern": {
                    "title": "View Pattern",
                    "description": "Regex patterns for views to filter in ingestion. Note: Defaults to table_pattern if not specified. Specify regex to match the entire view name in database.schema.view format. e.g. to match all views starting with customer in Customer database and public schema, use the regex 'Customer.public.customer.*'",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "allOf": [
                        {
                            "$ref": "#/definitions/AllowDenyPattern"
                        }
                    ]
                },
                "classification": {
                    "title": "Classification",
                    "description": "For details, refer to [Classification](../../../../metadata-ingestion/docs/dev_guides/classification.md).",
                    "default": {
                        "enabled": false,
                        "sample_size": 100,
                        "max_workers": 4,
                        "table_pattern": {
                            "allow": [
                                ".*"
                            ],
                            "deny": [],
                            "ignoreCase": true
                        },
                        "column_pattern": {
                            "allow": [
                                ".*"
                            ],
                            "deny": [],
                            "ignoreCase": true
                        },
                        "info_type_to_term": {},
                        "classifiers": [
                            {
                                "type": "datahub",
                                "config": null
                            }
                        ]
                    },
                    "allOf": [
                        {
                            "$ref": "#/definitions/ClassificationConfig"
                        }
                    ]
                },
                "incremental_lineage": {
                    "title": "Incremental Lineage",
                    "description": "When enabled, emits lineage as incremental to existing lineage already in DataHub. When disabled, re-states lineage on each run.",
                    "default": false,
                    "type": "boolean"
                },
                "convert_urns_to_lowercase": {
                    "title": "Convert Urns To Lowercase",
                    "description": "Whether to convert dataset urns to lowercase.",
                    "default": false,
                    "type": "boolean"
                },
                "env": {
                    "title": "Env",
                    "description": "The environment that all assets produced by this connector belong to",
                    "default": "PROD",
                    "type": "string"
                },
                "platform_instance": {
                    "title": "Platform Instance",
                    "description": "The instance of the platform that all assets produced by this recipe belong to. This should be unique within the platform. See https://datahubproject.io/docs/platform-instances/ for more details.",
                    "type": "string"
                },
                "stateful_ingestion": {
                    "$ref": "#/definitions/StatefulStaleMetadataRemovalConfig"
                },
                "options": {
                    "title": "Options",
                    "description": "Any options specified here will be passed to [SQLAlchemy.create_engine](https://docs.sqlalchemy.org/en/14/core/engines.html#sqlalchemy.create_engine) as kwargs. To set connection arguments in the URL, specify them under `connect_args`.",
                    "type": "object"
                },
                "profile_pattern": {
                    "title": "Profile Pattern",
                    "description": "Regex patterns to filter tables (or specific columns) for profiling during ingestion. Note that only tables allowed by the `table_pattern` will be considered.",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "allOf": [
                        {
                            "$ref": "#/definitions/AllowDenyPattern"
                        }
                    ]
                },
                "domain": {
                    "title": "Domain",
                    "description": "Attach domains to databases, schemas or tables during ingestion using regex patterns. Domain key can be a guid like *urn:li:domain:ec428203-ce86-4db3-985d-5a8ee6df32ba* or a string like \"Marketing\".) If you provide strings, then datahub will attempt to resolve this name to a guid, and will error out if this fails. There can be multiple domain keys specified.",
                    "default": {},
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/definitions/AllowDenyPattern"
                    }
                },
                "include_views": {
                    "title": "Include Views",
                    "description": "Whether views should be ingested.",
                    "default": true,
                    "type": "boolean"
                },
                "include_tables": {
                    "title": "Include Tables",
                    "description": "Whether tables should be ingested.",
                    "default": true,
                    "type": "boolean"
                },
                "include_table_location_lineage": {
                    "title": "Include Table Location Lineage",
                    "description": "If the source supports it, include table lineage to the underlying storage location.",
                    "default": true,
                    "type": "boolean"
                },
                "include_view_lineage": {
                    "title": "Include View Lineage",
                    "description": "Populates view->view and table->view lineage using DataHub's sql parser.",
                    "default": true,
                    "type": "boolean"
                },
                "include_view_column_lineage": {
                    "title": "Include View Column Lineage",
                    "description": "Populates column-level lineage for  view->view and table->view lineage using DataHub's sql parser. Requires `include_view_lineage` to be enabled.",
                    "default": true,
                    "type": "boolean"
                },
                "use_file_backed_cache": {
                    "title": "Use File Backed Cache",
                    "description": "Whether to use a file backed cache for the view definitions.",
                    "default": true,
                    "type": "boolean"
                },
                "profiling": {
                    "title": "Profiling",
                    "default": {
                        "enabled": false,
                        "operation_config": {
                            "lower_freq_profile_enabled": false,
                            "profile_day_of_week": null,
                            "profile_date_of_month": null
                        },
                        "limit": null,
                        "offset": null,
                        "profile_table_level_only": false,
                        "include_field_null_count": true,
                        "include_field_distinct_count": true,
                        "include_field_min_value": true,
                        "include_field_max_value": true,
                        "include_field_mean_value": true,
                        "include_field_median_value": true,
                        "include_field_stddev_value": true,
                        "include_field_quantiles": false,
                        "include_field_distinct_value_frequencies": false,
                        "include_field_histogram": false,
                        "include_field_sample_values": true,
                        "max_workers": 20,
                        "report_dropped_profiles": false,
                        "turn_off_expensive_profiling_metrics": false,
                        "field_sample_values_limit": 20,
                        "max_number_of_fields_to_profile": null,
                        "profile_if_updated_since_days": null,
                        "profile_table_size_limit": 5,
                        "profile_table_row_limit": 5000000,
                        "profile_table_row_count_estimate_only": false,
                        "query_combiner_enabled": true,
                        "catch_exceptions": true,
                        "partition_profiling_enabled": true,
                        "partition_datetime": null,
                        "use_sampling": true,
                        "sample_size": 10000,
                        "profile_external_tables": false,
                        "tags_to_ignore_sampling": null,
                        "profile_nested_fields": false
                    },
                    "allOf": [
                        {
                            "$ref": "#/definitions/GEProfilingConfig"
                        }
                    ]
                },
                "username": {
                    "title": "Username",
                    "description": "username",
                    "type": "string"
                },
                "password": {
                    "title": "Password",
                    "description": "password",
                    "type": "string",
                    "writeOnly": true,
                    "format": "password"
                },
                "host_port": {
                    "title": "Host Port",
                    "default": "localhost:39041",
                    "type": "string"
                },
                "database": {
                    "title": "Database",
                    "description": "database (catalog)",
                    "type": "string"
                },
                "scheme": {
                    "title": "Scheme",
                    "default": "hana+hdbcli",
                    "type": "string"
                },
                "sqlalchemy_uri": {
                    "title": "Sqlalchemy Uri",
                    "description": "URI of database to connect to. See https://docs.sqlalchemy.org/en/14/core/engines.html#database-urls. Takes precedence over other connection parameters.",
                    "type": "string"
                }
            },
            "additionalProperties": false
        },
        "sqlalchemy": {
            "type": "object",
            "properties": {
                "type": {
                    "type": "string",
                    "enum": [
                        "sqlalchemy"
                    ]
                },
                "config": {
                    "$ref": "#/definitions/sqlalchemy_config"
                }
            },
            "required": [
                "type",
                "config"
            ]
        },
        "sqlalchemy_config": {
            "title": "SQLAlchemyGenericConfig",
            "description": "Base configuration class for stateful ingestion for source configs to inherit from.",
            "type": "object",
            "properties": {
                "schema_pattern": {
                    "title": "Schema Pattern",
                    "description": "Regex patterns for schemas to filter in ingestion. Specify regex to only match the schema name. e.g. to match all tables in schema analytics, use the regex 'analytics'",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "allOf": [
                        {
                            "$ref": "#/definitions/AllowDenyPattern"
                        }
                    ]
                },
                "table_pattern": {
                    "title": "Table Pattern",
                    "description": "Regex patterns for tables to filter in ingestion. Specify regex to match the entire table name in database.schema.table format. e.g. to match all tables starting with customer in Customer database and public schema, use the regex 'Customer.public.customer.*'",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "allOf": [
                        {
                            "$ref": "#/definitions/AllowDenyPattern"
                        }
                    ]
                },
                "view_pattern": {
                    "title": "View Pattern",
                    "description": "Regex patterns for views to filter in ingestion. Note: Defaults to table_pattern if not specified. Specify regex to match the entire view name in database.schema.view format. e.g. to match all views starting with customer in Customer database and public schema, use the regex 'Customer.public.customer.*'",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "allOf": [
                        {
                            "$ref": "#/definitions/AllowDenyPattern"
                        }
                    ]
                },
                "classification": {
                    "title": "Classification",
                    "description": "For details, refer to [Classification](../../../../metadata-ingestion/docs/dev_guides/classification.md).",
                    "default": {
                        "enabled": false,
                        "sample_size": 100,
                        "max_workers": 4,
                        "table_pattern": {
                            "allow": [
                                ".*"
                            ],
                            "deny": [],
                            "ignoreCase": true
                        },
                        "column_pattern": {
                            "allow": [
                                ".*"
                            ],
                            "deny": [],
                            "ignoreCase": true
                        },
                        "info_type_to_term": {},
                        "classifiers": [
                            {
                                "type": "datahub",
                                "config": null
                            }
                        ]
                    },
                    "allOf": [
                        {
                            "$ref": "#/definitions/ClassificationConfig"
                        }
                    ]
                },
                "incremental_lineage": {
                    "title": "Incremental Lineage",
                    "description": "When enabled, emits lineage as incremental to existing lineage already in DataHub. When disabled, re-states lineage on each run.",
                    "default": false,
                    "type": "boolean"
                },
                "convert_urns_to_lowercase": {
                    "title": "Convert Urns To Lowercase",
                    "description": "Whether to convert dataset urns to lowercase.",
                    "default": false,
                    "type": "boolean"
                },
                "env": {
                    "title": "Env",
                    "description": "The environment that all assets produced by this connector belong to",
                    "default": "PROD",
                    "type": "string"
                },
                "platform_instance": {
                    "title": "Platform Instance",
                    "description": "The instance of the platform that all assets produced by this recipe belong to. This should be unique within the platform. See https://datahubproject.io/docs/platform-instances/ for more details.",
                    "type": "string"
                },
                "stateful_ingestion": {
                    "$ref": "#/definitions/StatefulStaleMetadataRemovalConfig"
                },
                "options": {
                    "title": "Options",
                    "description": "Any options specified here will be passed to [SQLAlchemy.create_engine](https://docs.sqlalchemy.org/en/14/core/engines.html#sqlalchemy.create_engine) as kwargs.",
                    "type": "object"
                },
                "profile_pattern": {
                    "title": "Profile Pattern",
                    "description": "Regex patterns to filter tables (or specific columns) for profiling during ingestion. Note that only tables allowed by the `table_pattern` will be considered.",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "allOf": [
                        {
                            "$ref": "#/definitions/AllowDenyPattern"
                        }
                    ]
                },
                "domain": {
                    "title": "Domain",
                    "description": "Attach domains to databases, schemas or tables during ingestion using regex patterns. Domain key can be a guid like *urn:li:domain:ec428203-ce86-4db3-985d-5a8ee6df32ba* or a string like \"Marketing\".) If you provide strings, then datahub will attempt to resolve this name to a guid, and will error out if this fails. There can be multiple domain keys specified.",
                    "default": {},
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/definitions/AllowDenyPattern"
                    }
                },
                "include_views": {
                    "title": "Include Views",
                    "description": "Whether views should be ingested.",
                    "default": true,
                    "type": "boolean"
                },
                "include_tables": {
                    "title": "Include Tables",
                    "description": "Whether tables should be ingested.",
                    "default": true,
                    "type": "boolean"
                },
                "include_table_location_lineage": {
                    "title": "Include Table Location Lineage",
                    "description": "If the source supports it, include table lineage to the underlying storage location.",
                    "default": true,
                    "type": "boolean"
                },
                "include_view_lineage": {
                    "title": "Include View Lineage",
                    "description": "Populates view->view and table->view lineage using DataHub's sql parser.",
                    "default": true,
                    "type": "boolean"
                },
                "include_view_column_lineage": {
                    "title": "Include View Column Lineage",
                    "description": "Populates column-level lineage for  view->view and table->view lineage using DataHub's sql parser. Requires `include_view_lineage` to be enabled.",
                    "default": true,
                    "type": "boolean"
                },
                "use_file_backed_cache": {
                    "title": "Use File Backed Cache",
                    "description": "Whether to use a file backed cache for the view definitions.",
                    "default": true,
                    "type": "boolean"
                },
                "profiling": {
                    "title": "Profiling",
                    "default": {
                        "enabled": false,
                        "operation_config": {
                            "lower_freq_profile_enabled": false,
                            "profile_day_of_week": null,
                            "profile_date_of_month": null
                        },
                        "limit": null,
                        "offset": null,
                        "profile_table_level_only": false,
                        "include_field_null_count": true,
                        "include_field_distinct_count": true,
                        "include_field_min_value": true,
                        "include_field_max_value": true,
                        "include_field_mean_value": true,
                        "include_field_median_value": true,
                        "include_field_stddev_value": true,
                        "include_field_quantiles": false,
                        "include_field_distinct_value_frequencies": false,
                        "include_field_histogram": false,
                        "include_field_sample_values": true,
                        "max_workers": 20,
                        "report_dropped_profiles": false,
                        "turn_off_expensive_profiling_metrics": false,
                        "field_sample_values_limit": 20,
                        "max_number_of_fields_to_profile": null,
                        "profile_if_updated_since_days": null,
                        "profile_table_size_limit": 5,
                        "profile_table_row_limit": 5000000,
                        "profile_table_row_count_estimate_only": false,
                        "query_combiner_enabled": true,
                        "catch_exceptions": true,
                        "partition_profiling_enabled": true,
                        "partition_datetime": null,
                        "use_sampling": true,
                        "sample_size": 10000,
                        "profile_external_tables": false,
                        "tags_to_ignore_sampling": null,
                        "profile_nested_fields": false
                    },
                    "allOf": [
                        {
                            "$ref": "#/definitions/GEProfilingConfig"
                        }
                    ]
                },
                "platform": {
                    "title": "Platform",
                    "description": "Name of platform being ingested, used in constructing URNs.",
                    "type": "string"
                },
                "connect_uri": {
                    "title": "Connect Uri",
                    "description": "URI of database to connect to. See https://docs.sqlalchemy.org/en/14/core/engines.html#database-urls",
                    "type": "string"
                }
            },
            "required": [
                "platform",
                "connect_uri"
            ],
            "additionalProperties": false
        },
        "presto": {
            "type": "object",
            "properties": {
                "type": {
                    "type": "string",
                    "enum": [
                        "presto"
                    ]
                },
                "config": {
                    "$ref": "#/definitions/presto_config"
                }
            },
            "required": [
                "type",
                "config"
            ]
        },
        "presto_config": {
            "title": "PrestoConfig",
            "description": "Base configuration class for stateful ingestion for source configs to inherit from.",
            "type": "object",
            "properties": {
                "schema_pattern": {
                    "title": "Schema Pattern",
                    "description": "Regex patterns for schemas to filter in ingestion. Specify regex to only match the schema name. e.g. to match all tables in schema analytics, use the regex 'analytics'",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "allOf": [
                        {
                            "$ref": "#/definitions/AllowDenyPattern"
                        }
                    ]
                },
                "table_pattern": {
                    "title": "Table Pattern",
                    "description": "Regex patterns for tables to filter in ingestion. Specify regex to match the entire table name in database.schema.table format. e.g. to match all tables starting with customer in Customer database and public schema, use the regex 'Customer.public.customer.*'",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "allOf": [
                        {
                            "$ref": "#/definitions/AllowDenyPattern"
                        }
                    ]
                },
                "view_pattern": {
                    "title": "View Pattern",
                    "description": "Regex patterns for views to filter in ingestion. Note: Defaults to table_pattern if not specified. Specify regex to match the entire view name in database.schema.view format. e.g. to match all views starting with customer in Customer database and public schema, use the regex 'Customer.public.customer.*'",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "allOf": [
                        {
                            "$ref": "#/definitions/AllowDenyPattern"
                        }
                    ]
                },
                "classification": {
                    "title": "Classification",
                    "description": "For details, refer to [Classification](../../../../metadata-ingestion/docs/dev_guides/classification.md).",
                    "default": {
                        "enabled": false,
                        "sample_size": 100,
                        "max_workers": 4,
                        "table_pattern": {
                            "allow": [
                                ".*"
                            ],
                            "deny": [],
                            "ignoreCase": true
                        },
                        "column_pattern": {
                            "allow": [
                                ".*"
                            ],
                            "deny": [],
                            "ignoreCase": true
                        },
                        "info_type_to_term": {},
                        "classifiers": [
                            {
                                "type": "datahub",
                                "config": null
                            }
                        ]
                    },
                    "allOf": [
                        {
                            "$ref": "#/definitions/ClassificationConfig"
                        }
                    ]
                },
                "incremental_lineage": {
                    "title": "Incremental Lineage",
                    "description": "When enabled, emits lineage as incremental to existing lineage already in DataHub. When disabled, re-states lineage on each run.",
                    "default": false,
                    "type": "boolean"
                },
                "convert_urns_to_lowercase": {
                    "title": "Convert Urns To Lowercase",
                    "description": "Whether to convert dataset urns to lowercase.",
                    "default": false,
                    "type": "boolean"
                },
                "env": {
                    "title": "Env",
                    "description": "The environment that all assets produced by this connector belong to",
                    "default": "PROD",
                    "type": "string"
                },
                "platform_instance": {
                    "title": "Platform Instance",
                    "description": "The instance of the platform that all assets produced by this recipe belong to. This should be unique within the platform. See https://datahubproject.io/docs/platform-instances/ for more details.",
                    "type": "string"
                },
                "stateful_ingestion": {
                    "$ref": "#/definitions/StatefulStaleMetadataRemovalConfig"
                },
                "options": {
                    "title": "Options",
                    "description": "Any options specified here will be passed to [SQLAlchemy.create_engine](https://docs.sqlalchemy.org/en/14/core/engines.html#sqlalchemy.create_engine) as kwargs. To set connection arguments in the URL, specify them under `connect_args`.",
                    "type": "object"
                },
                "profile_pattern": {
                    "title": "Profile Pattern",
                    "description": "Regex patterns to filter tables (or specific columns) for profiling during ingestion. Note that only tables allowed by the `table_pattern` will be considered.",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "allOf": [
                        {
                            "$ref": "#/definitions/AllowDenyPattern"
                        }
                    ]
                },
                "domain": {
                    "title": "Domain",
                    "description": "Attach domains to databases, schemas or tables during ingestion using regex patterns. Domain key can be a guid like *urn:li:domain:ec428203-ce86-4db3-985d-5a8ee6df32ba* or a string like \"Marketing\".) If you provide strings, then datahub will attempt to resolve this name to a guid, and will error out if this fails. There can be multiple domain keys specified.",
                    "default": {},
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/definitions/AllowDenyPattern"
                    }
                },
                "include_views": {
                    "title": "Include Views",
                    "description": "Whether views should be ingested.",
                    "default": true,
                    "type": "boolean"
                },
                "include_tables": {
                    "title": "Include Tables",
                    "description": "Whether tables should be ingested.",
                    "default": true,
                    "type": "boolean"
                },
                "include_table_location_lineage": {
                    "title": "Include Table Location Lineage",
                    "description": "If the source supports it, include table lineage to the underlying storage location.",
                    "default": true,
                    "type": "boolean"
                },
                "include_view_lineage": {
                    "title": "Include View Lineage",
                    "description": "Populates view->view and table->view lineage using DataHub's sql parser.",
                    "default": true,
                    "type": "boolean"
                },
                "include_view_column_lineage": {
                    "title": "Include View Column Lineage",
                    "description": "Populates column-level lineage for  view->view and table->view lineage using DataHub's sql parser. Requires `include_view_lineage` to be enabled.",
                    "default": true,
                    "type": "boolean"
                },
                "use_file_backed_cache": {
                    "title": "Use File Backed Cache",
                    "description": "Whether to use a file backed cache for the view definitions.",
                    "default": true,
                    "type": "boolean"
                },
                "profiling": {
                    "title": "Profiling",
                    "default": {
                        "enabled": false,
                        "operation_config": {
                            "lower_freq_profile_enabled": false,
                            "profile_day_of_week": null,
                            "profile_date_of_month": null
                        },
                        "limit": null,
                        "offset": null,
                        "profile_table_level_only": false,
                        "include_field_null_count": true,
                        "include_field_distinct_count": true,
                        "include_field_min_value": true,
                        "include_field_max_value": true,
                        "include_field_mean_value": true,
                        "include_field_median_value": true,
                        "include_field_stddev_value": true,
                        "include_field_quantiles": false,
                        "include_field_distinct_value_frequencies": false,
                        "include_field_histogram": false,
                        "include_field_sample_values": true,
                        "max_workers": 20,
                        "report_dropped_profiles": false,
                        "turn_off_expensive_profiling_metrics": false,
                        "field_sample_values_limit": 20,
                        "max_number_of_fields_to_profile": null,
                        "profile_if_updated_since_days": null,
                        "profile_table_size_limit": 5,
                        "profile_table_row_limit": 5000000,
                        "profile_table_row_count_estimate_only": false,
                        "query_combiner_enabled": true,
                        "catch_exceptions": true,
                        "partition_profiling_enabled": true,
                        "partition_datetime": null,
                        "use_sampling": true,
                        "sample_size": 10000,
                        "profile_external_tables": false,
                        "tags_to_ignore_sampling": null,
                        "profile_nested_fields": false
                    },
                    "allOf": [
                        {
                            "$ref": "#/definitions/GEProfilingConfig"
                        }
                    ]
                },
                "username": {
                    "title": "Username",
                    "description": "username",
                    "type": "string"
                },
                "password": {
                    "title": "Password",
                    "description": "password",
                    "type": "string",
                    "writeOnly": true,
                    "format": "password"
                },
                "host_port": {
                    "title": "Host Port",
                    "description": "host URL",
                    "type": "string"
                },
                "database": {
                    "title": "Database",
                    "description": "database (catalog)",
                    "type": "string"
                },
                "sqlalchemy_uri": {
                    "title": "Sqlalchemy Uri",
                    "description": "URI of database to connect to. See https://docs.sqlalchemy.org/en/14/core/engines.html#database-urls. Takes precedence over other connection parameters.",
                    "type": "string"
                },
                "catalog_to_connector_details": {
                    "title": "Catalog To Connector Details",
                    "description": "A mapping of trino catalog to its connector details like connector database, env and platform instance.This configuration is used to build lineage to the underlying connector. Use catalog name as key.",
                    "default": {},
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/definitions/ConnectorDetail"
                    }
                },
                "ingest_lineage_to_connectors": {
                    "title": "Ingest Lineage To Connectors",
                    "description": "Whether lineage of datasets to connectors should be ingested",
                    "default": true,
                    "type": "boolean"
                },
                "trino_as_primary": {
                    "title": "Trino As Primary",
                    "description": "Experimental feature. Whether trino dataset should be primary entity of the set of siblings",
                    "default": true,
                    "type": "boolean"
                }
            },
            "required": [
                "host_port",
                "database"
            ],
            "additionalProperties": false
        },
        "iceberg": {
            "type": "object",
            "properties": {
                "type": {
                    "type": "string",
                    "enum": [
                        "iceberg"
                    ]
                },
                "config": {
                    "$ref": "#/definitions/iceberg_config"
                }
            },
            "required": [
                "type",
                "config"
            ]
        },
        "iceberg_config": {
            "title": "IcebergSourceConfig",
            "description": "Base configuration class for stateful ingestion for source configs to inherit from.",
            "type": "object",
            "properties": {
                "env": {
                    "title": "Env",
                    "description": "The environment that all assets produced by this connector belong to",
                    "default": "PROD",
                    "type": "string"
                },
                "platform_instance": {
                    "title": "Platform Instance",
                    "description": "The instance of the platform that all assets produced by this recipe belong to. This should be unique within the platform. See https://datahubproject.io/docs/platform-instances/ for more details.",
                    "type": "string"
                },
                "stateful_ingestion": {
                    "title": "Stateful Ingestion",
                    "description": "Iceberg Stateful Ingestion Config.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/StatefulStaleMetadataRemovalConfig"
                        }
                    ]
                },
                "catalog": {
                    "title": "Catalog",
                    "description": "Catalog configuration where to find Iceberg tables.  Only one catalog specification is supported.  The format is the same as [pyiceberg's catalog configuration](https://py.iceberg.apache.org/configuration/), where the catalog name is specified as the object name and attributes are set as key-value pairs.",
                    "type": "object",
                    "additionalProperties": {
                        "type": "object"
                    }
                },
                "table_pattern": {
                    "title": "Table Pattern",
                    "description": "Regex patterns for tables to filter in ingestion.",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "allOf": [
                        {
                            "$ref": "#/definitions/AllowDenyPattern"
                        }
                    ]
                },
                "namespace_pattern": {
                    "title": "Namespace Pattern",
                    "description": "Regex patterns for namespaces to filter in ingestion.",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "allOf": [
                        {
                            "$ref": "#/definitions/AllowDenyPattern"
                        }
                    ]
                },
                "user_ownership_property": {
                    "title": "User Ownership Property",
                    "description": "Iceberg table property to look for a `CorpUser` owner.  Can only hold a single user value.  If property has no value, no owner information will be emitted.",
                    "default": "owner",
                    "type": "string"
                },
                "group_ownership_property": {
                    "title": "Group Ownership Property",
                    "description": "Iceberg table property to look for a `CorpGroup` owner.  Can only hold a single group value.  If property has no value, no owner information will be emitted.",
                    "type": "string"
                },
                "profiling": {
                    "title": "Profiling",
                    "default": {
                        "enabled": false,
                        "include_field_null_count": true,
                        "include_field_min_value": true,
                        "include_field_max_value": true,
                        "operation_config": {
                            "lower_freq_profile_enabled": false,
                            "profile_day_of_week": null,
                            "profile_date_of_month": null
                        }
                    },
                    "allOf": [
                        {
                            "$ref": "#/definitions/IcebergProfilingConfig"
                        }
                    ]
                },
                "processing_threads": {
                    "title": "Processing Threads",
                    "description": "How many threads will be processing tables",
                    "default": 1,
                    "type": "integer"
                }
            },
            "required": [
                "catalog"
            ],
            "additionalProperties": false
        },
        "vertica": {
            "type": "object",
            "properties": {
                "type": {
                    "type": "string",
                    "enum": [
                        "vertica"
                    ]
                },
                "config": {
                    "$ref": "#/definitions/vertica_config"
                }
            },
            "required": [
                "type",
                "config"
            ]
        },
        "vertica_config": {
            "title": "VerticaConfig",
            "description": "Base configuration class for stateful ingestion for source configs to inherit from.",
            "type": "object",
            "properties": {
                "schema_pattern": {
                    "title": "Schema Pattern",
                    "description": "Regex patterns for schemas to filter in ingestion. Specify regex to only match the schema name. e.g. to match all tables in schema analytics, use the regex 'analytics'",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "allOf": [
                        {
                            "$ref": "#/definitions/AllowDenyPattern"
                        }
                    ]
                },
                "table_pattern": {
                    "title": "Table Pattern",
                    "description": "Regex patterns for tables to filter in ingestion. Specify regex to match the entire table name in database.schema.table format. e.g. to match all tables starting with customer in Customer database and public schema, use the regex 'Customer.public.customer.*'",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "allOf": [
                        {
                            "$ref": "#/definitions/AllowDenyPattern"
                        }
                    ]
                },
                "view_pattern": {
                    "title": "View Pattern",
                    "description": "Regex patterns for views to filter in ingestion. Note: Defaults to table_pattern if not specified. Specify regex to match the entire view name in database.schema.view format. e.g. to match all views starting with customer in Customer database and public schema, use the regex 'Customer.public.customer.*'",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "allOf": [
                        {
                            "$ref": "#/definitions/AllowDenyPattern"
                        }
                    ]
                },
                "classification": {
                    "title": "Classification",
                    "description": "For details, refer to [Classification](../../../../metadata-ingestion/docs/dev_guides/classification.md).",
                    "default": {
                        "enabled": false,
                        "sample_size": 100,
                        "max_workers": 4,
                        "table_pattern": {
                            "allow": [
                                ".*"
                            ],
                            "deny": [],
                            "ignoreCase": true
                        },
                        "column_pattern": {
                            "allow": [
                                ".*"
                            ],
                            "deny": [],
                            "ignoreCase": true
                        },
                        "info_type_to_term": {},
                        "classifiers": [
                            {
                                "type": "datahub",
                                "config": null
                            }
                        ]
                    },
                    "allOf": [
                        {
                            "$ref": "#/definitions/ClassificationConfig"
                        }
                    ]
                },
                "incremental_lineage": {
                    "title": "Incremental Lineage",
                    "description": "When enabled, emits lineage as incremental to existing lineage already in DataHub. When disabled, re-states lineage on each run.",
                    "default": false,
                    "type": "boolean"
                },
                "convert_urns_to_lowercase": {
                    "title": "Convert Urns To Lowercase",
                    "description": "Whether to convert dataset urns to lowercase.",
                    "default": false,
                    "type": "boolean"
                },
                "env": {
                    "title": "Env",
                    "description": "The environment that all assets produced by this connector belong to",
                    "default": "PROD",
                    "type": "string"
                },
                "platform_instance": {
                    "title": "Platform Instance",
                    "description": "The instance of the platform that all assets produced by this recipe belong to. This should be unique within the platform. See https://datahubproject.io/docs/platform-instances/ for more details.",
                    "type": "string"
                },
                "stateful_ingestion": {
                    "$ref": "#/definitions/StatefulStaleMetadataRemovalConfig"
                },
                "options": {
                    "title": "Options",
                    "description": "Any options specified here will be passed to [SQLAlchemy.create_engine](https://docs.sqlalchemy.org/en/14/core/engines.html#sqlalchemy.create_engine) as kwargs. To set connection arguments in the URL, specify them under `connect_args`.",
                    "type": "object"
                },
                "profile_pattern": {
                    "title": "Profile Pattern",
                    "description": "Regex patterns to filter tables (or specific columns) for profiling during ingestion. Note that only tables allowed by the `table_pattern` will be considered.",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "allOf": [
                        {
                            "$ref": "#/definitions/AllowDenyPattern"
                        }
                    ]
                },
                "domain": {
                    "title": "Domain",
                    "description": "Attach domains to databases, schemas or tables during ingestion using regex patterns. Domain key can be a guid like *urn:li:domain:ec428203-ce86-4db3-985d-5a8ee6df32ba* or a string like \"Marketing\".) If you provide strings, then datahub will attempt to resolve this name to a guid, and will error out if this fails. There can be multiple domain keys specified.",
                    "default": {},
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/definitions/AllowDenyPattern"
                    }
                },
                "include_views": {
                    "title": "Include Views",
                    "description": "Whether views should be ingested.",
                    "default": true,
                    "type": "boolean"
                },
                "include_tables": {
                    "title": "Include Tables",
                    "description": "Whether tables should be ingested.",
                    "default": true,
                    "type": "boolean"
                },
                "include_table_location_lineage": {
                    "title": "Include Table Location Lineage",
                    "description": "If the source supports it, include table lineage to the underlying storage location.",
                    "default": true,
                    "type": "boolean"
                },
                "include_view_lineage": {
                    "title": "Include View Lineage",
                    "description": "If the source supports it, include view lineage to the underlying storage location.",
                    "default": true,
                    "type": "boolean"
                },
                "include_view_column_lineage": {
                    "title": "Include View Column Lineage",
                    "description": "Populates column-level lineage for  view->view and table->view lineage using DataHub's sql parser. Requires `include_view_lineage` to be enabled.",
                    "default": true,
                    "type": "boolean"
                },
                "use_file_backed_cache": {
                    "title": "Use File Backed Cache",
                    "description": "Whether to use a file backed cache for the view definitions.",
                    "default": true,
                    "type": "boolean"
                },
                "profiling": {
                    "title": "Profiling",
                    "default": {
                        "enabled": false,
                        "operation_config": {
                            "lower_freq_profile_enabled": false,
                            "profile_day_of_week": null,
                            "profile_date_of_month": null
                        },
                        "limit": null,
                        "offset": null,
                        "profile_table_level_only": false,
                        "include_field_null_count": true,
                        "include_field_distinct_count": true,
                        "include_field_min_value": true,
                        "include_field_max_value": true,
                        "include_field_mean_value": true,
                        "include_field_median_value": true,
                        "include_field_stddev_value": true,
                        "include_field_quantiles": false,
                        "include_field_distinct_value_frequencies": false,
                        "include_field_histogram": false,
                        "include_field_sample_values": true,
                        "max_workers": 20,
                        "report_dropped_profiles": false,
                        "turn_off_expensive_profiling_metrics": false,
                        "field_sample_values_limit": 20,
                        "max_number_of_fields_to_profile": null,
                        "profile_if_updated_since_days": null,
                        "profile_table_size_limit": 5,
                        "profile_table_row_limit": 5000000,
                        "profile_table_row_count_estimate_only": false,
                        "query_combiner_enabled": true,
                        "catch_exceptions": true,
                        "partition_profiling_enabled": true,
                        "partition_datetime": null,
                        "use_sampling": true,
                        "sample_size": 10000,
                        "profile_external_tables": false,
                        "tags_to_ignore_sampling": null,
                        "profile_nested_fields": false
                    },
                    "allOf": [
                        {
                            "$ref": "#/definitions/GEProfilingConfig"
                        }
                    ]
                },
                "username": {
                    "title": "Username",
                    "description": "username",
                    "type": "string"
                },
                "password": {
                    "title": "Password",
                    "description": "password",
                    "type": "string",
                    "writeOnly": true,
                    "format": "password"
                },
                "host_port": {
                    "title": "Host Port",
                    "description": "host URL",
                    "type": "string"
                },
                "database": {
                    "title": "Database",
                    "description": "database (catalog)",
                    "type": "string"
                },
                "scheme": {
                    "title": "Scheme",
                    "default": "vertica+vertica_python",
                    "type": "string"
                },
                "sqlalchemy_uri": {
                    "title": "Sqlalchemy Uri",
                    "description": "URI of database to connect to. See https://docs.sqlalchemy.org/en/14/core/engines.html#database-urls. Takes precedence over other connection parameters.",
                    "type": "string"
                },
                "models_pattern": {
                    "title": "Models Pattern",
                    "description": "Regex patterns for ml models to filter in ingestion. ",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "allOf": [
                        {
                            "$ref": "#/definitions/AllowDenyPattern"
                        }
                    ]
                },
                "include_projections": {
                    "title": "Include Projections",
                    "description": "Whether projections should be ingested.",
                    "default": true,
                    "type": "boolean"
                },
                "include_models": {
                    "title": "Include Models",
                    "description": "Whether Models should be ingested.",
                    "default": true,
                    "type": "boolean"
                },
                "include_projection_lineage": {
                    "title": "Include Projection Lineage",
                    "description": "If the source supports it, include view lineage to the underlying storage location.",
                    "default": true,
                    "type": "boolean"
                }
            },
            "required": [
                "host_port"
            ],
            "additionalProperties": false
        },
        "snowflake": {
            "type": "object",
            "properties": {
                "type": {
                    "type": "string",
                    "enum": [
                        "snowflake"
                    ]
                },
                "config": {
                    "$ref": "#/definitions/snowflake_config"
                }
            },
            "required": [
                "type",
                "config"
            ]
        },
        "snowflake_config": {
            "title": "SnowflakeV2Config",
            "description": "Base configuration class for stateful ingestion for source configs to inherit from.",
            "type": "object",
            "properties": {
                "incremental_properties": {
                    "title": "Incremental Properties",
                    "description": "When enabled, emits dataset properties as incremental to existing dataset properties in DataHub. When disabled, re-states dataset properties on each run.",
                    "default": false,
                    "type": "boolean"
                },
                "classification": {
                    "title": "Classification",
                    "description": "For details, refer to [Classification](../../../../metadata-ingestion/docs/dev_guides/classification.md).",
                    "default": {
                        "enabled": false,
                        "sample_size": 100,
                        "max_workers": 4,
                        "table_pattern": {
                            "allow": [
                                ".*"
                            ],
                            "deny": [],
                            "ignoreCase": true
                        },
                        "column_pattern": {
                            "allow": [
                                ".*"
                            ],
                            "deny": [],
                            "ignoreCase": true
                        },
                        "info_type_to_term": {},
                        "classifiers": [
                            {
                                "type": "datahub",
                                "config": null
                            }
                        ]
                    },
                    "allOf": [
                        {
                            "$ref": "#/definitions/ClassificationConfig"
                        }
                    ]
                },
                "enable_stateful_profiling": {
                    "title": "Enable Stateful Profiling",
                    "description": "Enable stateful profiling. This will store profiling timestamps per dataset after successful profiling. and will not run profiling again in subsequent run if table has not been updated. ",
                    "default": true,
                    "type": "boolean"
                },
                "bucket_duration": {
                    "description": "Size of the time window to aggregate usage stats.",
                    "default": "DAY",
                    "allOf": [
                        {
                            "$ref": "#/definitions/BucketDuration"
                        }
                    ]
                },
                "end_time": {
                    "title": "End Time",
                    "description": "Latest date of lineage/usage to consider. Default: Current time in UTC",
                    "type": "string",
                    "format": "date-time"
                },
                "start_time": {
                    "title": "Start Time",
                    "description": "Earliest date of lineage/usage to consider. Default: Last full day in UTC (or hour, depending on `bucket_duration`). You can also specify relative time with respect to end_time such as '-7 days' Or '-7d'.",
                    "type": "string",
                    "format": "date-time"
                },
                "enable_stateful_usage_ingestion": {
                    "title": "Enable Stateful Usage Ingestion",
                    "description": "Enable stateful lineage ingestion. This will store usage window timestamps after successful usage ingestion. and will not run usage ingestion for same timestamps in subsequent run. ",
                    "default": true,
                    "type": "boolean"
                },
                "enable_stateful_lineage_ingestion": {
                    "title": "Enable Stateful Lineage Ingestion",
                    "description": "Enable stateful lineage ingestion. This will store lineage window timestamps after successful lineage ingestion. and will not run lineage ingestion for same timestamps in subsequent run. ",
                    "default": true,
                    "type": "boolean"
                },
                "top_n_queries": {
                    "title": "Top N Queries",
                    "description": "Number of top queries to save to each table.",
                    "default": 10,
                    "exclusiveMinimum": 0,
                    "type": "integer"
                },
                "user_email_pattern": {
                    "title": "User Email Pattern",
                    "description": "regex patterns for user emails to filter in usage.",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "allOf": [
                        {
                            "$ref": "#/definitions/AllowDenyPattern"
                        }
                    ]
                },
                "include_operational_stats": {
                    "title": "Include Operational Stats",
                    "description": "Whether to display operational stats.",
                    "default": true,
                    "type": "boolean"
                },
                "include_read_operational_stats": {
                    "title": "Include Read Operational Stats",
                    "description": "Whether to report read operational stats. Experimental.",
                    "default": false,
                    "type": "boolean"
                },
                "format_sql_queries": {
                    "title": "Format Sql Queries",
                    "description": "Whether to format sql queries",
                    "default": false,
                    "type": "boolean"
                },
                "include_top_n_queries": {
                    "title": "Include Top N Queries",
                    "description": "Whether to ingest the top_n_queries.",
                    "default": true,
                    "type": "boolean"
                },
                "email_domain": {
                    "title": "Email Domain",
                    "description": "Email domain of your organization so users can be displayed on UI appropriately.",
                    "type": "string"
                },
                "apply_view_usage_to_tables": {
                    "title": "Apply View Usage To Tables",
                    "description": "Whether to apply view's usage to its base tables. If set to True, usage is applied to base tables only.",
                    "default": false,
                    "type": "boolean"
                },
                "schema_pattern": {
                    "title": "Schema Pattern",
                    "description": "Regex patterns for schemas to filter in ingestion. Will match against the full `database.schema` name if `match_fully_qualified_names` is enabled.",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "allOf": [
                        {
                            "$ref": "#/definitions/AllowDenyPattern"
                        }
                    ]
                },
                "table_pattern": {
                    "title": "Table Pattern",
                    "description": "Regex patterns for tables to filter in ingestion. Specify regex to match the entire table name in database.schema.table format. e.g. to match all tables starting with customer in Customer database and public schema, use the regex 'Customer.public.customer.*'",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "allOf": [
                        {
                            "$ref": "#/definitions/AllowDenyPattern"
                        }
                    ]
                },
                "view_pattern": {
                    "title": "View Pattern",
                    "description": "Regex patterns for views to filter in ingestion. Note: Defaults to table_pattern if not specified. Specify regex to match the entire view name in database.schema.view format. e.g. to match all views starting with customer in Customer database and public schema, use the regex 'Customer.public.customer.*'",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "allOf": [
                        {
                            "$ref": "#/definitions/AllowDenyPattern"
                        }
                    ]
                },
                "incremental_lineage": {
                    "title": "Incremental Lineage",
                    "description": "When enabled, emits lineage as incremental to existing lineage already in DataHub. When disabled, re-states lineage on each run.",
                    "default": false,
                    "type": "boolean"
                },
                "convert_urns_to_lowercase": {
                    "title": "Convert Urns To Lowercase",
                    "description": "Whether to convert dataset urns to lowercase.",
                    "default": true,
                    "type": "boolean"
                },
                "env": {
                    "title": "Env",
                    "description": "The environment that all assets produced by this connector belong to",
                    "default": "PROD",
                    "type": "string"
                },
                "platform_instance": {
                    "title": "Platform Instance",
                    "description": "The instance of the platform that all assets produced by this recipe belong to. This should be unique within the platform. See https://datahubproject.io/docs/platform-instances/ for more details.",
                    "type": "string"
                },
                "stateful_ingestion": {
                    "$ref": "#/definitions/StatefulStaleMetadataRemovalConfig"
                },
                "options": {
                    "title": "Options",
                    "description": "Any options specified here will be passed to [SQLAlchemy.create_engine](https://docs.sqlalchemy.org/en/14/core/engines.html#sqlalchemy.create_engine) as kwargs.",
                    "type": "object"
                },
                "profile_pattern": {
                    "title": "Profile Pattern",
                    "description": "Regex patterns to filter tables (or specific columns) for profiling during ingestion. Note that only tables allowed by the `table_pattern` will be considered.",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "allOf": [
                        {
                            "$ref": "#/definitions/AllowDenyPattern"
                        }
                    ]
                },
                "domain": {
                    "title": "Domain",
                    "description": "Attach domains to databases, schemas or tables during ingestion using regex patterns. Domain key can be a guid like *urn:li:domain:ec428203-ce86-4db3-985d-5a8ee6df32ba* or a string like \"Marketing\".) If you provide strings, then datahub will attempt to resolve this name to a guid, and will error out if this fails. There can be multiple domain keys specified.",
                    "default": {},
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/definitions/AllowDenyPattern"
                    }
                },
                "include_views": {
                    "title": "Include Views",
                    "description": "Whether views should be ingested.",
                    "default": true,
                    "type": "boolean"
                },
                "include_tables": {
                    "title": "Include Tables",
                    "description": "Whether tables should be ingested.",
                    "default": true,
                    "type": "boolean"
                },
                "include_table_location_lineage": {
                    "title": "Include Table Location Lineage",
                    "description": "If the source supports it, include table lineage to the underlying storage location.",
                    "default": true,
                    "type": "boolean"
                },
                "include_view_lineage": {
                    "title": "Include View Lineage",
                    "description": "Populates view->view and table->view lineage using DataHub's sql parser.",
                    "default": true,
                    "type": "boolean"
                },
                "include_view_column_lineage": {
                    "title": "Include View Column Lineage",
                    "description": "Populates column-level lineage for  view->view and table->view lineage using DataHub's sql parser. Requires `include_view_lineage` to be enabled.",
                    "default": true,
                    "type": "boolean"
                },
                "use_file_backed_cache": {
                    "title": "Use File Backed Cache",
                    "description": "Whether to use a file backed cache for the view definitions.",
                    "default": true,
                    "type": "boolean"
                },
                "profiling": {
                    "title": "Profiling",
                    "default": {
                        "enabled": false,
                        "operation_config": {
                            "lower_freq_profile_enabled": false,
                            "profile_day_of_week": null,
                            "profile_date_of_month": null
                        },
                        "limit": null,
                        "offset": null,
                        "profile_table_level_only": false,
                        "include_field_null_count": true,
                        "include_field_distinct_count": true,
                        "include_field_min_value": true,
                        "include_field_max_value": true,
                        "include_field_mean_value": true,
                        "include_field_median_value": true,
                        "include_field_stddev_value": true,
                        "include_field_quantiles": false,
                        "include_field_distinct_value_frequencies": false,
                        "include_field_histogram": false,
                        "include_field_sample_values": true,
                        "max_workers": 20,
                        "report_dropped_profiles": false,
                        "turn_off_expensive_profiling_metrics": false,
                        "field_sample_values_limit": 20,
                        "max_number_of_fields_to_profile": null,
                        "profile_if_updated_since_days": null,
                        "profile_table_size_limit": 5,
                        "profile_table_row_limit": 5000000,
                        "profile_table_row_count_estimate_only": false,
                        "query_combiner_enabled": true,
                        "catch_exceptions": true,
                        "partition_profiling_enabled": true,
                        "partition_datetime": null,
                        "use_sampling": true,
                        "sample_size": 10000,
                        "profile_external_tables": false,
                        "tags_to_ignore_sampling": null,
                        "profile_nested_fields": false
                    },
                    "allOf": [
                        {
                            "$ref": "#/definitions/GEProfilingConfig"
                        }
                    ]
                },
                "scheme": {
                    "title": "Scheme",
                    "default": "snowflake",
                    "type": "string"
                },
                "username": {
                    "title": "Username",
                    "description": "Snowflake username.",
                    "type": "string"
                },
                "password": {
                    "title": "Password",
                    "description": "Snowflake password.",
                    "type": "string",
                    "writeOnly": true,
                    "format": "password"
                },
                "private_key": {
                    "title": "Private Key",
                    "description": "Private key in a form of '-----BEGIN PRIVATE KEY-----\\nprivate-key\\n-----END PRIVATE KEY-----\\n' if using key pair authentication. Encrypted version of private key will be in a form of '-----BEGIN ENCRYPTED PRIVATE KEY-----\\nencrypted-private-key\\n-----END ENCRYPTED PRIVATE KEY-----\\n' See: https://docs.snowflake.com/en/user-guide/key-pair-auth.html",
                    "type": "string"
                },
                "private_key_path": {
                    "title": "Private Key Path",
                    "description": "The path to the private key if using key pair authentication. Ignored if `private_key` is set. See: https://docs.snowflake.com/en/user-guide/key-pair-auth.html",
                    "type": "string"
                },
                "private_key_password": {
                    "title": "Private Key Password",
                    "description": "Password for your private key. Required if using key pair authentication with encrypted private key.",
                    "type": "string",
                    "writeOnly": true,
                    "format": "password"
                },
                "oauth_config": {
                    "title": "Oauth Config",
                    "description": "oauth configuration - https://docs.snowflake.com/en/user-guide/python-connector-example.html#connecting-with-oauth",
                    "allOf": [
                        {
                            "$ref": "#/definitions/OAuthConfiguration"
                        }
                    ]
                },
                "authentication_type": {
                    "title": "Authentication Type",
                    "description": "The type of authenticator to use when connecting to Snowflake. Supports \"DEFAULT_AUTHENTICATOR\", \"OAUTH_AUTHENTICATOR\", \"EXTERNAL_BROWSER_AUTHENTICATOR\" and \"KEY_PAIR_AUTHENTICATOR\".",
                    "default": "DEFAULT_AUTHENTICATOR",
                    "type": "string"
                },
                "account_id": {
                    "title": "Account Id",
                    "description": "Snowflake account identifier. e.g. xy12345,  xy12345.us-east-2.aws, xy12345.us-central1.gcp, xy12345.central-us.azure, xy12345.us-west-2.privatelink. Refer [Account Identifiers](https://docs.snowflake.com/en/user-guide/admin-account-identifier.html#format-2-legacy-account-locator-in-a-region) for more details.",
                    "type": "string"
                },
                "warehouse": {
                    "title": "Warehouse",
                    "description": "Snowflake warehouse.",
                    "type": "string"
                },
                "role": {
                    "title": "Role",
                    "description": "Snowflake role.",
                    "type": "string"
                },
                "connect_args": {
                    "title": "Connect Args",
                    "description": "Connect args to pass to Snowflake SqlAlchemy driver",
                    "type": "object"
                },
                "token": {
                    "title": "Token",
                    "description": "OAuth token from external identity provider. Not recommended for most use cases because it will not be able to refresh once expired.",
                    "type": "string"
                },
                "database_pattern": {
                    "title": "Database Pattern",
                    "description": "Regex patterns for databases to filter in ingestion.",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [
                            "^UTIL_DB$",
                            "^SNOWFLAKE$",
                            "^SNOWFLAKE_SAMPLE_DATA$"
                        ],
                        "ignoreCase": true
                    },
                    "allOf": [
                        {
                            "$ref": "#/definitions/AllowDenyPattern"
                        }
                    ]
                },
                "match_fully_qualified_names": {
                    "title": "Match Fully Qualified Names",
                    "description": "Whether `schema_pattern` is matched against fully qualified schema name `<catalog>.<schema>`.",
                    "default": false,
                    "type": "boolean"
                },
                "include_table_lineage": {
                    "title": "Include Table Lineage",
                    "description": "If enabled, populates the snowflake table-to-table and s3-to-snowflake table lineage. Requires appropriate grants given to the role and Snowflake Enterprise Edition or above.",
                    "default": true,
                    "type": "boolean"
                },
                "ignore_start_time_lineage": {
                    "title": "Ignore Start Time Lineage",
                    "default": false,
                    "type": "boolean"
                },
                "upstream_lineage_in_report": {
                    "title": "Upstream Lineage In Report",
                    "default": false,
                    "type": "boolean"
                },
                "include_usage_stats": {
                    "title": "Include Usage Stats",
                    "description": "If enabled, populates the snowflake usage statistics. Requires appropriate grants given to the role.",
                    "default": true,
                    "type": "boolean"
                },
                "include_view_definitions": {
                    "title": "Include View Definitions",
                    "description": "If enabled, populates the ingested views' definitions.",
                    "default": true,
                    "type": "boolean"
                },
                "include_technical_schema": {
                    "title": "Include Technical Schema",
                    "description": "If enabled, populates the snowflake technical schema and descriptions.",
                    "default": true,
                    "type": "boolean"
                },
                "include_primary_keys": {
                    "title": "Include Primary Keys",
                    "description": "If enabled, populates the snowflake primary keys.",
                    "default": true,
                    "type": "boolean"
                },
                "include_foreign_keys": {
                    "title": "Include Foreign Keys",
                    "description": "If enabled, populates the snowflake foreign keys.",
                    "default": true,
                    "type": "boolean"
                },
                "include_column_lineage": {
                    "title": "Include Column Lineage",
                    "description": "Populates table->table and view->table column lineage. Requires appropriate grants given to the role and the Snowflake Enterprise Edition or above.",
                    "default": true,
                    "type": "boolean"
                },
                "use_queries_v2": {
                    "title": "Use Queries V2",
                    "description": "If enabled, uses the new queries extractor to extract queries from snowflake.",
                    "default": false,
                    "type": "boolean"
                },
                "lazy_schema_resolver": {
                    "title": "Lazy Schema Resolver",
                    "description": "If enabled, uses lazy schema resolver to resolve schemas for tables and views. This is useful if you have a large number of schemas and want to avoid bulk fetching the schema for each table/view.",
                    "default": true,
                    "type": "boolean"
                },
                "extract_tags": {
                    "description": "Optional. Allowed values are `without_lineage`, `with_lineage`, and `skip` (default). `without_lineage` only extracts tags that have been applied directly to the given entity. `with_lineage` extracts both directly applied and propagated tags, but will be significantly slower. See the [Snowflake documentation](https://docs.snowflake.com/en/user-guide/object-tagging.html#tag-lineage) for information about tag lineage/propagation. ",
                    "default": "skip",
                    "allOf": [
                        {
                            "$ref": "#/definitions/TagOption"
                        }
                    ]
                },
                "include_external_url": {
                    "title": "Include External Url",
                    "description": "Whether to populate Snowsight url for Snowflake Objects",
                    "default": true,
                    "type": "boolean"
                },
                "validate_upstreams_against_patterns": {
                    "title": "Validate Upstreams Against Patterns",
                    "description": "Whether to validate upstream snowflake tables against allow-deny patterns",
                    "default": true,
                    "type": "boolean"
                },
                "tag_pattern": {
                    "title": "Tag Pattern",
                    "description": "List of regex patterns for tags to include in ingestion. Only used if `extract_tags` is enabled.",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "allOf": [
                        {
                            "$ref": "#/definitions/AllowDenyPattern"
                        }
                    ]
                },
                "temporary_tables_pattern": {
                    "title": "Temporary Tables Pattern",
                    "description": "[Advanced] Regex patterns for temporary tables to filter in lineage ingestion. Specify regex to match the entire table name in database.schema.table format. Defaults are to set in such a way to ignore the temporary staging tables created by known ETL tools.",
                    "default": [
                        ".*\\.FIVETRAN_.*_STAGING\\..*",
                        ".*__DBT_TMP$",
                        ".*\\.SEGMENT_[a-f0-9]{8}[-_][a-f0-9]{4}[-_][a-f0-9]{4}[-_][a-f0-9]{4}[-_][a-f0-9]{12}",
                        ".*\\.STAGING_.*_[a-f0-9]{8}[-_][a-f0-9]{4}[-_][a-f0-9]{4}[-_][a-f0-9]{4}[-_][a-f0-9]{12}",
                        ".*\\.(GE_TMP_|GE_TEMP_|GX_TEMP_)[0-9A-F]{8}"
                    ],
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "shares": {
                    "title": "Shares",
                    "description": "Required if current account owns or consumes snowflake share.If specified, connector creates lineage and siblings relationship between current account's database tables and consumer/producer account's database tables. Map of share name -> details of share.",
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/definitions/SnowflakeShareConfig"
                    }
                },
                "email_as_user_identifier": {
                    "title": "Email As User Identifier",
                    "description": "Format user urns as an email, if the snowflake user's email is set. If `email_domain` is provided, generates email addresses for snowflake users with unset emails, based on their username.",
                    "default": true,
                    "type": "boolean"
                },
                "include_assertion_results": {
                    "title": "Include Assertion Results",
                    "description": "Whether to ingest assertion run results for assertions created using Datahub assertions CLI in snowflake",
                    "default": false,
                    "type": "boolean"
                }
            },
            "required": [
                "account_id"
            ],
            "additionalProperties": false
        },
        "ldap": {
            "type": "object",
            "properties": {
                "type": {
                    "type": "string",
                    "enum": [
                        "ldap"
                    ]
                },
                "config": {
                    "$ref": "#/definitions/ldap_config"
                }
            },
            "required": [
                "type",
                "config"
            ]
        },
        "ldap_config": {
            "title": "LDAPSourceConfig",
            "description": "Config used by the LDAP Source.",
            "type": "object",
            "properties": {
                "env": {
                    "title": "Env",
                    "description": "The environment that all assets produced by this connector belong to",
                    "default": "PROD",
                    "type": "string"
                },
                "platform_instance": {
                    "title": "Platform Instance",
                    "description": "The instance of the platform that all assets produced by this recipe belong to. This should be unique within the platform. See https://datahubproject.io/docs/platform-instances/ for more details.",
                    "type": "string"
                },
                "stateful_ingestion": {
                    "$ref": "#/definitions/StatefulStaleMetadataRemovalConfig"
                },
                "ldap_server": {
                    "title": "Ldap Server",
                    "description": "LDAP server URL.",
                    "type": "string"
                },
                "ldap_user": {
                    "title": "Ldap User",
                    "description": "LDAP user.",
                    "type": "string"
                },
                "ldap_password": {
                    "title": "Ldap Password",
                    "description": "LDAP password.",
                    "type": "string"
                },
                "base_dn": {
                    "title": "Base Dn",
                    "description": "LDAP DN.",
                    "type": "string"
                },
                "filter": {
                    "title": "Filter",
                    "description": "LDAP extractor filter.",
                    "default": "(objectClass=*)",
                    "type": "string"
                },
                "attrs_list": {
                    "title": "Attrs List",
                    "description": "Retrieved attributes list",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "custom_props_list": {
                    "title": "Custom Props List",
                    "description": "A list of custom attributes to extract from the LDAP provider.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "drop_missing_first_last_name": {
                    "title": "Drop Missing First Last Name",
                    "description": "If set to true, any users without first and last names will be dropped.",
                    "default": true,
                    "type": "boolean"
                },
                "page_size": {
                    "title": "Page Size",
                    "description": "Size of each page to fetch when extracting metadata.",
                    "default": 20,
                    "type": "integer"
                },
                "manager_filter_enabled": {
                    "title": "Manager Filter Enabled",
                    "description": "Use LDAP extractor filter to search managers.",
                    "default": true,
                    "type": "boolean"
                },
                "manager_pagination_enabled": {
                    "title": "Manager Pagination Enabled",
                    "description": "[deprecated] Use pagination_enabled ",
                    "default": true,
                    "type": "boolean"
                },
                "pagination_enabled": {
                    "title": "Pagination Enabled",
                    "description": "Use pagination while do search query (enabled by default).",
                    "default": true,
                    "type": "boolean"
                },
                "use_email_as_username": {
                    "title": "Use Email As Username",
                    "description": "Use email for users' usernames instead of username (disabled by default).             If enabled, the user and group urn would be having email as the id part of the urn.",
                    "default": false,
                    "type": "boolean"
                },
                "user_attrs_map": {
                    "title": "User Attrs Map",
                    "default": {},
                    "type": "object"
                },
                "group_attrs_map": {
                    "title": "Group Attrs Map",
                    "default": {},
                    "type": "object"
                }
            },
            "required": [
                "ldap_server",
                "ldap_user",
                "ldap_password",
                "base_dn"
            ],
            "additionalProperties": false
        },
        "dynamodb": {
            "type": "object",
            "properties": {
                "type": {
                    "type": "string",
                    "enum": [
                        "dynamodb"
                    ]
                },
                "config": {
                    "$ref": "#/definitions/dynamodb_config"
                }
            },
            "required": [
                "type",
                "config"
            ]
        },
        "dynamodb_config": {
            "title": "DynamoDBConfig",
            "description": "Any source that is a primary producer of Dataset metadata should inherit this class",
            "type": "object",
            "properties": {
                "aws_access_key_id": {
                    "title": "Aws Access Key Id",
                    "description": "AWS access key ID. Can be auto-detected, see [the AWS boto3 docs](https://boto3.amazonaws.com/v1/documentation/api/latest/guide/credentials.html) for details.",
                    "type": "string"
                },
                "aws_secret_access_key": {
                    "title": "Aws Secret Access Key",
                    "description": "AWS secret access key. Can be auto-detected, see [the AWS boto3 docs](https://boto3.amazonaws.com/v1/documentation/api/latest/guide/credentials.html) for details.",
                    "type": "string"
                },
                "aws_session_token": {
                    "title": "Aws Session Token",
                    "description": "AWS session token. Can be auto-detected, see [the AWS boto3 docs](https://boto3.amazonaws.com/v1/documentation/api/latest/guide/credentials.html) for details.",
                    "type": "string"
                },
                "aws_role": {
                    "title": "Aws Role",
                    "description": "AWS roles to assume. If using the string format, the role ARN can be specified directly. If using the object format, the role can be specified in the RoleArn field and additional available arguments are the same as [boto3's STS.Client.assume_role](https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/sts.html?highlight=assume_role#STS.Client.assume_role).",
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "array",
                            "items": {
                                "anyOf": [
                                    {
                                        "type": "string"
                                    },
                                    {
                                        "$ref": "#/definitions/AwsAssumeRoleConfig"
                                    }
                                ]
                            }
                        }
                    ]
                },
                "aws_profile": {
                    "title": "Aws Profile",
                    "description": "The [named profile](https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-profiles.html) to use from AWS credentials. Falls back to default profile if not specified and no access keys provided. Profiles are configured in ~/.aws/credentials or ~/.aws/config.",
                    "type": "string"
                },
                "aws_region": {
                    "title": "Aws Region",
                    "description": "AWS region code.",
                    "type": "string"
                },
                "aws_endpoint_url": {
                    "title": "Aws Endpoint Url",
                    "description": "The AWS service endpoint. This is normally [constructed automatically](https://boto3.amazonaws.com/v1/documentation/api/latest/reference/core/session.html), but can be overridden here.",
                    "type": "string"
                },
                "aws_proxy": {
                    "title": "Aws Proxy",
                    "description": "A set of proxy configs to use with AWS. See the [botocore.config](https://botocore.amazonaws.com/v1/documentation/api/latest/reference/config.html) docs for details.",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "aws_retry_num": {
                    "title": "Aws Retry Num",
                    "description": "Number of times to retry failed AWS requests. See the [botocore.retry](https://boto3.amazonaws.com/v1/documentation/api/latest/guide/retries.html) docs for details.",
                    "default": 5,
                    "type": "integer"
                },
                "aws_retry_mode": {
                    "title": "Aws Retry Mode",
                    "description": "Retry mode to use for failed AWS requests. See the [botocore.retry](https://boto3.amazonaws.com/v1/documentation/api/latest/guide/retries.html) docs for details.",
                    "default": "standard",
                    "enum": [
                        "legacy",
                        "standard",
                        "adaptive"
                    ],
                    "type": "string"
                },
                "read_timeout": {
                    "title": "Read Timeout",
                    "description": "The timeout for reading from the connection (in seconds).",
                    "default": 60,
                    "type": "number"
                },
                "aws_advanced_config": {
                    "title": "Aws Advanced Config",
                    "description": "Advanced AWS configuration options. These are passed directly to [botocore.config.Config](https://botocore.amazonaws.com/v1/documentation/api/latest/reference/config.html).",
                    "type": "object"
                },
                "env": {
                    "title": "Env",
                    "description": "The environment that all assets produced by this connector belong to",
                    "default": "PROD",
                    "type": "string"
                },
                "database_pattern": {
                    "title": "Database Pattern",
                    "description": "regex patterns for databases to filter in ingestion.",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "allOf": [
                        {
                            "$ref": "#/definitions/AllowDenyPattern"
                        }
                    ]
                },
                "table_pattern": {
                    "title": "Table Pattern",
                    "description": "Regex patterns for tables to filter in ingestion. The table name format is 'region.table'",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "allOf": [
                        {
                            "$ref": "#/definitions/AllowDenyPattern"
                        }
                    ]
                },
                "classification": {
                    "title": "Classification",
                    "description": "For details, refer to [Classification](../../../../metadata-ingestion/docs/dev_guides/classification.md).",
                    "default": {
                        "enabled": false,
                        "sample_size": 100,
                        "max_workers": 4,
                        "table_pattern": {
                            "allow": [
                                ".*"
                            ],
                            "deny": [],
                            "ignoreCase": true
                        },
                        "column_pattern": {
                            "allow": [
                                ".*"
                            ],
                            "deny": [],
                            "ignoreCase": true
                        },
                        "info_type_to_term": {},
                        "classifiers": [
                            {
                                "type": "datahub",
                                "config": null
                            }
                        ]
                    },
                    "allOf": [
                        {
                            "$ref": "#/definitions/ClassificationConfig"
                        }
                    ]
                },
                "stateful_ingestion": {
                    "$ref": "#/definitions/StatefulStaleMetadataRemovalConfig"
                },
                "platform_instance": {
                    "title": "Platform Instance",
                    "description": "The instance of the platform that all assets produced by this recipe belong to. This should be unique within the platform. See https://datahubproject.io/docs/platform-instances/ for more details.",
                    "type": "string"
                },
                "domain": {
                    "title": "Domain",
                    "description": "regex patterns for tables to filter to assign domain_key. ",
                    "default": {},
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/definitions/AllowDenyPattern"
                    }
                },
                "include_table_item": {
                    "title": "Include Table Item",
                    "description": "[Advanced] The primary keys of items of a table in dynamodb format the user would like to include in schema. Refer \"Advanced Configurations\" section for more details",
                    "type": "object",
                    "additionalProperties": {
                        "type": "array",
                        "items": {
                            "type": "object"
                        }
                    }
                }
            },
            "additionalProperties": false
        },
        "sagemaker": {
            "type": "object",
            "properties": {
                "type": {
                    "type": "string",
                    "enum": [
                        "sagemaker"
                    ]
                },
                "config": {
                    "$ref": "#/definitions/sagemaker_config"
                }
            },
            "required": [
                "type",
                "config"
            ]
        },
        "sagemaker_config": {
            "title": "SagemakerSourceConfig",
            "description": "Common AWS credentials config.\n\nCurrently used by:\n    - Glue source\n    - DynamoDB source\n    - SageMaker source",
            "type": "object",
            "properties": {
                "stateful_ingestion": {
                    "$ref": "#/definitions/StatefulStaleMetadataRemovalConfig"
                },
                "aws_access_key_id": {
                    "title": "Aws Access Key Id",
                    "description": "AWS access key ID. Can be auto-detected, see [the AWS boto3 docs](https://boto3.amazonaws.com/v1/documentation/api/latest/guide/credentials.html) for details.",
                    "type": "string"
                },
                "aws_secret_access_key": {
                    "title": "Aws Secret Access Key",
                    "description": "AWS secret access key. Can be auto-detected, see [the AWS boto3 docs](https://boto3.amazonaws.com/v1/documentation/api/latest/guide/credentials.html) for details.",
                    "type": "string"
                },
                "aws_session_token": {
                    "title": "Aws Session Token",
                    "description": "AWS session token. Can be auto-detected, see [the AWS boto3 docs](https://boto3.amazonaws.com/v1/documentation/api/latest/guide/credentials.html) for details.",
                    "type": "string"
                },
                "aws_role": {
                    "title": "Aws Role",
                    "description": "AWS roles to assume. If using the string format, the role ARN can be specified directly. If using the object format, the role can be specified in the RoleArn field and additional available arguments are the same as [boto3's STS.Client.assume_role](https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/sts.html?highlight=assume_role#STS.Client.assume_role).",
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "array",
                            "items": {
                                "anyOf": [
                                    {
                                        "type": "string"
                                    },
                                    {
                                        "$ref": "#/definitions/AwsAssumeRoleConfig"
                                    }
                                ]
                            }
                        }
                    ]
                },
                "aws_profile": {
                    "title": "Aws Profile",
                    "description": "The [named profile](https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-profiles.html) to use from AWS credentials. Falls back to default profile if not specified and no access keys provided. Profiles are configured in ~/.aws/credentials or ~/.aws/config.",
                    "type": "string"
                },
                "aws_region": {
                    "title": "Aws Region",
                    "description": "AWS region code.",
                    "type": "string"
                },
                "aws_endpoint_url": {
                    "title": "Aws Endpoint Url",
                    "description": "The AWS service endpoint. This is normally [constructed automatically](https://boto3.amazonaws.com/v1/documentation/api/latest/reference/core/session.html), but can be overridden here.",
                    "type": "string"
                },
                "aws_proxy": {
                    "title": "Aws Proxy",
                    "description": "A set of proxy configs to use with AWS. See the [botocore.config](https://botocore.amazonaws.com/v1/documentation/api/latest/reference/config.html) docs for details.",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "aws_retry_num": {
                    "title": "Aws Retry Num",
                    "description": "Number of times to retry failed AWS requests. See the [botocore.retry](https://boto3.amazonaws.com/v1/documentation/api/latest/guide/retries.html) docs for details.",
                    "default": 5,
                    "type": "integer"
                },
                "aws_retry_mode": {
                    "title": "Aws Retry Mode",
                    "description": "Retry mode to use for failed AWS requests. See the [botocore.retry](https://boto3.amazonaws.com/v1/documentation/api/latest/guide/retries.html) docs for details.",
                    "default": "standard",
                    "enum": [
                        "legacy",
                        "standard",
                        "adaptive"
                    ],
                    "type": "string"
                },
                "read_timeout": {
                    "title": "Read Timeout",
                    "description": "The timeout for reading from the connection (in seconds).",
                    "default": 60,
                    "type": "number"
                },
                "aws_advanced_config": {
                    "title": "Aws Advanced Config",
                    "description": "Advanced AWS configuration options. These are passed directly to [botocore.config.Config](https://botocore.amazonaws.com/v1/documentation/api/latest/reference/config.html).",
                    "type": "object"
                },
                "env": {
                    "title": "Env",
                    "description": "The environment that all assets produced by this connector belong to",
                    "default": "PROD",
                    "type": "string"
                },
                "database_pattern": {
                    "title": "Database Pattern",
                    "description": "regex patterns for databases to filter in ingestion.",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "allOf": [
                        {
                            "$ref": "#/definitions/AllowDenyPattern"
                        }
                    ]
                },
                "table_pattern": {
                    "title": "Table Pattern",
                    "description": "regex patterns for tables to filter in ingestion.",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "allOf": [
                        {
                            "$ref": "#/definitions/AllowDenyPattern"
                        }
                    ]
                },
                "extract_feature_groups": {
                    "title": "Extract Feature Groups",
                    "description": "Whether to extract feature groups.",
                    "default": true,
                    "type": "boolean"
                },
                "extract_models": {
                    "title": "Extract Models",
                    "description": "Whether to extract models.",
                    "default": true,
                    "type": "boolean"
                },
                "extract_jobs": {
                    "title": "Extract Jobs",
                    "description": "Whether to extract AutoML jobs.",
                    "default": true,
                    "anyOf": [
                        {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        },
                        {
                            "type": "boolean"
                        }
                    ]
                }
            },
            "additionalProperties": false
        },
        "powerbi-report-server": {
            "type": "object",
            "properties": {
                "type": {
                    "type": "string",
                    "enum": [
                        "powerbi-report-server"
                    ]
                },
                "config": {
                    "$ref": "#/definitions/powerbi-report-server_config"
                }
            },
            "required": [
                "type",
                "config"
            ]
        },
        "powerbi-report-server_config": {
            "title": "PowerBiReportServerDashboardSourceConfig",
            "description": "Any source that produces dataset urns in a single environment should inherit this class",
            "type": "object",
            "properties": {
                "env": {
                    "title": "Env",
                    "description": "The environment that all assets produced by this connector belong to",
                    "default": "PROD",
                    "type": "string"
                },
                "username": {
                    "title": "Username",
                    "description": "Windows account username",
                    "type": "string"
                },
                "password": {
                    "title": "Password",
                    "description": "Windows account password",
                    "type": "string"
                },
                "workstation_name": {
                    "title": "Workstation Name",
                    "description": "Workstation name",
                    "default": "localhost",
                    "type": "string"
                },
                "host_port": {
                    "title": "Host Port",
                    "description": "Power BI Report Server host URL",
                    "type": "string"
                },
                "server_alias": {
                    "title": "Server Alias",
                    "description": "Alias for Power BI Report Server host URL",
                    "default": "",
                    "type": "string"
                },
                "graphql_url": {
                    "title": "Graphql Url",
                    "description": "[deprecated] Not used",
                    "type": "string"
                },
                "report_virtual_directory_name": {
                    "title": "Report Virtual Directory Name",
                    "description": "Report Virtual Directory URL name",
                    "type": "string"
                },
                "report_server_virtual_directory_name": {
                    "title": "Report Server Virtual Directory Name",
                    "description": "Report Server Virtual Directory URL name",
                    "type": "string"
                },
                "extract_ownership": {
                    "title": "Extract Ownership",
                    "description": "Whether ownership should be ingested",
                    "default": true,
                    "type": "boolean"
                },
                "ownership_type": {
                    "title": "Ownership Type",
                    "description": "Ownership type of owner",
                    "default": "NONE",
                    "type": "string"
                },
                "platform_name": {
                    "title": "Platform Name",
                    "default": "powerbi",
                    "type": "string"
                },
                "platform_urn": {
                    "title": "Platform Urn",
                    "default": "urn:li:dataPlatform:powerbi",
                    "type": "string"
                },
                "report_pattern": {
                    "title": "Report Pattern",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "allOf": [
                        {
                            "$ref": "#/definitions/AllowDenyPattern"
                        }
                    ]
                },
                "chart_pattern": {
                    "title": "Chart Pattern",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "allOf": [
                        {
                            "$ref": "#/definitions/AllowDenyPattern"
                        }
                    ]
                }
            },
            "required": [
                "username",
                "password",
                "host_port",
                "report_virtual_directory_name",
                "report_server_virtual_directory_name"
            ],
            "additionalProperties": false
        },
        "datahub": {
            "type": "object",
            "properties": {
                "type": {
                    "type": "string",
                    "enum": [
                        "datahub"
                    ]
                },
                "config": {
                    "$ref": "#/definitions/datahub_config"
                }
            },
            "required": [
                "type",
                "config"
            ]
        },
        "datahub_config": {
            "title": "DataHubSourceConfig",
            "description": "Base configuration class for stateful ingestion for source configs to inherit from.",
            "type": "object",
            "properties": {
                "stateful_ingestion": {
                    "title": "Stateful Ingestion",
                    "description": "Stateful Ingestion Config",
                    "default": {
                        "enabled": true,
                        "max_checkpoint_state_size": 16777216,
                        "state_provider": {
                            "type": "datahub",
                            "config": {}
                        },
                        "ignore_old_state": false,
                        "ignore_new_state": false
                    },
                    "allOf": [
                        {
                            "$ref": "#/definitions/StatefulIngestionConfig"
                        }
                    ]
                },
                "database_connection": {
                    "title": "Database Connection",
                    "description": "Database connection config",
                    "allOf": [
                        {
                            "$ref": "#/definitions/SQLAlchemyConnectionConfig"
                        }
                    ]
                },
                "kafka_connection": {
                    "title": "Kafka Connection",
                    "description": "Kafka connection config",
                    "allOf": [
                        {
                            "$ref": "#/definitions/KafkaConsumerConnectionConfig"
                        }
                    ]
                },
                "include_all_versions": {
                    "title": "Include All Versions",
                    "description": "If enabled, include all versions of each aspect. Otherwise, only include the latest version of each aspect. ",
                    "default": false,
                    "type": "boolean"
                },
                "include_soft_deleted_entities": {
                    "title": "Include Soft Deleted Entities",
                    "description": "If enabled, include entities that have been soft deleted. Otherwise, include all entities regardless of removal status. ",
                    "default": true,
                    "type": "boolean"
                },
                "exclude_aspects": {
                    "title": "Exclude Aspects",
                    "description": "Set of aspect names to exclude from ingestion",
                    "default": [
                        "testResults",
                        "dataHubSecretKey",
                        "globalSettingsKey",
                        "datahubIngestionRunSummary",
                        "datahubIngestionCheckpoint",
                        "dataHubIngestionSourceInfo",
                        "dataHubIngestionSourceKey",
                        "dataHubSecretValue",
                        "globalSettingsInfo"
                    ],
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "uniqueItems": true
                },
                "database_query_batch_size": {
                    "title": "Database Query Batch Size",
                    "description": "Number of records to fetch from the database at a time",
                    "default": 10000,
                    "type": "integer"
                },
                "database_table_name": {
                    "title": "Database Table Name",
                    "description": "Name of database table containing all versioned aspects",
                    "default": "metadata_aspect_v2",
                    "type": "string"
                },
                "kafka_topic_name": {
                    "title": "Kafka Topic Name",
                    "description": "Name of kafka topic containing timeseries MCLs",
                    "default": "MetadataChangeLog_Timeseries_v1",
                    "type": "string"
                },
                "commit_state_interval": {
                    "title": "Commit State Interval",
                    "description": "Number of records to process before committing state",
                    "default": 1000,
                    "type": "integer"
                },
                "commit_with_parse_errors": {
                    "title": "Commit With Parse Errors",
                    "description": "Whether to update createdon timestamp and kafka offset despite parse errors. Enable if you want to ignore the errors.",
                    "default": false,
                    "type": "boolean"
                },
                "pull_from_datahub_api": {
                    "title": "Pull From Datahub Api",
                    "description": "Use the DataHub API to fetch versioned aspects.",
                    "default": false,
                    "hidden_from_docs": true,
                    "type": "boolean"
                },
                "max_workers": {
                    "title": "Max Workers",
                    "description": "Number of worker threads to use for datahub api ingestion.",
                    "default": 20,
                    "hidden_from_docs": true,
                    "type": "integer"
                },
                "urn_pattern": {
                    "title": "Urn Pattern",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "allOf": [
                        {
                            "$ref": "#/definitions/AllowDenyPattern"
                        }
                    ]
                }
            }
        },
        "kafka-connect": {
            "type": "object",
            "properties": {
                "type": {
                    "type": "string",
                    "enum": [
                        "kafka-connect"
                    ]
                },
                "config": {
                    "$ref": "#/definitions/kafka-connect_config"
                }
            },
            "required": [
                "type",
                "config"
            ]
        },
        "kafka-connect_config": {
            "title": "KafkaConnectSourceConfig",
            "description": "Any source that connects to a platform should inherit this class",
            "type": "object",
            "properties": {
                "stateful_ingestion": {
                    "$ref": "#/definitions/StatefulStaleMetadataRemovalConfig"
                },
                "env": {
                    "title": "Env",
                    "description": "The environment that all assets produced by this connector belong to",
                    "default": "PROD",
                    "type": "string"
                },
                "platform_instance_map": {
                    "title": "Platform Instance Map",
                    "description": "Platform instance mapping to use when constructing URNs. e.g.`platform_instance_map: { \"hive\": \"warehouse\" }`",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "platform_instance": {
                    "title": "Platform Instance",
                    "description": "The instance of the platform that all assets produced by this recipe belong to. This should be unique within the platform. See https://datahubproject.io/docs/platform-instances/ for more details.",
                    "type": "string"
                },
                "connect_uri": {
                    "title": "Connect Uri",
                    "description": "URI to connect to.",
                    "default": "http://localhost:8083/",
                    "type": "string"
                },
                "username": {
                    "title": "Username",
                    "description": "Kafka Connect username.",
                    "type": "string"
                },
                "password": {
                    "title": "Password",
                    "description": "Kafka Connect password.",
                    "type": "string"
                },
                "cluster_name": {
                    "title": "Cluster Name",
                    "description": "Cluster to ingest from.",
                    "default": "connect-cluster",
                    "type": "string"
                },
                "convert_lineage_urns_to_lowercase": {
                    "title": "Convert Lineage Urns To Lowercase",
                    "description": "Whether to convert the urns of ingested lineage dataset to lowercase",
                    "default": false,
                    "type": "boolean"
                },
                "connector_patterns": {
                    "title": "Connector Patterns",
                    "description": "regex patterns for connectors to filter for ingestion.",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "allOf": [
                        {
                            "$ref": "#/definitions/AllowDenyPattern"
                        }
                    ]
                },
                "provided_configs": {
                    "title": "Provided Configs",
                    "description": "Provided Configurations",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ProvidedConfig"
                    }
                },
                "connect_to_platform_map": {
                    "title": "Connect To Platform Map",
                    "description": "Platform instance mapping when multiple instances for a platform is available. Entry for a platform should be in either `platform_instance_map` or `connect_to_platform_map`. e.g.`connect_to_platform_map: { \"postgres-connector-finance-db\": \"postgres\": \"core_finance_instance\" }`",
                    "type": "object",
                    "additionalProperties": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    }
                },
                "generic_connectors": {
                    "title": "Generic Connectors",
                    "description": "Provide lineage graph for sources connectors other than Confluent JDBC Source Connector, Debezium Source Connector, and Mongo Source Connector",
                    "default": [],
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/GenericConnectorConfig"
                    }
                }
            },
            "additionalProperties": false
        },
        "metabase": {
            "type": "object",
            "properties": {
                "type": {
                    "type": "string",
                    "enum": [
                        "metabase"
                    ]
                },
                "config": {
                    "$ref": "#/definitions/metabase_config"
                }
            },
            "required": [
                "type",
                "config"
            ]
        },
        "metabase_config": {
            "title": "MetabaseConfig",
            "description": "Any non-Dataset source that produces lineage to Datasets should inherit this class.\ne.g. Orchestrators, Pipelines, BI Tools etc.",
            "type": "object",
            "properties": {
                "stateful_ingestion": {
                    "$ref": "#/definitions/StatefulStaleMetadataRemovalConfig"
                },
                "env": {
                    "title": "Env",
                    "description": "The environment that all assets produced by this connector belong to",
                    "default": "PROD",
                    "type": "string"
                },
                "platform_instance_map": {
                    "title": "Platform Instance Map",
                    "description": "A holder for platform -> platform_instance mappings to generate correct dataset urns",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "connect_uri": {
                    "title": "Connect Uri",
                    "description": "Metabase host URL.",
                    "default": "localhost:3000",
                    "type": "string"
                },
                "display_uri": {
                    "title": "Display Uri",
                    "description": "optional URL to use in links (if `connect_uri` is only for ingestion)",
                    "type": "string"
                },
                "username": {
                    "title": "Username",
                    "description": "Metabase username.",
                    "type": "string"
                },
                "password": {
                    "title": "Password",
                    "description": "Metabase password.",
                    "type": "string",
                    "writeOnly": true,
                    "format": "password"
                },
                "database_alias_map": {
                    "title": "Database Alias Map",
                    "description": "Database name map to use when constructing dataset URN.",
                    "type": "object"
                },
                "engine_platform_map": {
                    "title": "Engine Platform Map",
                    "description": "Custom mappings between metabase database engines and DataHub platforms",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "database_id_to_instance_map": {
                    "title": "Database Id To Instance Map",
                    "description": "Custom mappings between metabase database id and DataHub platform instance",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "default_schema": {
                    "title": "Default Schema",
                    "description": "Default schema name to use when schema is not provided in an SQL query",
                    "default": "public",
                    "type": "string"
                },
                "exclude_other_user_collections": {
                    "title": "Exclude Other User Collections",
                    "description": "Flag that if true, exclude other user collections",
                    "default": false,
                    "type": "boolean"
                }
            },
            "additionalProperties": false
        },
        "csv-enricher": {
            "type": "object",
            "properties": {
                "type": {
                    "type": "string",
                    "enum": [
                        "csv-enricher"
                    ]
                },
                "config": {
                    "$ref": "#/definitions/csv-enricher_config"
                }
            },
            "required": [
                "type",
                "config"
            ]
        },
        "csv-enricher_config": {
            "title": "CSVEnricherConfig",
            "type": "object",
            "properties": {
                "filename": {
                    "title": "Filename",
                    "description": "File path or URL of CSV file to ingest.",
                    "type": "string"
                },
                "write_semantics": {
                    "title": "Write Semantics",
                    "description": "Whether the new tags, terms and owners to be added will override the existing ones added only by this source or not. Value for this config can be \"PATCH\" or \"OVERRIDE\". NOTE: this will apply to all metadata for the entity, not just a single aspect.",
                    "default": "PATCH",
                    "type": "string"
                },
                "delimiter": {
                    "title": "Delimiter",
                    "description": "Delimiter to use when parsing CSV",
                    "default": ",",
                    "type": "string"
                },
                "array_delimiter": {
                    "title": "Array Delimiter",
                    "description": "Delimiter to use when parsing array fields (tags, terms and owners)",
                    "default": "|",
                    "type": "string"
                }
            },
            "required": [
                "filename"
            ],
            "additionalProperties": false
        },
        "tableau": {
            "type": "object",
            "properties": {
                "type": {
                    "type": "string",
                    "enum": [
                        "tableau"
                    ]
                },
                "config": {
                    "$ref": "#/definitions/tableau_config"
                }
            },
            "required": [
                "type",
                "config"
            ]
        },
        "tableau_config": {
            "title": "TableauConfig",
            "description": "Any non-Dataset source that produces lineage to Datasets should inherit this class.\ne.g. Orchestrators, Pipelines, BI Tools etc.",
            "type": "object",
            "properties": {
                "connect_uri": {
                    "title": "Connect Uri",
                    "description": "Tableau host URL.",
                    "type": "string"
                },
                "username": {
                    "title": "Username",
                    "description": "Tableau username, must be set if authenticating using username/password.",
                    "type": "string"
                },
                "password": {
                    "title": "Password",
                    "description": "Tableau password, must be set if authenticating using username/password.",
                    "type": "string"
                },
                "token_name": {
                    "title": "Token Name",
                    "description": "Tableau token name, must be set if authenticating using a personal access token.",
                    "type": "string"
                },
                "token_value": {
                    "title": "Token Value",
                    "description": "Tableau token value, must be set if authenticating using a personal access token.",
                    "type": "string"
                },
                "site": {
                    "title": "Site",
                    "description": "Tableau Site. Always required for Tableau Online. Use emptystring to connect with Default site on Tableau Server.",
                    "default": "",
                    "type": "string"
                },
                "platform_instance": {
                    "title": "Platform Instance",
                    "description": "The instance of the platform that all assets produced by this recipe belong to. This should be unique within the platform. See https://datahubproject.io/docs/platform-instances/ for more details.",
                    "type": "string"
                },
                "max_retries": {
                    "title": "Max Retries",
                    "description": "Number of retries for failed requests.",
                    "default": 3,
                    "type": "integer"
                },
                "ssl_verify": {
                    "title": "Ssl Verify",
                    "description": "Whether to verify SSL certificates. If using self-signed certificates, set to false or provide the path to the .pem certificate bundle.",
                    "default": true,
                    "anyOf": [
                        {
                            "type": "boolean"
                        },
                        {
                            "type": "string"
                        }
                    ]
                },
                "session_trust_env": {
                    "title": "Session Trust Env",
                    "description": "Configures the trust_env property in the requests session. If set to false (default value) it will bypass proxy settings. See https://requests.readthedocs.io/en/latest/api/#requests.Session.trust_env for more information.",
                    "default": false,
                    "type": "boolean"
                },
                "extract_column_level_lineage": {
                    "title": "Extract Column Level Lineage",
                    "description": "When enabled, extracts column-level lineage from Tableau Datasources",
                    "default": true,
                    "type": "boolean"
                },
                "env": {
                    "title": "Env",
                    "description": "Environment to use in namespace when constructing URNs.",
                    "default": "PROD",
                    "type": "string"
                },
                "stateful_ingestion": {
                    "$ref": "#/definitions/StatefulStaleMetadataRemovalConfig"
                },
                "platform_instance_map": {
                    "title": "Platform Instance Map",
                    "description": "A holder for platform -> platform_instance mappings to generate correct dataset urns",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "projects": {
                    "title": "Projects",
                    "description": "[deprecated] Use project_pattern instead. List of tableau projects ",
                    "default": [
                        "default"
                    ],
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "project_pattern": {
                    "title": "Project Pattern",
                    "description": "[deprecated] Use project_path_pattern instead. Filter for specific Tableau projects. For example, use 'My Project' to ingest a root-level Project with name 'My Project', or 'My Project/Nested Project' to ingest a nested Project with name 'Nested Project'. By default, all Projects nested inside a matching Project will be included in ingestion. You can both allow and deny projects based on their name using their name, or a Regex pattern. Deny patterns always take precedence over allow patterns. By default, all projects will be ingested.",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "allOf": [
                        {
                            "$ref": "#/definitions/AllowDenyPattern"
                        }
                    ]
                },
                "project_path_pattern": {
                    "title": "Project Path Pattern",
                    "description": "Filters Tableau projects by their full path. For instance, 'My Project/Nested Project' targets a specific nested project named 'Nested Project'. This is also useful when you need to exclude all nested projects under a particular project. You can allow or deny projects by specifying their path or a regular expression pattern. Deny patterns always override allow patterns. By default, all projects are ingested.",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "allOf": [
                        {
                            "$ref": "#/definitions/AllowDenyPattern"
                        }
                    ]
                },
                "project_path_separator": {
                    "title": "Project Path Separator",
                    "description": "The separator used for the project_path_pattern field between project names. By default, we use a slash. You can change this if your Tableau projects contain slashes in their names, and you'd like to filter by project.",
                    "default": "/",
                    "type": "string"
                },
                "default_schema_map": {
                    "title": "Default Schema Map",
                    "description": "Default schema to use when schema is not found.",
                    "default": {},
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "ingest_tags": {
                    "title": "Ingest Tags",
                    "description": "Ingest Tags from source. This will override Tags entered from UI",
                    "default": false,
                    "type": "boolean"
                },
                "ingest_owner": {
                    "title": "Ingest Owner",
                    "description": "Ingest Owner from source. This will override Owner info entered from UI",
                    "default": false,
                    "type": "boolean"
                },
                "ingest_tables_external": {
                    "title": "Ingest Tables External",
                    "description": "Ingest details for tables external to (not embedded in) tableau as entities.",
                    "default": false,
                    "type": "boolean"
                },
                "page_size": {
                    "title": "Page Size",
                    "description": "[advanced] Number of metadata objects (e.g. CustomSQLTable, PublishedDatasource, etc) to query at a time using the Tableau API.",
                    "default": 10,
                    "type": "integer"
                },
                "workbook_page_size": {
                    "title": "Workbook Page Size",
                    "description": "[advanced] Number of workbooks to query at a time using the Tableau API.",
                    "default": 1,
                    "type": "integer"
                },
                "lineage_overrides": {
                    "title": "Lineage Overrides",
                    "description": "Mappings to change generated dataset urns. Use only if you really know what you are doing.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/TableauLineageOverrides"
                        }
                    ]
                },
                "database_hostname_to_platform_instance_map": {
                    "title": "Database Hostname To Platform Instance Map",
                    "description": "Mappings to change platform instance in generated dataset urns based on database. Use only if you really know what you are doing.",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "extract_usage_stats": {
                    "title": "Extract Usage Stats",
                    "description": "[experimental] Extract usage statistics for dashboards and charts.",
                    "default": false,
                    "type": "boolean"
                },
                "ingest_embed_url": {
                    "title": "Ingest Embed Url",
                    "description": "Ingest a URL to render an embedded Preview of assets within Tableau.",
                    "default": false,
                    "type": "boolean"
                },
                "ingest_external_links_for_dashboards": {
                    "title": "Ingest External Links For Dashboards",
                    "description": "Ingest a URL to link out to from dashboards.",
                    "default": true,
                    "type": "boolean"
                },
                "ingest_external_links_for_charts": {
                    "title": "Ingest External Links For Charts",
                    "description": "Ingest a URL to link out to from charts.",
                    "default": true,
                    "type": "boolean"
                },
                "extract_project_hierarchy": {
                    "title": "Extract Project Hierarchy",
                    "description": "Whether to extract entire project hierarchy for nested projects.",
                    "default": true,
                    "type": "boolean"
                },
                "extract_lineage_from_unsupported_custom_sql_queries": {
                    "title": "Extract Lineage From Unsupported Custom Sql Queries",
                    "description": "[Experimental] Whether to extract lineage from unsupported custom sql queries using SQL parsing",
                    "default": false,
                    "type": "boolean"
                },
                "force_extraction_of_lineage_from_custom_sql_queries": {
                    "title": "Force Extraction Of Lineage From Custom Sql Queries",
                    "description": "[Experimental] Force extraction of lineage from custom sql queries using SQL parsing, ignoring Tableau metadata",
                    "default": false,
                    "type": "boolean"
                },
                "sql_parsing_disable_schema_awareness": {
                    "title": "Sql Parsing Disable Schema Awareness",
                    "description": "[Experimental] Ignore pre ingested tables schemas during parsing of SQL queries (allows to workaround ingestion errors when pre ingested schema and queries are out of sync)",
                    "default": false,
                    "type": "boolean"
                },
                "ingest_multiple_sites": {
                    "title": "Ingest Multiple Sites",
                    "description": "When enabled, ingests multiple sites the user has access to. If the user doesn't have access to the default site, specify an initial site to query in the site property. By default all sites the user has access to will be ingested. You can filter sites with the site_name_pattern property. This flag is currently only supported for Tableau Server. Tableau Cloud is not supported.",
                    "default": false,
                    "type": "boolean"
                },
                "site_name_pattern": {
                    "title": "Site Name Pattern",
                    "description": "Filter for specific Tableau sites. By default, all sites will be included in the ingestion. You can both allow and deny sites based on their name using their name, or a Regex pattern. Deny patterns always take precedence over allow patterns. This property is currently only supported for Tableau Server. Tableau Cloud is not supported. ",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "allOf": [
                        {
                            "$ref": "#/definitions/AllowDenyPattern"
                        }
                    ]
                },
                "add_site_container": {
                    "title": "Add Site Container",
                    "description": "When enabled, sites are added as containers and therefore visible in the folder structure within Datahub.",
                    "default": false,
                    "type": "boolean"
                },
                "permission_ingestion": {
                    "title": "Permission Ingestion",
                    "description": "Configuration settings for ingesting Tableau groups and their capabilities as custom properties.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/PermissionIngestionConfig"
                        }
                    ]
                },
                "ingest_hidden_assets": {
                    "title": "Ingest Hidden Assets",
                    "description": "When enabled, hidden views and dashboards are ingested into Datahub. If a dashboard or view is hidden in Tableau the luid is blank. Default of this config field is True.",
                    "default": true,
                    "type": "boolean"
                },
                "tags_for_hidden_assets": {
                    "title": "Tags For Hidden Assets",
                    "description": "Tags to be added to hidden dashboards and views. If a dashboard or view is hidden in Tableau the luid is blank. This can only be used with ingest_tags enabled as it will overwrite tags entered from the UI.",
                    "default": [],
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "required": [
                "connect_uri"
            ],
            "additionalProperties": false
        },
        "unity-catalog": {
            "type": "object",
            "properties": {
                "type": {
                    "type": "string",
                    "enum": [
                        "unity-catalog"
                    ]
                },
                "config": {
                    "$ref": "#/definitions/unity-catalog_config"
                }
            },
            "required": [
                "type",
                "config"
            ]
        },
        "unity-catalog_config": {
            "title": "UnityCatalogSourceConfig",
            "description": "Base configuration class for stateful ingestion for source configs to inherit from.",
            "type": "object",
            "properties": {
                "convert_urns_to_lowercase": {
                    "title": "Convert Urns To Lowercase",
                    "description": "Whether to convert dataset urns to lowercase.",
                    "default": false,
                    "type": "boolean"
                },
                "enable_stateful_profiling": {
                    "title": "Enable Stateful Profiling",
                    "description": "Enable stateful profiling. This will store profiling timestamps per dataset after successful profiling. and will not run profiling again in subsequent run if table has not been updated. ",
                    "default": true,
                    "type": "boolean"
                },
                "env": {
                    "title": "Env",
                    "description": "The environment that all assets produced by this connector belong to",
                    "default": "PROD",
                    "type": "string"
                },
                "platform_instance": {
                    "title": "Platform Instance",
                    "description": "The instance of the platform that all assets produced by this recipe belong to. This should be unique within the platform. See https://datahubproject.io/docs/platform-instances/ for more details.",
                    "type": "string"
                },
                "bucket_duration": {
                    "description": "Size of the time window to aggregate usage stats.",
                    "default": "DAY",
                    "allOf": [
                        {
                            "$ref": "#/definitions/BucketDuration"
                        }
                    ]
                },
                "end_time": {
                    "title": "End Time",
                    "description": "Latest date of lineage/usage to consider. Default: Current time in UTC",
                    "type": "string",
                    "format": "date-time"
                },
                "start_time": {
                    "title": "Start Time",
                    "description": "Earliest date of lineage/usage to consider. Default: Last full day in UTC (or hour, depending on `bucket_duration`). You can also specify relative time with respect to end_time such as '-7 days' Or '-7d'.",
                    "type": "string",
                    "format": "date-time"
                },
                "top_n_queries": {
                    "title": "Top N Queries",
                    "description": "Number of top queries to save to each table.",
                    "default": 10,
                    "exclusiveMinimum": 0,
                    "type": "integer"
                },
                "user_email_pattern": {
                    "title": "User Email Pattern",
                    "description": "regex patterns for user emails to filter in usage.",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "allOf": [
                        {
                            "$ref": "#/definitions/AllowDenyPattern"
                        }
                    ]
                },
                "include_operational_stats": {
                    "title": "Include Operational Stats",
                    "description": "Whether to display operational stats.",
                    "default": true,
                    "type": "boolean"
                },
                "include_read_operational_stats": {
                    "title": "Include Read Operational Stats",
                    "description": "Whether to report read operational stats. Experimental.",
                    "default": false,
                    "type": "boolean"
                },
                "format_sql_queries": {
                    "title": "Format Sql Queries",
                    "description": "Whether to format sql queries",
                    "default": false,
                    "type": "boolean"
                },
                "include_top_n_queries": {
                    "title": "Include Top N Queries",
                    "description": "Whether to ingest the top_n_queries.",
                    "default": true,
                    "type": "boolean"
                },
                "stateful_ingestion": {
                    "title": "Stateful Ingestion",
                    "description": "Unity Catalog Stateful Ingestion Config.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/StatefulStaleMetadataRemovalConfig"
                        }
                    ]
                },
                "schema_pattern": {
                    "title": "Schema Pattern",
                    "description": "Regex patterns for schemas to filter in ingestion. Specify regex to the full `metastore.catalog.schema` name. e.g. to match all tables in schema analytics, use the regex `^mymetastore\\.mycatalog\\.analytics$`.",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "allOf": [
                        {
                            "$ref": "#/definitions/AllowDenyPattern"
                        }
                    ]
                },
                "table_pattern": {
                    "title": "Table Pattern",
                    "description": "Regex patterns for tables to filter in ingestion. Specify regex to match the entire table name in `catalog.schema.table` format. e.g. to match all tables starting with customer in Customer catalog and public schema, use the regex `Customer\\.public\\.customer.*`.",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "allOf": [
                        {
                            "$ref": "#/definitions/AllowDenyPattern"
                        }
                    ]
                },
                "view_pattern": {
                    "title": "View Pattern",
                    "description": "Regex patterns for views to filter in ingestion. Note: Defaults to table_pattern if not specified. Specify regex to match the entire view name in database.schema.view format. e.g. to match all views starting with customer in Customer database and public schema, use the regex 'Customer.public.customer.*'",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "allOf": [
                        {
                            "$ref": "#/definitions/AllowDenyPattern"
                        }
                    ]
                },
                "classification": {
                    "title": "Classification",
                    "description": "For details, refer to [Classification](../../../../metadata-ingestion/docs/dev_guides/classification.md).",
                    "default": {
                        "enabled": false,
                        "sample_size": 100,
                        "max_workers": 4,
                        "table_pattern": {
                            "allow": [
                                ".*"
                            ],
                            "deny": [],
                            "ignoreCase": true
                        },
                        "column_pattern": {
                            "allow": [
                                ".*"
                            ],
                            "deny": [],
                            "ignoreCase": true
                        },
                        "info_type_to_term": {},
                        "classifiers": [
                            {
                                "type": "datahub",
                                "config": null
                            }
                        ]
                    },
                    "allOf": [
                        {
                            "$ref": "#/definitions/ClassificationConfig"
                        }
                    ]
                },
                "incremental_lineage": {
                    "title": "Incremental Lineage",
                    "description": "When enabled, emits lineage as incremental to existing lineage already in DataHub. When disabled, re-states lineage on each run.",
                    "default": false,
                    "type": "boolean"
                },
                "options": {
                    "title": "Options",
                    "description": "Any options specified here will be passed to [SQLAlchemy.create_engine](https://docs.sqlalchemy.org/en/14/core/engines.html#sqlalchemy.create_engine) as kwargs.",
                    "type": "object"
                },
                "profile_pattern": {
                    "title": "Profile Pattern",
                    "description": "Regex patterns to filter tables (or specific columns) for profiling during ingestion. Note that only tables allowed by the `table_pattern` will be considered.",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "allOf": [
                        {
                            "$ref": "#/definitions/AllowDenyPattern"
                        }
                    ]
                },
                "domain": {
                    "title": "Domain",
                    "description": "Attach domains to catalogs, schemas or tables during ingestion using regex patterns. Domain key can be a guid like *urn:li:domain:ec428203-ce86-4db3-985d-5a8ee6df32ba* or a string like \"Marketing\".) If you provide strings, then datahub will attempt to resolve this name to a guid, and will error out if this fails. There can be multiple domain keys specified.",
                    "default": {},
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/definitions/AllowDenyPattern"
                    }
                },
                "include_views": {
                    "title": "Include Views",
                    "description": "Whether views should be ingested.",
                    "default": true,
                    "type": "boolean"
                },
                "include_tables": {
                    "title": "Include Tables",
                    "description": "Whether tables should be ingested.",
                    "default": true,
                    "type": "boolean"
                },
                "include_table_location_lineage": {
                    "title": "Include Table Location Lineage",
                    "description": "If the source supports it, include table lineage to the underlying storage location.",
                    "default": true,
                    "type": "boolean"
                },
                "include_view_lineage": {
                    "title": "Include View Lineage",
                    "description": "Populates view->view and table->view lineage using DataHub's sql parser.",
                    "default": true,
                    "type": "boolean"
                },
                "include_view_column_lineage": {
                    "title": "Include View Column Lineage",
                    "description": "Populates column-level lineage for  view->view and table->view lineage using DataHub's sql parser. Requires `include_view_lineage` to be enabled.",
                    "default": true,
                    "type": "boolean"
                },
                "use_file_backed_cache": {
                    "title": "Use File Backed Cache",
                    "description": "Whether to use a file backed cache for the view definitions.",
                    "default": true,
                    "type": "boolean"
                },
                "profiling": {
                    "title": "Profiling",
                    "description": "Data profiling configuration",
                    "default": {
                        "enabled": false,
                        "operation_config": {
                            "lower_freq_profile_enabled": false,
                            "profile_day_of_week": null,
                            "profile_date_of_month": null
                        },
                        "limit": null,
                        "offset": null,
                        "profile_table_level_only": false,
                        "include_field_null_count": true,
                        "include_field_distinct_count": true,
                        "include_field_min_value": true,
                        "include_field_max_value": true,
                        "include_field_mean_value": true,
                        "include_field_median_value": true,
                        "include_field_stddev_value": true,
                        "include_field_quantiles": false,
                        "include_field_distinct_value_frequencies": false,
                        "include_field_histogram": false,
                        "include_field_sample_values": true,
                        "max_workers": 20,
                        "report_dropped_profiles": false,
                        "turn_off_expensive_profiling_metrics": false,
                        "field_sample_values_limit": 20,
                        "max_number_of_fields_to_profile": null,
                        "profile_if_updated_since_days": null,
                        "profile_table_size_limit": 5,
                        "profile_table_row_limit": 5000000,
                        "profile_table_row_count_estimate_only": false,
                        "query_combiner_enabled": true,
                        "catch_exceptions": true,
                        "partition_profiling_enabled": true,
                        "partition_datetime": null,
                        "use_sampling": true,
                        "sample_size": 10000,
                        "profile_external_tables": false,
                        "tags_to_ignore_sampling": null,
                        "profile_nested_fields": false,
                        "method": "ge",
                        "warehouse_id": null,
                        "pattern": {
                            "allow": [
                                ".*"
                            ],
                            "deny": [],
                            "ignoreCase": true
                        },
                        "max_wait_secs": null
                    },
                    "discriminator": {
                        "propertyName": "method",
                        "mapping": {
                            "ge": "#/definitions/UnityCatalogGEProfilerConfig",
                            "analyze": "#/definitions/UnityCatalogAnalyzeProfilerConfig"
                        }
                    },
                    "oneOf": [
                        {
                            "$ref": "#/definitions/UnityCatalogGEProfilerConfig"
                        },
                        {
                            "$ref": "#/definitions/UnityCatalogAnalyzeProfilerConfig"
                        }
                    ]
                },
                "token": {
                    "title": "Token",
                    "description": "Databricks personal access token",
                    "type": "string"
                },
                "workspace_url": {
                    "title": "Workspace Url",
                    "description": "Databricks workspace url. e.g. https://my-workspace.cloud.databricks.com",
                    "type": "string"
                },
                "warehouse_id": {
                    "title": "Warehouse Id",
                    "description": "SQL Warehouse id, for running queries. If not set, will use the default warehouse.",
                    "type": "string"
                },
                "include_hive_metastore": {
                    "title": "Include Hive Metastore",
                    "description": "Whether to ingest legacy `hive_metastore` catalog. This requires executing queries on SQL warehouse.",
                    "default": true,
                    "type": "boolean"
                },
                "workspace_name": {
                    "title": "Workspace Name",
                    "description": "Name of the workspace. Default to deployment name present in workspace_url",
                    "type": "string"
                },
                "include_metastore": {
                    "title": "Include Metastore",
                    "description": "Whether to ingest the workspace's metastore as a container and include it in all urns. Changing this will affect the urns of all entities in the workspace. This config is deprecated and will be removed in the future, so it is recommended to not set this to `True` for new ingestions. If you have an existing unity catalog ingestion, you'll want to avoid duplicates by soft deleting existing data. If stateful ingestion is enabled, running with `include_metastore: false` should be sufficient. Otherwise, we recommend deleting via the cli: `datahub delete --platform databricks` and re-ingesting with `include_metastore: false`.",
                    "default": false,
                    "type": "boolean"
                },
                "ingest_data_platform_instance_aspect": {
                    "title": "Ingest Data Platform Instance Aspect",
                    "description": "Option to enable/disable ingestion of the data platform instance aspect. The default data platform instance id for a dataset is workspace_name",
                    "default": false,
                    "type": "boolean"
                },
                "catalogs": {
                    "title": "Catalogs",
                    "description": "Fixed list of catalogs to ingest. If not specified, catalogs will be ingested based on `catalog_pattern`.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "catalog_pattern": {
                    "title": "Catalog Pattern",
                    "description": "Regex patterns for catalogs to filter in ingestion. Specify regex to match the full `metastore.catalog` name.",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "allOf": [
                        {
                            "$ref": "#/definitions/AllowDenyPattern"
                        }
                    ]
                },
                "notebook_pattern": {
                    "title": "Notebook Pattern",
                    "description": "Regex patterns for notebooks to filter in ingestion, based on notebook *path*. Specify regex to match the entire notebook path in `/<dir>/.../<name>` format. e.g. to match all notebooks in the root Shared directory, use the regex `/Shared/.*`.",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "allOf": [
                        {
                            "$ref": "#/definitions/AllowDenyPattern"
                        }
                    ]
                },
                "include_table_lineage": {
                    "title": "Include Table Lineage",
                    "description": "Option to enable/disable lineage generation.",
                    "default": true,
                    "type": "boolean"
                },
                "include_external_lineage": {
                    "title": "Include External Lineage",
                    "description": "Option to enable/disable lineage generation for external tables. Only external S3 tables are supported at the moment.",
                    "default": true,
                    "type": "boolean"
                },
                "include_notebooks": {
                    "title": "Include Notebooks",
                    "description": "Ingest notebooks, represented as DataHub datasets.",
                    "default": false,
                    "type": "boolean"
                },
                "include_ownership": {
                    "title": "Include Ownership",
                    "description": "Option to enable/disable ownership generation for metastores, catalogs, schemas, and tables.",
                    "default": false,
                    "type": "boolean"
                },
                "include_column_lineage": {
                    "title": "Include Column Lineage",
                    "description": "Option to enable/disable lineage generation. Currently we have to call a rest call per column to get column level lineage due to the Databrick api which can slow down ingestion. ",
                    "default": true,
                    "type": "boolean"
                },
                "column_lineage_column_limit": {
                    "title": "Column Lineage Column Limit",
                    "description": "Limit the number of columns to get column level lineage. ",
                    "default": 300,
                    "type": "integer"
                },
                "include_usage_statistics": {
                    "title": "Include Usage Statistics",
                    "description": "Generate usage statistics.",
                    "default": true,
                    "type": "boolean"
                },
                "emit_siblings": {
                    "title": "Emit Siblings",
                    "description": "Whether to emit siblings relation with corresponding delta-lake platform's table. If enabled, this will also ingest the corresponding delta-lake table.",
                    "default": true,
                    "type": "boolean"
                },
                "delta_lake_options": {
                    "title": "Delta Lake Options",
                    "description": "Details about the delta lake, incase to emit siblings",
                    "default": {
                        "platform_instance_name": null,
                        "env": "PROD"
                    },
                    "allOf": [
                        {
                            "$ref": "#/definitions/DeltaLakeDetails"
                        }
                    ]
                },
                "scheme": {
                    "title": "Scheme",
                    "default": "databricks",
                    "type": "string"
                }
            },
            "required": [
                "token",
                "workspace_url"
            ],
            "additionalProperties": false
        },
        "mysql": {
            "type": "object",
            "properties": {
                "type": {
                    "type": "string",
                    "enum": [
                        "mysql"
                    ]
                },
                "config": {
                    "$ref": "#/definitions/mysql_config"
                }
            },
            "required": [
                "type",
                "config"
            ]
        },
        "mysql_config": {
            "title": "MySQLConfig",
            "description": "Base configuration class for stateful ingestion for source configs to inherit from.",
            "type": "object",
            "properties": {
                "table_pattern": {
                    "title": "Table Pattern",
                    "description": "Regex patterns for tables to filter in ingestion. Specify regex to match the entire table name in database.schema.table format. e.g. to match all tables starting with customer in Customer database and public schema, use the regex 'Customer.public.customer.*'",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "allOf": [
                        {
                            "$ref": "#/definitions/AllowDenyPattern"
                        }
                    ]
                },
                "view_pattern": {
                    "title": "View Pattern",
                    "description": "Regex patterns for views to filter in ingestion. Note: Defaults to table_pattern if not specified. Specify regex to match the entire view name in database.schema.view format. e.g. to match all views starting with customer in Customer database and public schema, use the regex 'Customer.public.customer.*'",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "allOf": [
                        {
                            "$ref": "#/definitions/AllowDenyPattern"
                        }
                    ]
                },
                "classification": {
                    "title": "Classification",
                    "description": "For details, refer to [Classification](../../../../metadata-ingestion/docs/dev_guides/classification.md).",
                    "default": {
                        "enabled": false,
                        "sample_size": 100,
                        "max_workers": 4,
                        "table_pattern": {
                            "allow": [
                                ".*"
                            ],
                            "deny": [],
                            "ignoreCase": true
                        },
                        "column_pattern": {
                            "allow": [
                                ".*"
                            ],
                            "deny": [],
                            "ignoreCase": true
                        },
                        "info_type_to_term": {},
                        "classifiers": [
                            {
                                "type": "datahub",
                                "config": null
                            }
                        ]
                    },
                    "allOf": [
                        {
                            "$ref": "#/definitions/ClassificationConfig"
                        }
                    ]
                },
                "incremental_lineage": {
                    "title": "Incremental Lineage",
                    "description": "When enabled, emits lineage as incremental to existing lineage already in DataHub. When disabled, re-states lineage on each run.",
                    "default": false,
                    "type": "boolean"
                },
                "convert_urns_to_lowercase": {
                    "title": "Convert Urns To Lowercase",
                    "description": "Whether to convert dataset urns to lowercase.",
                    "default": false,
                    "type": "boolean"
                },
                "env": {
                    "title": "Env",
                    "description": "The environment that all assets produced by this connector belong to",
                    "default": "PROD",
                    "type": "string"
                },
                "platform_instance": {
                    "title": "Platform Instance",
                    "description": "The instance of the platform that all assets produced by this recipe belong to. This should be unique within the platform. See https://datahubproject.io/docs/platform-instances/ for more details.",
                    "type": "string"
                },
                "stateful_ingestion": {
                    "$ref": "#/definitions/StatefulStaleMetadataRemovalConfig"
                },
                "options": {
                    "title": "Options",
                    "description": "Any options specified here will be passed to [SQLAlchemy.create_engine](https://docs.sqlalchemy.org/en/14/core/engines.html#sqlalchemy.create_engine) as kwargs. To set connection arguments in the URL, specify them under `connect_args`.",
                    "type": "object"
                },
                "profile_pattern": {
                    "title": "Profile Pattern",
                    "description": "Regex patterns to filter tables (or specific columns) for profiling during ingestion. Note that only tables allowed by the `table_pattern` will be considered.",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "allOf": [
                        {
                            "$ref": "#/definitions/AllowDenyPattern"
                        }
                    ]
                },
                "domain": {
                    "title": "Domain",
                    "description": "Attach domains to databases, schemas or tables during ingestion using regex patterns. Domain key can be a guid like *urn:li:domain:ec428203-ce86-4db3-985d-5a8ee6df32ba* or a string like \"Marketing\".) If you provide strings, then datahub will attempt to resolve this name to a guid, and will error out if this fails. There can be multiple domain keys specified.",
                    "default": {},
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/definitions/AllowDenyPattern"
                    }
                },
                "include_views": {
                    "title": "Include Views",
                    "description": "Whether views should be ingested.",
                    "default": true,
                    "type": "boolean"
                },
                "include_tables": {
                    "title": "Include Tables",
                    "description": "Whether tables should be ingested.",
                    "default": true,
                    "type": "boolean"
                },
                "include_table_location_lineage": {
                    "title": "Include Table Location Lineage",
                    "description": "If the source supports it, include table lineage to the underlying storage location.",
                    "default": true,
                    "type": "boolean"
                },
                "include_view_lineage": {
                    "title": "Include View Lineage",
                    "description": "Populates view->view and table->view lineage using DataHub's sql parser.",
                    "default": true,
                    "type": "boolean"
                },
                "include_view_column_lineage": {
                    "title": "Include View Column Lineage",
                    "description": "Populates column-level lineage for  view->view and table->view lineage using DataHub's sql parser. Requires `include_view_lineage` to be enabled.",
                    "default": true,
                    "type": "boolean"
                },
                "use_file_backed_cache": {
                    "title": "Use File Backed Cache",
                    "description": "Whether to use a file backed cache for the view definitions.",
                    "default": true,
                    "type": "boolean"
                },
                "profiling": {
                    "title": "Profiling",
                    "default": {
                        "enabled": false,
                        "operation_config": {
                            "lower_freq_profile_enabled": false,
                            "profile_day_of_week": null,
                            "profile_date_of_month": null
                        },
                        "limit": null,
                        "offset": null,
                        "profile_table_level_only": false,
                        "include_field_null_count": true,
                        "include_field_distinct_count": true,
                        "include_field_min_value": true,
                        "include_field_max_value": true,
                        "include_field_mean_value": true,
                        "include_field_median_value": true,
                        "include_field_stddev_value": true,
                        "include_field_quantiles": false,
                        "include_field_distinct_value_frequencies": false,
                        "include_field_histogram": false,
                        "include_field_sample_values": true,
                        "max_workers": 20,
                        "report_dropped_profiles": false,
                        "turn_off_expensive_profiling_metrics": false,
                        "field_sample_values_limit": 20,
                        "max_number_of_fields_to_profile": null,
                        "profile_if_updated_since_days": null,
                        "profile_table_size_limit": 5,
                        "profile_table_row_limit": 5000000,
                        "profile_table_row_count_estimate_only": false,
                        "query_combiner_enabled": true,
                        "catch_exceptions": true,
                        "partition_profiling_enabled": true,
                        "partition_datetime": null,
                        "use_sampling": true,
                        "sample_size": 10000,
                        "profile_external_tables": false,
                        "tags_to_ignore_sampling": null,
                        "profile_nested_fields": false
                    },
                    "allOf": [
                        {
                            "$ref": "#/definitions/GEProfilingConfig"
                        }
                    ]
                },
                "username": {
                    "title": "Username",
                    "description": "username",
                    "type": "string"
                },
                "password": {
                    "title": "Password",
                    "description": "password",
                    "type": "string",
                    "writeOnly": true,
                    "format": "password"
                },
                "host_port": {
                    "title": "Host Port",
                    "description": "MySQL host URL.",
                    "default": "localhost:3306",
                    "type": "string"
                },
                "database": {
                    "title": "Database",
                    "description": "database (catalog)",
                    "type": "string"
                },
                "scheme": {
                    "title": "Scheme",
                    "default": "mysql+pymysql",
                    "type": "string"
                },
                "sqlalchemy_uri": {
                    "title": "Sqlalchemy Uri",
                    "description": "URI of database to connect to. See https://docs.sqlalchemy.org/en/14/core/engines.html#database-urls. Takes precedence over other connection parameters.",
                    "type": "string"
                },
                "database_pattern": {
                    "title": "Database Pattern",
                    "description": "Regex patterns for databases to filter in ingestion.",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "allOf": [
                        {
                            "$ref": "#/definitions/AllowDenyPattern"
                        }
                    ]
                }
            },
            "additionalProperties": false
        },
        "kafka": {
            "type": "object",
            "properties": {
                "type": {
                    "type": "string",
                    "enum": [
                        "kafka"
                    ]
                },
                "config": {
                    "$ref": "#/definitions/kafka_config"
                }
            },
            "required": [
                "type",
                "config"
            ]
        },
        "kafka_config": {
            "title": "KafkaSourceConfig",
            "description": "Base configuration class for stateful ingestion for source configs to inherit from.",
            "type": "object",
            "properties": {
                "convert_urns_to_lowercase": {
                    "title": "Convert Urns To Lowercase",
                    "description": "Whether to convert dataset urns to lowercase.",
                    "default": false,
                    "type": "boolean"
                },
                "env": {
                    "title": "Env",
                    "description": "The environment that all assets produced by this connector belong to",
                    "default": "PROD",
                    "type": "string"
                },
                "platform_instance": {
                    "title": "Platform Instance",
                    "description": "The instance of the platform that all assets produced by this recipe belong to. This should be unique within the platform. See https://datahubproject.io/docs/platform-instances/ for more details.",
                    "type": "string"
                },
                "stateful_ingestion": {
                    "$ref": "#/definitions/StatefulStaleMetadataRemovalConfig"
                },
                "connection": {
                    "title": "Connection",
                    "default": {
                        "bootstrap": "localhost:9092",
                        "schema_registry_url": "http://localhost:8080/schema-registry/api/",
                        "schema_registry_config": {},
                        "client_timeout_seconds": 60,
                        "consumer_config": {}
                    },
                    "allOf": [
                        {
                            "$ref": "#/definitions/KafkaConsumerConnectionConfig"
                        }
                    ]
                },
                "topic_patterns": {
                    "title": "Topic Patterns",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [
                            "^_.*"
                        ],
                        "ignoreCase": true
                    },
                    "allOf": [
                        {
                            "$ref": "#/definitions/AllowDenyPattern"
                        }
                    ]
                },
                "domain": {
                    "title": "Domain",
                    "description": "A map of domain names to allow deny patterns. Domains can be urn-based (`urn:li:domain:13ae4d85-d955-49fc-8474-9004c663a810`) or bare (`13ae4d85-d955-49fc-8474-9004c663a810`).",
                    "default": {},
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/definitions/AllowDenyPattern"
                    }
                },
                "topic_subject_map": {
                    "title": "Topic Subject Map",
                    "description": "Provides the mapping for the `key` and the `value` schemas of a topic to the corresponding schema registry subject name. Each entry of this map has the form `<topic_name>-key`:`<schema_registry_subject_name_for_key_schema>` and `<topic_name>-value`:`<schema_registry_subject_name_for_value_schema>` for the key and the value schemas associated with the topic, respectively. This parameter is mandatory when the [RecordNameStrategy](https://docs.confluent.io/platform/current/schema-registry/serdes-develop/index.html#how-the-naming-strategies-work) is used as the subject naming strategy in the kafka schema registry. NOTE: When provided, this overrides the default subject name resolution even when the `TopicNameStrategy` or the `TopicRecordNameStrategy` are used.",
                    "default": {},
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "schema_registry_class": {
                    "title": "Schema Registry Class",
                    "description": "The fully qualified implementation class(custom) that implements the KafkaSchemaRegistryBase interface.",
                    "default": "datahub.ingestion.source.confluent_schema_registry.ConfluentSchemaRegistry",
                    "type": "string"
                },
                "schema_tags_field": {
                    "title": "Schema Tags Field",
                    "description": "The field name in the schema metadata that contains the tags to be added to the dataset.",
                    "default": "tags",
                    "type": "string"
                },
                "enable_meta_mapping": {
                    "title": "Enable Meta Mapping",
                    "description": "When enabled, applies the mappings that are defined through the meta_mapping directives.",
                    "default": true,
                    "type": "boolean"
                },
                "meta_mapping": {
                    "title": "Meta Mapping",
                    "description": "mapping rules that will be executed against top-level schema properties. Refer to the section below on meta automated mappings.",
                    "default": {},
                    "type": "object"
                },
                "field_meta_mapping": {
                    "title": "Field Meta Mapping",
                    "description": "mapping rules that will be executed against field-level schema properties. Refer to the section below on meta automated mappings.",
                    "default": {},
                    "type": "object"
                },
                "strip_user_ids_from_email": {
                    "title": "Strip User Ids From Email",
                    "description": "Whether or not to strip email id while adding owners using meta mappings.",
                    "default": false,
                    "type": "boolean"
                },
                "tag_prefix": {
                    "title": "Tag Prefix",
                    "description": "Prefix added to tags during ingestion.",
                    "default": "",
                    "type": "string"
                },
                "ignore_warnings_on_schema_type": {
                    "title": "Ignore Warnings On Schema Type",
                    "description": "Disables warnings reported for non-AVRO/Protobuf value or key schemas if set.",
                    "default": false,
                    "type": "boolean"
                },
                "disable_topic_record_naming_strategy": {
                    "title": "Disable Topic Record Naming Strategy",
                    "description": "Disables the utilization of the TopicRecordNameStrategy for Schema Registry subjects. For more information, visit: https://docs.confluent.io/platform/current/schema-registry/serdes-develop/index.html#handling-differences-between-preregistered-and-client-derived-schemas:~:text=io.confluent.kafka.serializers.subject.TopicRecordNameStrategy",
                    "default": false,
                    "type": "boolean"
                },
                "ingest_schemas_as_entities": {
                    "title": "Ingest Schemas As Entities",
                    "description": "Enables ingesting schemas from schema registry as separate entities, in addition to the topics",
                    "default": false,
                    "type": "boolean"
                }
            },
            "additionalProperties": false
        },
        "delta-lake": {
            "type": "object",
            "properties": {
                "type": {
                    "type": "string",
                    "enum": [
                        "delta-lake"
                    ]
                },
                "config": {
                    "$ref": "#/definitions/delta-lake_config"
                }
            },
            "required": [
                "type",
                "config"
            ]
        },
        "delta-lake_config": {
            "title": "DeltaLakeSourceConfig",
            "description": "Any source that connects to a platform should inherit this class",
            "type": "object",
            "properties": {
                "env": {
                    "title": "Env",
                    "description": "The environment that all assets produced by this connector belong to",
                    "default": "PROD",
                    "type": "string"
                },
                "platform_instance": {
                    "title": "Platform Instance",
                    "description": "The instance of the platform that all assets produced by this recipe belong to",
                    "type": "string"
                },
                "base_path": {
                    "title": "Base Path",
                    "description": "Path to table (s3 or local file system). If path is not a delta table path then all subfolders will be scanned to detect and ingest delta tables.",
                    "type": "string"
                },
                "relative_path": {
                    "title": "Relative Path",
                    "description": "If set, delta-tables will be searched at location '<base_path>/<relative_path>' and URNs will be created using relative_path only.",
                    "type": "string"
                },
                "platform": {
                    "title": "Platform",
                    "description": "The platform that this source connects to",
                    "default": "delta-lake",
                    "enum": [
                        "delta-lake"
                    ],
                    "type": "string"
                },
                "table_pattern": {
                    "title": "Table Pattern",
                    "description": "regex patterns for tables to filter in ingestion.",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "allOf": [
                        {
                            "$ref": "#/definitions/AllowDenyPattern"
                        }
                    ]
                },
                "version_history_lookback": {
                    "title": "Version History Lookback",
                    "description": "Number of previous version histories to be ingested. Defaults to 1. If set to -1 all version history will be ingested.",
                    "default": 1,
                    "type": "integer"
                },
                "require_files": {
                    "title": "Require Files",
                    "description": "Whether DeltaTable should track files. Consider setting this to `False` for large delta tables, resulting in significant memory reduction for ingestion process.When set to `False`, number_of_files in delta table can not be reported.",
                    "default": true,
                    "type": "boolean"
                },
                "s3": {
                    "$ref": "#/definitions/S3"
                }
            },
            "required": [
                "base_path"
            ],
            "additionalProperties": false
        },
        "feast": {
            "type": "object",
            "properties": {
                "type": {
                    "type": "string",
                    "enum": [
                        "feast"
                    ]
                },
                "config": {
                    "$ref": "#/definitions/feast_config"
                }
            },
            "required": [
                "type",
                "config"
            ]
        },
        "feast_config": {
            "title": "FeastRepositorySourceConfig",
            "type": "object",
            "properties": {
                "path": {
                    "title": "Path",
                    "description": "Path to Feast repository",
                    "type": "string"
                },
                "fs_yaml_file": {
                    "title": "Fs Yaml File",
                    "description": "Path to the `feature_store.yaml` file used to configure the feature store",
                    "type": "string"
                },
                "environment": {
                    "title": "Environment",
                    "description": "Environment to use when constructing URNs",
                    "default": "PROD",
                    "type": "string"
                },
                "owner_mappings": {
                    "title": "Owner Mappings",
                    "description": "Mapping of owner names to owner types",
                    "type": "array",
                    "items": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    }
                },
                "enable_owner_extraction": {
                    "title": "Enable Owner Extraction",
                    "description": "If this is disabled, then we NEVER try to map owners. If this is enabled, then owner_mappings is REQUIRED to extract ownership.",
                    "default": false,
                    "type": "boolean"
                },
                "enable_tag_extraction": {
                    "title": "Enable Tag Extraction",
                    "description": "If this is disabled, then we NEVER try to extract tags.",
                    "default": false,
                    "type": "boolean"
                }
            },
            "required": [
                "path"
            ],
            "additionalProperties": false
        },
        "druid": {
            "type": "object",
            "properties": {
                "type": {
                    "type": "string",
                    "enum": [
                        "druid"
                    ]
                },
                "config": {
                    "$ref": "#/definitions/druid_config"
                }
            },
            "required": [
                "type",
                "config"
            ]
        },
        "druid_config": {
            "title": "DruidConfig",
            "description": "Base configuration class for stateful ingestion for source configs to inherit from.",
            "type": "object",
            "properties": {
                "schema_pattern": {
                    "title": "Schema Pattern",
                    "description": "regex patterns for schemas to filter in ingestion.",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [
                            "^(lookup|sysgit|view).*"
                        ],
                        "ignoreCase": true
                    },
                    "allOf": [
                        {
                            "$ref": "#/definitions/AllowDenyPattern"
                        }
                    ]
                },
                "table_pattern": {
                    "title": "Table Pattern",
                    "description": "Regex patterns for tables to filter in ingestion. Specify regex to match the entire table name in database.schema.table format. e.g. to match all tables starting with customer in Customer database and public schema, use the regex 'Customer.public.customer.*'",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "allOf": [
                        {
                            "$ref": "#/definitions/AllowDenyPattern"
                        }
                    ]
                },
                "view_pattern": {
                    "title": "View Pattern",
                    "description": "Regex patterns for views to filter in ingestion. Note: Defaults to table_pattern if not specified. Specify regex to match the entire view name in database.schema.view format. e.g. to match all views starting with customer in Customer database and public schema, use the regex 'Customer.public.customer.*'",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "allOf": [
                        {
                            "$ref": "#/definitions/AllowDenyPattern"
                        }
                    ]
                },
                "classification": {
                    "title": "Classification",
                    "description": "For details, refer to [Classification](../../../../metadata-ingestion/docs/dev_guides/classification.md).",
                    "default": {
                        "enabled": false,
                        "sample_size": 100,
                        "max_workers": 4,
                        "table_pattern": {
                            "allow": [
                                ".*"
                            ],
                            "deny": [],
                            "ignoreCase": true
                        },
                        "column_pattern": {
                            "allow": [
                                ".*"
                            ],
                            "deny": [],
                            "ignoreCase": true
                        },
                        "info_type_to_term": {},
                        "classifiers": [
                            {
                                "type": "datahub",
                                "config": null
                            }
                        ]
                    },
                    "allOf": [
                        {
                            "$ref": "#/definitions/ClassificationConfig"
                        }
                    ]
                },
                "incremental_lineage": {
                    "title": "Incremental Lineage",
                    "description": "When enabled, emits lineage as incremental to existing lineage already in DataHub. When disabled, re-states lineage on each run.",
                    "default": false,
                    "type": "boolean"
                },
                "convert_urns_to_lowercase": {
                    "title": "Convert Urns To Lowercase",
                    "description": "Whether to convert dataset urns to lowercase.",
                    "default": false,
                    "type": "boolean"
                },
                "env": {
                    "title": "Env",
                    "description": "The environment that all assets produced by this connector belong to",
                    "default": "PROD",
                    "type": "string"
                },
                "platform_instance": {
                    "title": "Platform Instance",
                    "description": "The instance of the platform that all assets produced by this recipe belong to. This should be unique within the platform. See https://datahubproject.io/docs/platform-instances/ for more details.",
                    "type": "string"
                },
                "stateful_ingestion": {
                    "$ref": "#/definitions/StatefulStaleMetadataRemovalConfig"
                },
                "options": {
                    "title": "Options",
                    "description": "Any options specified here will be passed to [SQLAlchemy.create_engine](https://docs.sqlalchemy.org/en/14/core/engines.html#sqlalchemy.create_engine) as kwargs. To set connection arguments in the URL, specify them under `connect_args`.",
                    "type": "object"
                },
                "profile_pattern": {
                    "title": "Profile Pattern",
                    "description": "Regex patterns to filter tables (or specific columns) for profiling during ingestion. Note that only tables allowed by the `table_pattern` will be considered.",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "allOf": [
                        {
                            "$ref": "#/definitions/AllowDenyPattern"
                        }
                    ]
                },
                "domain": {
                    "title": "Domain",
                    "description": "Attach domains to databases, schemas or tables during ingestion using regex patterns. Domain key can be a guid like *urn:li:domain:ec428203-ce86-4db3-985d-5a8ee6df32ba* or a string like \"Marketing\".) If you provide strings, then datahub will attempt to resolve this name to a guid, and will error out if this fails. There can be multiple domain keys specified.",
                    "default": {},
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/definitions/AllowDenyPattern"
                    }
                },
                "include_views": {
                    "title": "Include Views",
                    "description": "Whether views should be ingested.",
                    "default": true,
                    "type": "boolean"
                },
                "include_tables": {
                    "title": "Include Tables",
                    "description": "Whether tables should be ingested.",
                    "default": true,
                    "type": "boolean"
                },
                "include_table_location_lineage": {
                    "title": "Include Table Location Lineage",
                    "description": "If the source supports it, include table lineage to the underlying storage location.",
                    "default": true,
                    "type": "boolean"
                },
                "include_view_lineage": {
                    "title": "Include View Lineage",
                    "description": "Populates view->view and table->view lineage using DataHub's sql parser.",
                    "default": true,
                    "type": "boolean"
                },
                "include_view_column_lineage": {
                    "title": "Include View Column Lineage",
                    "description": "Populates column-level lineage for  view->view and table->view lineage using DataHub's sql parser. Requires `include_view_lineage` to be enabled.",
                    "default": true,
                    "type": "boolean"
                },
                "use_file_backed_cache": {
                    "title": "Use File Backed Cache",
                    "description": "Whether to use a file backed cache for the view definitions.",
                    "default": true,
                    "type": "boolean"
                },
                "profiling": {
                    "title": "Profiling",
                    "default": {
                        "enabled": false,
                        "operation_config": {
                            "lower_freq_profile_enabled": false,
                            "profile_day_of_week": null,
                            "profile_date_of_month": null
                        },
                        "limit": null,
                        "offset": null,
                        "profile_table_level_only": false,
                        "include_field_null_count": true,
                        "include_field_distinct_count": true,
                        "include_field_min_value": true,
                        "include_field_max_value": true,
                        "include_field_mean_value": true,
                        "include_field_median_value": true,
                        "include_field_stddev_value": true,
                        "include_field_quantiles": false,
                        "include_field_distinct_value_frequencies": false,
                        "include_field_histogram": false,
                        "include_field_sample_values": true,
                        "max_workers": 20,
                        "report_dropped_profiles": false,
                        "turn_off_expensive_profiling_metrics": false,
                        "field_sample_values_limit": 20,
                        "max_number_of_fields_to_profile": null,
                        "profile_if_updated_since_days": null,
                        "profile_table_size_limit": 5,
                        "profile_table_row_limit": 5000000,
                        "profile_table_row_count_estimate_only": false,
                        "query_combiner_enabled": true,
                        "catch_exceptions": true,
                        "partition_profiling_enabled": true,
                        "partition_datetime": null,
                        "use_sampling": true,
                        "sample_size": 10000,
                        "profile_external_tables": false,
                        "tags_to_ignore_sampling": null,
                        "profile_nested_fields": false
                    },
                    "allOf": [
                        {
                            "$ref": "#/definitions/GEProfilingConfig"
                        }
                    ]
                },
                "username": {
                    "title": "Username",
                    "description": "username",
                    "type": "string"
                },
                "password": {
                    "title": "Password",
                    "description": "password",
                    "type": "string",
                    "writeOnly": true,
                    "format": "password"
                },
                "host_port": {
                    "title": "Host Port",
                    "description": "host URL",
                    "type": "string"
                },
                "database": {
                    "title": "Database",
                    "description": "database (catalog)",
                    "type": "string"
                },
                "scheme": {
                    "title": "Scheme",
                    "default": "druid",
                    "type": "string"
                },
                "sqlalchemy_uri": {
                    "title": "Sqlalchemy Uri",
                    "description": "URI of database to connect to. See https://docs.sqlalchemy.org/en/14/core/engines.html#database-urls. Takes precedence over other connection parameters.",
                    "type": "string"
                }
            },
            "required": [
                "host_port"
            ],
            "additionalProperties": false
        },
        "clickhouse": {
            "type": "object",
            "properties": {
                "type": {
                    "type": "string",
                    "enum": [
                        "clickhouse"
                    ]
                },
                "config": {
                    "$ref": "#/definitions/clickhouse_config"
                }
            },
            "required": [
                "type",
                "config"
            ]
        },
        "clickhouse_config": {
            "title": "ClickHouseConfig",
            "description": "Base configuration class for stateful ingestion for source configs to inherit from.",
            "type": "object",
            "properties": {
                "env": {
                    "title": "Env",
                    "description": "The environment that all assets produced by this connector belong to",
                    "default": "PROD",
                    "type": "string"
                },
                "platform_instance_map": {
                    "title": "Platform Instance Map",
                    "description": "A holder for platform -> platform_instance mappings to generate correct dataset urns",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "bucket_duration": {
                    "description": "Size of the time window to aggregate usage stats.",
                    "default": "DAY",
                    "allOf": [
                        {
                            "$ref": "#/definitions/BucketDuration"
                        }
                    ]
                },
                "end_time": {
                    "title": "End Time",
                    "description": "Latest date of lineage/usage to consider. Default: Current time in UTC",
                    "type": "string",
                    "format": "date-time"
                },
                "start_time": {
                    "title": "Start Time",
                    "description": "Earliest date of lineage/usage to consider. Default: Last full day in UTC (or hour, depending on `bucket_duration`). You can also specify relative time with respect to end_time such as '-7 days' Or '-7d'.",
                    "type": "string",
                    "format": "date-time"
                },
                "table_pattern": {
                    "title": "Table Pattern",
                    "description": "Regex patterns for tables to filter in ingestion. Specify regex to match the entire table name in database.schema.table format. e.g. to match all tables starting with customer in Customer database and public schema, use the regex 'Customer.public.customer.*'",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "allOf": [
                        {
                            "$ref": "#/definitions/AllowDenyPattern"
                        }
                    ]
                },
                "view_pattern": {
                    "title": "View Pattern",
                    "description": "Regex patterns for views to filter in ingestion. Note: Defaults to table_pattern if not specified. Specify regex to match the entire view name in database.schema.view format. e.g. to match all views starting with customer in Customer database and public schema, use the regex 'Customer.public.customer.*'",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "allOf": [
                        {
                            "$ref": "#/definitions/AllowDenyPattern"
                        }
                    ]
                },
                "classification": {
                    "title": "Classification",
                    "description": "For details, refer to [Classification](../../../../metadata-ingestion/docs/dev_guides/classification.md).",
                    "default": {
                        "enabled": false,
                        "sample_size": 100,
                        "max_workers": 4,
                        "table_pattern": {
                            "allow": [
                                ".*"
                            ],
                            "deny": [],
                            "ignoreCase": true
                        },
                        "column_pattern": {
                            "allow": [
                                ".*"
                            ],
                            "deny": [],
                            "ignoreCase": true
                        },
                        "info_type_to_term": {},
                        "classifiers": [
                            {
                                "type": "datahub",
                                "config": null
                            }
                        ]
                    },
                    "allOf": [
                        {
                            "$ref": "#/definitions/ClassificationConfig"
                        }
                    ]
                },
                "incremental_lineage": {
                    "title": "Incremental Lineage",
                    "description": "When enabled, emits lineage as incremental to existing lineage already in DataHub. When disabled, re-states lineage on each run.",
                    "default": false,
                    "type": "boolean"
                },
                "convert_urns_to_lowercase": {
                    "title": "Convert Urns To Lowercase",
                    "description": "Whether to convert dataset urns to lowercase.",
                    "default": false,
                    "type": "boolean"
                },
                "platform_instance": {
                    "title": "Platform Instance",
                    "description": "The instance of the platform that all assets produced by this recipe belong to. This should be unique within the platform. See https://datahubproject.io/docs/platform-instances/ for more details.",
                    "type": "string"
                },
                "stateful_ingestion": {
                    "$ref": "#/definitions/StatefulStaleMetadataRemovalConfig"
                },
                "options": {
                    "title": "Options",
                    "description": "Any options specified here will be passed to [SQLAlchemy.create_engine](https://docs.sqlalchemy.org/en/14/core/engines.html#sqlalchemy.create_engine) as kwargs. To set connection arguments in the URL, specify them under `connect_args`.",
                    "type": "object"
                },
                "profile_pattern": {
                    "title": "Profile Pattern",
                    "description": "Regex patterns to filter tables (or specific columns) for profiling during ingestion. Note that only tables allowed by the `table_pattern` will be considered.",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "allOf": [
                        {
                            "$ref": "#/definitions/AllowDenyPattern"
                        }
                    ]
                },
                "domain": {
                    "title": "Domain",
                    "description": "Attach domains to databases, schemas or tables during ingestion using regex patterns. Domain key can be a guid like *urn:li:domain:ec428203-ce86-4db3-985d-5a8ee6df32ba* or a string like \"Marketing\".) If you provide strings, then datahub will attempt to resolve this name to a guid, and will error out if this fails. There can be multiple domain keys specified.",
                    "default": {},
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/definitions/AllowDenyPattern"
                    }
                },
                "include_views": {
                    "title": "Include Views",
                    "description": "Whether views should be ingested.",
                    "default": true,
                    "type": "boolean"
                },
                "include_tables": {
                    "title": "Include Tables",
                    "description": "Whether tables should be ingested.",
                    "default": true,
                    "type": "boolean"
                },
                "include_table_location_lineage": {
                    "title": "Include Table Location Lineage",
                    "description": "If the source supports it, include table lineage to the underlying storage location.",
                    "default": true,
                    "type": "boolean"
                },
                "include_view_lineage": {
                    "title": "Include View Lineage",
                    "description": "Populates view->view and table->view lineage using DataHub's sql parser.",
                    "default": true,
                    "type": "boolean"
                },
                "include_view_column_lineage": {
                    "title": "Include View Column Lineage",
                    "description": "Populates column-level lineage for  view->view and table->view lineage using DataHub's sql parser. Requires `include_view_lineage` to be enabled.",
                    "default": true,
                    "type": "boolean"
                },
                "use_file_backed_cache": {
                    "title": "Use File Backed Cache",
                    "description": "Whether to use a file backed cache for the view definitions.",
                    "default": true,
                    "type": "boolean"
                },
                "profiling": {
                    "title": "Profiling",
                    "default": {
                        "enabled": false,
                        "operation_config": {
                            "lower_freq_profile_enabled": false,
                            "profile_day_of_week": null,
                            "profile_date_of_month": null
                        },
                        "limit": null,
                        "offset": null,
                        "profile_table_level_only": false,
                        "include_field_null_count": true,
                        "include_field_distinct_count": true,
                        "include_field_min_value": true,
                        "include_field_max_value": true,
                        "include_field_mean_value": true,
                        "include_field_median_value": true,
                        "include_field_stddev_value": true,
                        "include_field_quantiles": false,
                        "include_field_distinct_value_frequencies": false,
                        "include_field_histogram": false,
                        "include_field_sample_values": true,
                        "max_workers": 20,
                        "report_dropped_profiles": false,
                        "turn_off_expensive_profiling_metrics": false,
                        "field_sample_values_limit": 20,
                        "max_number_of_fields_to_profile": null,
                        "profile_if_updated_since_days": null,
                        "profile_table_size_limit": 5,
                        "profile_table_row_limit": 5000000,
                        "profile_table_row_count_estimate_only": false,
                        "query_combiner_enabled": true,
                        "catch_exceptions": true,
                        "partition_profiling_enabled": true,
                        "partition_datetime": null,
                        "use_sampling": true,
                        "sample_size": 10000,
                        "profile_external_tables": false,
                        "tags_to_ignore_sampling": null,
                        "profile_nested_fields": false
                    },
                    "allOf": [
                        {
                            "$ref": "#/definitions/GEProfilingConfig"
                        }
                    ]
                },
                "username": {
                    "title": "Username",
                    "description": "username",
                    "type": "string"
                },
                "password": {
                    "title": "Password",
                    "description": "password",
                    "default": "",
                    "type": "string",
                    "writeOnly": true,
                    "format": "password"
                },
                "host_port": {
                    "title": "Host Port",
                    "description": "ClickHouse host URL.",
                    "default": "localhost:8123",
                    "type": "string"
                },
                "database": {
                    "title": "Database",
                    "description": "database (catalog)",
                    "type": "string"
                },
                "sqlalchemy_uri": {
                    "title": "Sqlalchemy Uri",
                    "description": "URI of database to connect to. See https://docs.sqlalchemy.org/en/14/core/engines.html#database-urls. Takes precedence over other connection parameters.",
                    "type": "string"
                },
                "database_pattern": {
                    "title": "Database Pattern",
                    "description": "Regex patterns for databases to filter in ingestion.",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "allOf": [
                        {
                            "$ref": "#/definitions/AllowDenyPattern"
                        }
                    ]
                },
                "secure": {
                    "title": "Secure",
                    "type": "boolean"
                },
                "protocol": {
                    "title": "Protocol",
                    "type": "string"
                },
                "uri_opts": {
                    "title": "Uri Opts",
                    "description": "The part of the URI and it's used to provide additional configuration options or parameters for the database connection.",
                    "default": {},
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "include_table_lineage": {
                    "title": "Include Table Lineage",
                    "description": "Whether table lineage should be ingested.",
                    "default": true,
                    "type": "boolean"
                },
                "include_materialized_views": {
                    "title": "Include Materialized Views",
                    "default": true,
                    "type": "boolean"
                }
            },
            "additionalProperties": false
        },
        "redshift": {
            "type": "object",
            "properties": {
                "type": {
                    "type": "string",
                    "enum": [
                        "redshift"
                    ]
                },
                "config": {
                    "$ref": "#/definitions/redshift_config"
                }
            },
            "required": [
                "type",
                "config"
            ]
        },
        "redshift_config": {
            "title": "RedshiftConfig",
            "description": "Base configuration class for stateful ingestion for source configs to inherit from.",
            "type": "object",
            "properties": {
                "classification": {
                    "title": "Classification",
                    "description": "For details, refer to [Classification](../../../../metadata-ingestion/docs/dev_guides/classification.md).",
                    "default": {
                        "enabled": false,
                        "sample_size": 100,
                        "max_workers": 4,
                        "table_pattern": {
                            "allow": [
                                ".*"
                            ],
                            "deny": [],
                            "ignoreCase": true
                        },
                        "column_pattern": {
                            "allow": [
                                ".*"
                            ],
                            "deny": [],
                            "ignoreCase": true
                        },
                        "info_type_to_term": {},
                        "classifiers": [
                            {
                                "type": "datahub",
                                "config": null
                            }
                        ]
                    },
                    "allOf": [
                        {
                            "$ref": "#/definitions/ClassificationConfig"
                        }
                    ]
                },
                "enable_stateful_profiling": {
                    "title": "Enable Stateful Profiling",
                    "description": "Enable stateful profiling. This will store profiling timestamps per dataset after successful profiling. and will not run profiling again in subsequent run if table has not been updated. ",
                    "default": true,
                    "type": "boolean"
                },
                "enable_stateful_lineage_ingestion": {
                    "title": "Enable Stateful Lineage Ingestion",
                    "description": "Enable stateful lineage ingestion. This will store lineage window timestamps after successful lineage ingestion. and will not run lineage ingestion for same timestamps in subsequent run. ",
                    "default": true,
                    "type": "boolean"
                },
                "bucket_duration": {
                    "description": "Size of the time window to aggregate usage stats.",
                    "default": "DAY",
                    "allOf": [
                        {
                            "$ref": "#/definitions/BucketDuration"
                        }
                    ]
                },
                "end_time": {
                    "title": "End Time",
                    "description": "Latest date of lineage/usage to consider. Default: Current time in UTC",
                    "type": "string",
                    "format": "date-time"
                },
                "start_time": {
                    "title": "Start Time",
                    "description": "Earliest date of lineage/usage to consider. Default: Last full day in UTC (or hour, depending on `bucket_duration`). You can also specify relative time with respect to end_time such as '-7 days' Or '-7d'.",
                    "type": "string",
                    "format": "date-time"
                },
                "enable_stateful_usage_ingestion": {
                    "title": "Enable Stateful Usage Ingestion",
                    "description": "Enable stateful lineage ingestion. This will store usage window timestamps after successful usage ingestion. and will not run usage ingestion for same timestamps in subsequent run. ",
                    "default": true,
                    "type": "boolean"
                },
                "top_n_queries": {
                    "title": "Top N Queries",
                    "description": "Number of top queries to save to each table.",
                    "default": 10,
                    "exclusiveMinimum": 0,
                    "type": "integer"
                },
                "user_email_pattern": {
                    "title": "User Email Pattern",
                    "description": "regex patterns for user emails to filter in usage.",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "allOf": [
                        {
                            "$ref": "#/definitions/AllowDenyPattern"
                        }
                    ]
                },
                "include_operational_stats": {
                    "title": "Include Operational Stats",
                    "description": "Whether to display operational stats.",
                    "default": true,
                    "type": "boolean"
                },
                "include_read_operational_stats": {
                    "title": "Include Read Operational Stats",
                    "description": "Whether to report read operational stats. Experimental.",
                    "default": false,
                    "type": "boolean"
                },
                "format_sql_queries": {
                    "title": "Format Sql Queries",
                    "description": "Whether to format sql queries",
                    "default": false,
                    "type": "boolean"
                },
                "include_top_n_queries": {
                    "title": "Include Top N Queries",
                    "description": "Whether to ingest the top_n_queries.",
                    "default": true,
                    "type": "boolean"
                },
                "email_domain": {
                    "title": "Email Domain",
                    "description": "Email domain of your organisation so users can be displayed on UI appropriately.",
                    "type": "string"
                },
                "incremental_lineage": {
                    "title": "Incremental Lineage",
                    "description": "When enabled, emits lineage as incremental to existing lineage already in DataHub. When disabled, re-states lineage on each run.",
                    "default": false,
                    "type": "boolean"
                },
                "s3_lineage_config": {
                    "title": "S3 Lineage Config",
                    "description": "Common config for S3 lineage generation",
                    "default": {
                        "path_specs": [],
                        "strip_urls": true,
                        "ignore_non_path_spec_path": false
                    },
                    "allOf": [
                        {
                            "$ref": "#/definitions/S3LineageProviderConfig"
                        }
                    ]
                },
                "env": {
                    "title": "Env",
                    "description": "The environment that all assets produced by this connector belong to",
                    "default": "PROD",
                    "type": "string"
                },
                "platform_instance_map": {
                    "title": "Platform Instance Map",
                    "description": "A holder for platform -> platform_instance mappings to generate correct dataset urns",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "schema_pattern": {
                    "title": "Schema Pattern",
                    "description": "Regex patterns for schemas to filter in ingestion. Specify regex to only match the schema name. e.g. to match all tables in schema analytics, use the regex 'analytics'",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "allOf": [
                        {
                            "$ref": "#/definitions/AllowDenyPattern"
                        }
                    ]
                },
                "table_pattern": {
                    "title": "Table Pattern",
                    "description": "Regex patterns for tables to filter in ingestion. Specify regex to match the entire table name in database.schema.table format. e.g. to match all tables starting with customer in Customer database and public schema, use the regex 'Customer.public.customer.*'",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "allOf": [
                        {
                            "$ref": "#/definitions/AllowDenyPattern"
                        }
                    ]
                },
                "view_pattern": {
                    "title": "View Pattern",
                    "description": "Regex patterns for views to filter in ingestion. Note: Defaults to table_pattern if not specified. Specify regex to match the entire view name in database.schema.view format. e.g. to match all views starting with customer in Customer database and public schema, use the regex 'Customer.public.customer.*'",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "allOf": [
                        {
                            "$ref": "#/definitions/AllowDenyPattern"
                        }
                    ]
                },
                "convert_urns_to_lowercase": {
                    "title": "Convert Urns To Lowercase",
                    "description": "Whether to convert dataset urns to lowercase.",
                    "default": false,
                    "type": "boolean"
                },
                "platform_instance": {
                    "title": "Platform Instance",
                    "description": "The instance of the platform that all assets produced by this recipe belong to. This should be unique within the platform. See https://datahubproject.io/docs/platform-instances/ for more details.",
                    "type": "string"
                },
                "stateful_ingestion": {
                    "$ref": "#/definitions/StatefulStaleMetadataRemovalConfig"
                },
                "options": {
                    "title": "Options",
                    "description": "Any options specified here will be passed to [SQLAlchemy.create_engine](https://docs.sqlalchemy.org/en/14/core/engines.html#sqlalchemy.create_engine) as kwargs. To set connection arguments in the URL, specify them under `connect_args`.",
                    "type": "object"
                },
                "profile_pattern": {
                    "title": "Profile Pattern",
                    "description": "Regex patterns to filter tables (or specific columns) for profiling during ingestion. Note that only tables allowed by the `table_pattern` will be considered.",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "allOf": [
                        {
                            "$ref": "#/definitions/AllowDenyPattern"
                        }
                    ]
                },
                "domain": {
                    "title": "Domain",
                    "description": "Attach domains to databases, schemas or tables during ingestion using regex patterns. Domain key can be a guid like *urn:li:domain:ec428203-ce86-4db3-985d-5a8ee6df32ba* or a string like \"Marketing\".) If you provide strings, then datahub will attempt to resolve this name to a guid, and will error out if this fails. There can be multiple domain keys specified.",
                    "default": {},
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/definitions/AllowDenyPattern"
                    }
                },
                "include_views": {
                    "title": "Include Views",
                    "description": "Whether views should be ingested.",
                    "default": true,
                    "type": "boolean"
                },
                "include_tables": {
                    "title": "Include Tables",
                    "description": "Whether tables should be ingested.",
                    "default": true,
                    "type": "boolean"
                },
                "include_table_location_lineage": {
                    "title": "Include Table Location Lineage",
                    "description": "If the source supports it, include table lineage to the underlying storage location.",
                    "default": true,
                    "type": "boolean"
                },
                "include_view_lineage": {
                    "title": "Include View Lineage",
                    "description": "Populates view->view and table->view lineage using DataHub's sql parser.",
                    "default": true,
                    "type": "boolean"
                },
                "include_view_column_lineage": {
                    "title": "Include View Column Lineage",
                    "description": "Populates column-level lineage for  view->view and table->view lineage using DataHub's sql parser. Requires `include_view_lineage` to be enabled.",
                    "default": true,
                    "type": "boolean"
                },
                "use_file_backed_cache": {
                    "title": "Use File Backed Cache",
                    "description": "Whether to use a file backed cache for the view definitions.",
                    "default": true,
                    "type": "boolean"
                },
                "profiling": {
                    "title": "Profiling",
                    "default": {
                        "enabled": false,
                        "operation_config": {
                            "lower_freq_profile_enabled": false,
                            "profile_day_of_week": null,
                            "profile_date_of_month": null
                        },
                        "limit": null,
                        "offset": null,
                        "profile_table_level_only": false,
                        "include_field_null_count": true,
                        "include_field_distinct_count": true,
                        "include_field_min_value": true,
                        "include_field_max_value": true,
                        "include_field_mean_value": true,
                        "include_field_median_value": true,
                        "include_field_stddev_value": true,
                        "include_field_quantiles": false,
                        "include_field_distinct_value_frequencies": false,
                        "include_field_histogram": false,
                        "include_field_sample_values": true,
                        "max_workers": 20,
                        "report_dropped_profiles": false,
                        "turn_off_expensive_profiling_metrics": false,
                        "field_sample_values_limit": 20,
                        "max_number_of_fields_to_profile": null,
                        "profile_if_updated_since_days": null,
                        "profile_table_size_limit": 5,
                        "profile_table_row_limit": 5000000,
                        "profile_table_row_count_estimate_only": false,
                        "query_combiner_enabled": true,
                        "catch_exceptions": true,
                        "partition_profiling_enabled": true,
                        "partition_datetime": null,
                        "use_sampling": true,
                        "sample_size": 10000,
                        "profile_external_tables": false,
                        "tags_to_ignore_sampling": null,
                        "profile_nested_fields": false
                    },
                    "allOf": [
                        {
                            "$ref": "#/definitions/GEProfilingConfig"
                        }
                    ]
                },
                "username": {
                    "title": "Username",
                    "description": "username",
                    "type": "string"
                },
                "password": {
                    "title": "Password",
                    "description": "password",
                    "type": "string",
                    "writeOnly": true,
                    "format": "password"
                },
                "host_port": {
                    "title": "Host Port",
                    "description": "host URL",
                    "type": "string"
                },
                "database": {
                    "title": "Database",
                    "description": "database",
                    "default": "dev",
                    "type": "string"
                },
                "sqlalchemy_uri": {
                    "title": "Sqlalchemy Uri",
                    "description": "URI of database to connect to. See https://docs.sqlalchemy.org/en/14/core/engines.html#database-urls. Takes precedence over other connection parameters.",
                    "type": "string"
                },
                "default_schema": {
                    "title": "Default Schema",
                    "description": "The default schema to use if the sql parser fails to parse the schema with `sql_based` lineage collector",
                    "default": "public",
                    "type": "string"
                },
                "is_serverless": {
                    "title": "Is Serverless",
                    "description": "Whether target Redshift instance is serverless (alternative is provisioned cluster)",
                    "default": false,
                    "type": "boolean"
                },
                "use_lineage_v2": {
                    "title": "Use Lineage V2",
                    "description": "Whether to use the new SQL-based lineage collector.",
                    "default": true,
                    "type": "boolean"
                },
                "lineage_v2_generate_queries": {
                    "title": "Lineage V2 Generate Queries",
                    "description": "Whether to generate queries entities for the new SQL-based lineage collector.",
                    "default": true,
                    "type": "boolean"
                },
                "include_table_lineage": {
                    "title": "Include Table Lineage",
                    "description": "Whether table lineage should be ingested.",
                    "default": true,
                    "type": "boolean"
                },
                "include_copy_lineage": {
                    "title": "Include Copy Lineage",
                    "description": "Whether lineage should be collected from copy commands",
                    "default": true,
                    "type": "boolean"
                },
                "include_usage_statistics": {
                    "title": "Include Usage Statistics",
                    "description": "Generate usage statistic. email_domain config parameter needs to be set if enabled",
                    "default": false,
                    "type": "boolean"
                },
                "include_unload_lineage": {
                    "title": "Include Unload Lineage",
                    "description": "Whether lineage should be collected from unload commands",
                    "default": true,
                    "type": "boolean"
                },
                "include_table_rename_lineage": {
                    "title": "Include Table Rename Lineage",
                    "description": "Whether we should follow `alter table ... rename to` statements when computing lineage. ",
                    "default": true,
                    "type": "boolean"
                },
                "table_lineage_mode": {
                    "description": "Which table lineage collector mode to use. Available modes are: [stl_scan_based, sql_based, mixed]",
                    "default": "mixed",
                    "allOf": [
                        {
                            "$ref": "#/definitions/LineageMode"
                        }
                    ]
                },
                "extra_client_options": {
                    "title": "Extra Client Options",
                    "default": {},
                    "type": "object"
                },
                "match_fully_qualified_names": {
                    "title": "Match Fully Qualified Names",
                    "description": "Whether `schema_pattern` is matched against fully qualified schema name `<database>.<schema>`.",
                    "default": false,
                    "type": "boolean"
                },
                "extract_column_level_lineage": {
                    "title": "Extract Column Level Lineage",
                    "description": "Whether to extract column level lineage. This config works with rest-sink only.",
                    "default": true,
                    "type": "boolean"
                },
                "patch_custom_properties": {
                    "title": "Patch Custom Properties",
                    "description": "Whether to patch custom properties on existing datasets rather than replace.",
                    "default": true,
                    "type": "boolean"
                },
                "resolve_temp_table_in_lineage": {
                    "title": "Resolve Temp Table In Lineage",
                    "description": "Whether to resolve temp table appear in lineage to upstream permanent tables.",
                    "default": true,
                    "type": "boolean"
                },
                "skip_external_tables": {
                    "title": "Skip External Tables",
                    "description": "Whether to skip EXTERNAL tables.",
                    "default": false,
                    "type": "boolean"
                }
            },
            "required": [
                "host_port"
            ],
            "additionalProperties": false
        },
        "superset": {
            "type": "object",
            "properties": {
                "type": {
                    "type": "string",
                    "enum": [
                        "superset"
                    ]
                },
                "config": {
                    "$ref": "#/definitions/superset_config"
                }
            },
            "required": [
                "type",
                "config"
            ]
        },
        "superset_config": {
            "title": "SupersetConfig",
            "description": "Base configuration class for stateful ingestion for source configs to inherit from.",
            "type": "object",
            "properties": {
                "platform_instance": {
                    "title": "Platform Instance",
                    "description": "The instance of the platform that all assets produced by this recipe belong to. This should be unique within the platform. See https://datahubproject.io/docs/platform-instances/ for more details.",
                    "type": "string"
                },
                "env": {
                    "title": "Env",
                    "description": "The environment that all assets produced by this connector belong to",
                    "default": "PROD",
                    "type": "string"
                },
                "stateful_ingestion": {
                    "title": "Stateful Ingestion",
                    "description": "Superset Stateful Ingestion Config.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/StatefulStaleMetadataRemovalConfig"
                        }
                    ]
                },
                "connect_uri": {
                    "title": "Connect Uri",
                    "description": "Superset host URL.",
                    "default": "http://localhost:8088",
                    "type": "string"
                },
                "display_uri": {
                    "title": "Display Uri",
                    "description": "optional URL to use in links (if `connect_uri` is only for ingestion)",
                    "type": "string"
                },
                "domain": {
                    "title": "Domain",
                    "description": "regex patterns for tables to filter to assign domain_key. ",
                    "default": {},
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/definitions/AllowDenyPattern"
                    }
                },
                "username": {
                    "title": "Username",
                    "description": "Superset username.",
                    "type": "string"
                },
                "password": {
                    "title": "Password",
                    "description": "Superset password.",
                    "type": "string"
                },
                "ingest_dashboards": {
                    "title": "Ingest Dashboards",
                    "description": "Enable to ingest dashboards.",
                    "default": true,
                    "type": "boolean"
                },
                "ingest_charts": {
                    "title": "Ingest Charts",
                    "description": "Enable to ingest charts.",
                    "default": true,
                    "type": "boolean"
                },
                "ingest_datasets": {
                    "title": "Ingest Datasets",
                    "description": "Enable to ingest datasets.",
                    "default": false,
                    "type": "boolean"
                },
                "provider": {
                    "title": "Provider",
                    "description": "Superset provider.",
                    "default": "db",
                    "type": "string"
                },
                "options": {
                    "title": "Options",
                    "default": {},
                    "type": "object"
                },
                "database_alias": {
                    "title": "Database Alias",
                    "description": "Can be used to change mapping for database names in superset to what you have in datahub",
                    "default": {},
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                }
            }
        },
        "mariadb": {
            "type": "object",
            "properties": {
                "type": {
                    "type": "string",
                    "enum": [
                        "mariadb"
                    ]
                },
                "config": {
                    "$ref": "#/definitions/mariadb_config"
                }
            },
            "required": [
                "type",
                "config"
            ]
        },
        "mariadb_config": {
            "title": "MySQLConfig",
            "description": "Base configuration class for stateful ingestion for source configs to inherit from.",
            "type": "object",
            "properties": {
                "table_pattern": {
                    "title": "Table Pattern",
                    "description": "Regex patterns for tables to filter in ingestion. Specify regex to match the entire table name in database.schema.table format. e.g. to match all tables starting with customer in Customer database and public schema, use the regex 'Customer.public.customer.*'",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "allOf": [
                        {
                            "$ref": "#/definitions/AllowDenyPattern"
                        }
                    ]
                },
                "view_pattern": {
                    "title": "View Pattern",
                    "description": "Regex patterns for views to filter in ingestion. Note: Defaults to table_pattern if not specified. Specify regex to match the entire view name in database.schema.view format. e.g. to match all views starting with customer in Customer database and public schema, use the regex 'Customer.public.customer.*'",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "allOf": [
                        {
                            "$ref": "#/definitions/AllowDenyPattern"
                        }
                    ]
                },
                "classification": {
                    "title": "Classification",
                    "description": "For details, refer to [Classification](../../../../metadata-ingestion/docs/dev_guides/classification.md).",
                    "default": {
                        "enabled": false,
                        "sample_size": 100,
                        "max_workers": 4,
                        "table_pattern": {
                            "allow": [
                                ".*"
                            ],
                            "deny": [],
                            "ignoreCase": true
                        },
                        "column_pattern": {
                            "allow": [
                                ".*"
                            ],
                            "deny": [],
                            "ignoreCase": true
                        },
                        "info_type_to_term": {},
                        "classifiers": [
                            {
                                "type": "datahub",
                                "config": null
                            }
                        ]
                    },
                    "allOf": [
                        {
                            "$ref": "#/definitions/ClassificationConfig"
                        }
                    ]
                },
                "incremental_lineage": {
                    "title": "Incremental Lineage",
                    "description": "When enabled, emits lineage as incremental to existing lineage already in DataHub. When disabled, re-states lineage on each run.",
                    "default": false,
                    "type": "boolean"
                },
                "convert_urns_to_lowercase": {
                    "title": "Convert Urns To Lowercase",
                    "description": "Whether to convert dataset urns to lowercase.",
                    "default": false,
                    "type": "boolean"
                },
                "env": {
                    "title": "Env",
                    "description": "The environment that all assets produced by this connector belong to",
                    "default": "PROD",
                    "type": "string"
                },
                "platform_instance": {
                    "title": "Platform Instance",
                    "description": "The instance of the platform that all assets produced by this recipe belong to. This should be unique within the platform. See https://datahubproject.io/docs/platform-instances/ for more details.",
                    "type": "string"
                },
                "stateful_ingestion": {
                    "$ref": "#/definitions/StatefulStaleMetadataRemovalConfig"
                },
                "options": {
                    "title": "Options",
                    "description": "Any options specified here will be passed to [SQLAlchemy.create_engine](https://docs.sqlalchemy.org/en/14/core/engines.html#sqlalchemy.create_engine) as kwargs. To set connection arguments in the URL, specify them under `connect_args`.",
                    "type": "object"
                },
                "profile_pattern": {
                    "title": "Profile Pattern",
                    "description": "Regex patterns to filter tables (or specific columns) for profiling during ingestion. Note that only tables allowed by the `table_pattern` will be considered.",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "allOf": [
                        {
                            "$ref": "#/definitions/AllowDenyPattern"
                        }
                    ]
                },
                "domain": {
                    "title": "Domain",
                    "description": "Attach domains to databases, schemas or tables during ingestion using regex patterns. Domain key can be a guid like *urn:li:domain:ec428203-ce86-4db3-985d-5a8ee6df32ba* or a string like \"Marketing\".) If you provide strings, then datahub will attempt to resolve this name to a guid, and will error out if this fails. There can be multiple domain keys specified.",
                    "default": {},
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/definitions/AllowDenyPattern"
                    }
                },
                "include_views": {
                    "title": "Include Views",
                    "description": "Whether views should be ingested.",
                    "default": true,
                    "type": "boolean"
                },
                "include_tables": {
                    "title": "Include Tables",
                    "description": "Whether tables should be ingested.",
                    "default": true,
                    "type": "boolean"
                },
                "include_table_location_lineage": {
                    "title": "Include Table Location Lineage",
                    "description": "If the source supports it, include table lineage to the underlying storage location.",
                    "default": true,
                    "type": "boolean"
                },
                "include_view_lineage": {
                    "title": "Include View Lineage",
                    "description": "Populates view->view and table->view lineage using DataHub's sql parser.",
                    "default": true,
                    "type": "boolean"
                },
                "include_view_column_lineage": {
                    "title": "Include View Column Lineage",
                    "description": "Populates column-level lineage for  view->view and table->view lineage using DataHub's sql parser. Requires `include_view_lineage` to be enabled.",
                    "default": true,
                    "type": "boolean"
                },
                "use_file_backed_cache": {
                    "title": "Use File Backed Cache",
                    "description": "Whether to use a file backed cache for the view definitions.",
                    "default": true,
                    "type": "boolean"
                },
                "profiling": {
                    "title": "Profiling",
                    "default": {
                        "enabled": false,
                        "operation_config": {
                            "lower_freq_profile_enabled": false,
                            "profile_day_of_week": null,
                            "profile_date_of_month": null
                        },
                        "limit": null,
                        "offset": null,
                        "profile_table_level_only": false,
                        "include_field_null_count": true,
                        "include_field_distinct_count": true,
                        "include_field_min_value": true,
                        "include_field_max_value": true,
                        "include_field_mean_value": true,
                        "include_field_median_value": true,
                        "include_field_stddev_value": true,
                        "include_field_quantiles": false,
                        "include_field_distinct_value_frequencies": false,
                        "include_field_histogram": false,
                        "include_field_sample_values": true,
                        "max_workers": 20,
                        "report_dropped_profiles": false,
                        "turn_off_expensive_profiling_metrics": false,
                        "field_sample_values_limit": 20,
                        "max_number_of_fields_to_profile": null,
                        "profile_if_updated_since_days": null,
                        "profile_table_size_limit": 5,
                        "profile_table_row_limit": 5000000,
                        "profile_table_row_count_estimate_only": false,
                        "query_combiner_enabled": true,
                        "catch_exceptions": true,
                        "partition_profiling_enabled": true,
                        "partition_datetime": null,
                        "use_sampling": true,
                        "sample_size": 10000,
                        "profile_external_tables": false,
                        "tags_to_ignore_sampling": null,
                        "profile_nested_fields": false
                    },
                    "allOf": [
                        {
                            "$ref": "#/definitions/GEProfilingConfig"
                        }
                    ]
                },
                "username": {
                    "title": "Username",
                    "description": "username",
                    "type": "string"
                },
                "password": {
                    "title": "Password",
                    "description": "password",
                    "type": "string",
                    "writeOnly": true,
                    "format": "password"
                },
                "host_port": {
                    "title": "Host Port",
                    "description": "MySQL host URL.",
                    "default": "localhost:3306",
                    "type": "string"
                },
                "database": {
                    "title": "Database",
                    "description": "database (catalog)",
                    "type": "string"
                },
                "scheme": {
                    "title": "Scheme",
                    "default": "mysql+pymysql",
                    "type": "string"
                },
                "sqlalchemy_uri": {
                    "title": "Sqlalchemy Uri",
                    "description": "URI of database to connect to. See https://docs.sqlalchemy.org/en/14/core/engines.html#database-urls. Takes precedence over other connection parameters.",
                    "type": "string"
                },
                "database_pattern": {
                    "title": "Database Pattern",
                    "description": "Regex patterns for databases to filter in ingestion.",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "allOf": [
                        {
                            "$ref": "#/definitions/AllowDenyPattern"
                        }
                    ]
                }
            },
            "additionalProperties": false
        },
        "s3": {
            "type": "object",
            "properties": {
                "type": {
                    "type": "string",
                    "enum": [
                        "s3"
                    ]
                },
                "config": {
                    "$ref": "#/definitions/s3_config"
                }
            },
            "required": [
                "type",
                "config"
            ]
        },
        "s3_config": {
            "title": "DataLakeSourceConfig",
            "description": "Base configuration class for stateful ingestion for source configs to inherit from.",
            "type": "object",
            "properties": {
                "path_specs": {
                    "title": "Path Specs",
                    "description": "List of PathSpec. See [below](#path-spec) the details about PathSpec",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/PathSpec"
                    }
                },
                "env": {
                    "title": "Env",
                    "description": "The environment that all assets produced by this connector belong to",
                    "default": "PROD",
                    "type": "string"
                },
                "platform_instance": {
                    "title": "Platform Instance",
                    "description": "The instance of the platform that all assets produced by this recipe belong to. This should be unique within the platform. See https://datahubproject.io/docs/platform-instances/ for more details.",
                    "type": "string"
                },
                "stateful_ingestion": {
                    "$ref": "#/definitions/StatefulStaleMetadataRemovalConfig"
                },
                "platform": {
                    "title": "Platform",
                    "description": "The platform that this source connects to (either 's3' or 'file'). If not specified, the platform will be inferred from the path_specs.",
                    "default": "",
                    "type": "string"
                },
                "aws_config": {
                    "title": "Aws Config",
                    "description": "AWS configuration",
                    "allOf": [
                        {
                            "$ref": "#/definitions/AwsConnectionConfig"
                        }
                    ]
                },
                "use_s3_bucket_tags": {
                    "title": "Use S3 Bucket Tags",
                    "description": "Whether or not to create tags in datahub from the s3 bucket",
                    "type": "boolean"
                },
                "use_s3_object_tags": {
                    "title": "Use S3 Object Tags",
                    "description": "Whether or not to create tags in datahub from the s3 object",
                    "type": "boolean"
                },
                "use_s3_content_type": {
                    "title": "Use S3 Content Type",
                    "description": "If enabled, use S3 Object metadata to determine content type over file extension, if set. Warning: this requires a separate query to S3 for each object, which can be slow for large datasets.",
                    "default": false,
                    "type": "boolean"
                },
                "profile_patterns": {
                    "title": "Profile Patterns",
                    "description": "regex patterns for tables to profile ",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "allOf": [
                        {
                            "$ref": "#/definitions/AllowDenyPattern"
                        }
                    ]
                },
                "profiling": {
                    "title": "Profiling",
                    "description": "Data profiling configuration",
                    "default": {
                        "enabled": false,
                        "operation_config": {
                            "lower_freq_profile_enabled": false,
                            "profile_day_of_week": null,
                            "profile_date_of_month": null
                        },
                        "profile_table_level_only": false,
                        "max_number_of_fields_to_profile": null,
                        "include_field_null_count": true,
                        "include_field_min_value": true,
                        "include_field_max_value": true,
                        "include_field_mean_value": true,
                        "include_field_median_value": true,
                        "include_field_stddev_value": true,
                        "include_field_quantiles": true,
                        "include_field_distinct_value_frequencies": true,
                        "include_field_histogram": true,
                        "include_field_sample_values": true
                    },
                    "allOf": [
                        {
                            "$ref": "#/definitions/DataLakeProfilerConfig"
                        }
                    ]
                },
                "spark_driver_memory": {
                    "title": "Spark Driver Memory",
                    "description": "Max amount of memory to grant Spark.",
                    "default": "4g",
                    "type": "string"
                },
                "spark_config": {
                    "title": "Spark Config",
                    "description": "Spark configuration properties to set on the SparkSession. Put config property names into quotes. For example: '\"spark.executor.memory\": \"2g\"'",
                    "default": {},
                    "type": "object"
                },
                "max_rows": {
                    "title": "Max Rows",
                    "description": "Maximum number of rows to use when inferring schemas for TSV and CSV files.",
                    "default": 100,
                    "type": "integer"
                },
                "add_partition_columns_to_schema": {
                    "title": "Add Partition Columns To Schema",
                    "description": "Whether to add partition fields to the schema.",
                    "default": false,
                    "type": "boolean"
                },
                "verify_ssl": {
                    "title": "Verify Ssl",
                    "description": "Either a boolean, in which case it controls whether we verify the server's TLS certificate, or a string, in which case it must be a path to a CA bundle to use.",
                    "default": true,
                    "anyOf": [
                        {
                            "type": "boolean"
                        },
                        {
                            "type": "string"
                        }
                    ]
                },
                "number_of_files_to_sample": {
                    "title": "Number Of Files To Sample",
                    "description": "Number of files to list to sample for schema inference. This will be ignored if sample_files is set to False in the pathspec.",
                    "default": 100,
                    "type": "integer"
                },
                "sort_schema_fields": {
                    "title": "Sort Schema Fields",
                    "description": "Whether to sort schema fields by fieldPath when inferring schemas.",
                    "default": false,
                    "type": "boolean"
                },
                "generate_partition_aspects": {
                    "title": "Generate Partition Aspects",
                    "description": "Whether to generate partition aspects for partitioned tables. On older servers for backward compatibility, this should be set to False. This flag will be removed in future versions.",
                    "default": true,
                    "type": "boolean"
                }
            },
            "required": [
                "path_specs"
            ],
            "additionalProperties": false
        },
        "datahub-lineage-file": {
            "type": "object",
            "properties": {
                "type": {
                    "type": "string",
                    "enum": [
                        "datahub-lineage-file"
                    ]
                },
                "config": {
                    "$ref": "#/definitions/datahub-lineage-file_config"
                }
            },
            "required": [
                "type",
                "config"
            ]
        },
        "datahub-lineage-file_config": {
            "title": "LineageFileSourceConfig",
            "type": "object",
            "properties": {
                "file": {
                    "title": "File",
                    "description": "File path or URL to lineage file to ingest.",
                    "type": "string"
                },
                "preserve_upstream": {
                    "title": "Preserve Upstream",
                    "description": "Whether we want to query datahub-gms for upstream data. False means it will hard replace upstream data for a given entity. True means it will query the backend for existing upstreams and include it in the ingestion run",
                    "default": true,
                    "type": "boolean"
                }
            },
            "required": [
                "file"
            ],
            "additionalProperties": false
        },
        "qlik-sense": {
            "type": "object",
            "properties": {
                "type": {
                    "type": "string",
                    "enum": [
                        "qlik-sense"
                    ]
                },
                "config": {
                    "$ref": "#/definitions/qlik-sense_config"
                }
            },
            "required": [
                "type",
                "config"
            ]
        },
        "qlik-sense_config": {
            "title": "QlikSourceConfig",
            "description": "Base configuration class for stateful ingestion for source configs to inherit from.",
            "type": "object",
            "properties": {
                "env": {
                    "title": "Env",
                    "description": "The environment that all assets produced by this connector belong to",
                    "default": "PROD",
                    "type": "string"
                },
                "platform_instance": {
                    "title": "Platform Instance",
                    "description": "The instance of the platform that all assets produced by this recipe belong to. This should be unique within the platform. See https://datahubproject.io/docs/platform-instances/ for more details.",
                    "type": "string"
                },
                "stateful_ingestion": {
                    "title": "Stateful Ingestion",
                    "description": "Stateful Ingestion Config",
                    "allOf": [
                        {
                            "$ref": "#/definitions/StatefulIngestionConfig"
                        }
                    ]
                },
                "tenant_hostname": {
                    "title": "Tenant Hostname",
                    "description": "Qlik Tenant hostname",
                    "type": "string"
                },
                "api_key": {
                    "title": "Api Key",
                    "description": "Qlik API Key",
                    "type": "string"
                },
                "space_pattern": {
                    "title": "Space Pattern",
                    "description": "Regex patterns to filter Qlik spaces in ingestion.Mention 'personal_space' if entities of personal space need to ingest",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "allOf": [
                        {
                            "$ref": "#/definitions/AllowDenyPattern"
                        }
                    ]
                },
                "ingest_owner": {
                    "title": "Ingest Owner",
                    "description": "Ingest Owner from source. This will override Owner info entered from UI",
                    "default": true,
                    "type": "boolean"
                },
                "data_connection_to_platform_instance": {
                    "title": "Data Connection To Platform Instance",
                    "description": "A mapping of the Qlik app dataset upstream tables from data connection to platform instance.Use 'data_connection_name' as key.",
                    "default": {},
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/definitions/PlatformDetail"
                    }
                }
            },
            "required": [
                "tenant_hostname",
                "api_key"
            ],
            "additionalProperties": false
        },
        "hive": {
            "type": "object",
            "properties": {
                "type": {
                    "type": "string",
                    "enum": [
                        "hive"
                    ]
                },
                "config": {
                    "$ref": "#/definitions/hive_config"
                }
            },
            "required": [
                "type",
                "config"
            ]
        },
        "hive_config": {
            "title": "HiveConfig",
            "description": "Base configuration class for stateful ingestion for source configs to inherit from.",
            "type": "object",
            "properties": {
                "table_pattern": {
                    "title": "Table Pattern",
                    "description": "Regex patterns for tables to filter in ingestion. Specify regex to match the entire table name in database.schema.table format. e.g. to match all tables starting with customer in Customer database and public schema, use the regex 'Customer.public.customer.*'",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "allOf": [
                        {
                            "$ref": "#/definitions/AllowDenyPattern"
                        }
                    ]
                },
                "view_pattern": {
                    "title": "View Pattern",
                    "description": "Regex patterns for views to filter in ingestion. Note: Defaults to table_pattern if not specified. Specify regex to match the entire view name in database.schema.view format. e.g. to match all views starting with customer in Customer database and public schema, use the regex 'Customer.public.customer.*'",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "allOf": [
                        {
                            "$ref": "#/definitions/AllowDenyPattern"
                        }
                    ]
                },
                "classification": {
                    "title": "Classification",
                    "description": "For details, refer to [Classification](../../../../metadata-ingestion/docs/dev_guides/classification.md).",
                    "default": {
                        "enabled": false,
                        "sample_size": 100,
                        "max_workers": 4,
                        "table_pattern": {
                            "allow": [
                                ".*"
                            ],
                            "deny": [],
                            "ignoreCase": true
                        },
                        "column_pattern": {
                            "allow": [
                                ".*"
                            ],
                            "deny": [],
                            "ignoreCase": true
                        },
                        "info_type_to_term": {},
                        "classifiers": [
                            {
                                "type": "datahub",
                                "config": null
                            }
                        ]
                    },
                    "allOf": [
                        {
                            "$ref": "#/definitions/ClassificationConfig"
                        }
                    ]
                },
                "incremental_lineage": {
                    "title": "Incremental Lineage",
                    "description": "When enabled, emits lineage as incremental to existing lineage already in DataHub. When disabled, re-states lineage on each run.",
                    "default": false,
                    "type": "boolean"
                },
                "convert_urns_to_lowercase": {
                    "title": "Convert Urns To Lowercase",
                    "description": "Whether to convert dataset urns to lowercase.",
                    "default": false,
                    "type": "boolean"
                },
                "env": {
                    "title": "Env",
                    "description": "The environment that all assets produced by this connector belong to",
                    "default": "PROD",
                    "type": "string"
                },
                "platform_instance": {
                    "title": "Platform Instance",
                    "description": "The instance of the platform that all assets produced by this recipe belong to. This should be unique within the platform. See https://datahubproject.io/docs/platform-instances/ for more details.",
                    "type": "string"
                },
                "stateful_ingestion": {
                    "$ref": "#/definitions/StatefulStaleMetadataRemovalConfig"
                },
                "options": {
                    "title": "Options",
                    "description": "Any options specified here will be passed to [SQLAlchemy.create_engine](https://docs.sqlalchemy.org/en/14/core/engines.html#sqlalchemy.create_engine) as kwargs. To set connection arguments in the URL, specify them under `connect_args`.",
                    "type": "object"
                },
                "profile_pattern": {
                    "title": "Profile Pattern",
                    "description": "Regex patterns to filter tables (or specific columns) for profiling during ingestion. Note that only tables allowed by the `table_pattern` will be considered.",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "allOf": [
                        {
                            "$ref": "#/definitions/AllowDenyPattern"
                        }
                    ]
                },
                "domain": {
                    "title": "Domain",
                    "description": "Attach domains to databases, schemas or tables during ingestion using regex patterns. Domain key can be a guid like *urn:li:domain:ec428203-ce86-4db3-985d-5a8ee6df32ba* or a string like \"Marketing\".) If you provide strings, then datahub will attempt to resolve this name to a guid, and will error out if this fails. There can be multiple domain keys specified.",
                    "default": {},
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/definitions/AllowDenyPattern"
                    }
                },
                "include_views": {
                    "title": "Include Views",
                    "description": "Whether views should be ingested.",
                    "default": true,
                    "type": "boolean"
                },
                "include_tables": {
                    "title": "Include Tables",
                    "description": "Whether tables should be ingested.",
                    "default": true,
                    "type": "boolean"
                },
                "include_view_lineage": {
                    "title": "Include View Lineage",
                    "description": "Populates view->view and table->view lineage using DataHub's sql parser.",
                    "default": true,
                    "type": "boolean"
                },
                "include_view_column_lineage": {
                    "title": "Include View Column Lineage",
                    "description": "Populates column-level lineage for  view->view and table->view lineage using DataHub's sql parser. Requires `include_view_lineage` to be enabled.",
                    "default": true,
                    "type": "boolean"
                },
                "use_file_backed_cache": {
                    "title": "Use File Backed Cache",
                    "description": "Whether to use a file backed cache for the view definitions.",
                    "default": true,
                    "type": "boolean"
                },
                "profiling": {
                    "title": "Profiling",
                    "default": {
                        "enabled": false,
                        "operation_config": {
                            "lower_freq_profile_enabled": false,
                            "profile_day_of_week": null,
                            "profile_date_of_month": null
                        },
                        "limit": null,
                        "offset": null,
                        "profile_table_level_only": false,
                        "include_field_null_count": true,
                        "include_field_distinct_count": true,
                        "include_field_min_value": true,
                        "include_field_max_value": true,
                        "include_field_mean_value": true,
                        "include_field_median_value": true,
                        "include_field_stddev_value": true,
                        "include_field_quantiles": false,
                        "include_field_distinct_value_frequencies": false,
                        "include_field_histogram": false,
                        "include_field_sample_values": true,
                        "max_workers": 20,
                        "report_dropped_profiles": false,
                        "turn_off_expensive_profiling_metrics": false,
                        "field_sample_values_limit": 20,
                        "max_number_of_fields_to_profile": null,
                        "profile_if_updated_since_days": null,
                        "profile_table_size_limit": 5,
                        "profile_table_row_limit": 5000000,
                        "profile_table_row_count_estimate_only": false,
                        "query_combiner_enabled": true,
                        "catch_exceptions": true,
                        "partition_profiling_enabled": true,
                        "partition_datetime": null,
                        "use_sampling": true,
                        "sample_size": 10000,
                        "profile_external_tables": false,
                        "tags_to_ignore_sampling": null,
                        "profile_nested_fields": false
                    },
                    "allOf": [
                        {
                            "$ref": "#/definitions/GEProfilingConfig"
                        }
                    ]
                },
                "username": {
                    "title": "Username",
                    "description": "username",
                    "type": "string"
                },
                "password": {
                    "title": "Password",
                    "description": "password",
                    "type": "string",
                    "writeOnly": true,
                    "format": "password"
                },
                "host_port": {
                    "title": "Host Port",
                    "description": "host URL",
                    "type": "string"
                },
                "database": {
                    "title": "Database",
                    "description": "database (catalog)",
                    "type": "string"
                },
                "sqlalchemy_uri": {
                    "title": "Sqlalchemy Uri",
                    "description": "URI of database to connect to. See https://docs.sqlalchemy.org/en/14/core/engines.html#database-urls. Takes precedence over other connection parameters.",
                    "type": "string"
                },
                "database_pattern": {
                    "title": "Database Pattern",
                    "description": "Regex patterns for databases to filter in ingestion.",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "allOf": [
                        {
                            "$ref": "#/definitions/AllowDenyPattern"
                        }
                    ]
                },
                "emit_storage_lineage": {
                    "title": "Emit Storage Lineage",
                    "description": "Whether to emit storage-to-Hive lineage",
                    "default": false,
                    "type": "boolean"
                },
                "hive_storage_lineage_direction": {
                    "title": "Hive Storage Lineage Direction",
                    "description": "If 'upstream', storage is upstream to Hive. If 'downstream' storage is downstream to Hive",
                    "default": "upstream",
                    "type": "string"
                },
                "include_column_lineage": {
                    "title": "Include Column Lineage",
                    "description": "When enabled, column-level lineage will be extracted from storage",
                    "default": true,
                    "type": "boolean"
                },
                "storage_platform_instance": {
                    "title": "Storage Platform Instance",
                    "description": "Platform instance for the storage system",
                    "type": "string"
                }
            },
            "required": [
                "host_port"
            ],
            "additionalProperties": false
        },
        "bigquery": {
            "type": "object",
            "properties": {
                "type": {
                    "type": "string",
                    "enum": [
                        "bigquery"
                    ]
                },
                "config": {
                    "$ref": "#/definitions/bigquery_config"
                }
            },
            "required": [
                "type",
                "config"
            ]
        },
        "bigquery_config": {
            "title": "BigQueryV2Config",
            "description": "Any source that produces gcs lineage from/to Datasets should inherit this class.\nThis is needeed to group all lineage related configs under `gcs_lineage_config` config property.",
            "type": "object",
            "properties": {
                "classification": {
                    "title": "Classification",
                    "description": "For details, refer to [Classification](../../../../metadata-ingestion/docs/dev_guides/classification.md).",
                    "default": {
                        "enabled": false,
                        "sample_size": 100,
                        "max_workers": 4,
                        "table_pattern": {
                            "allow": [
                                ".*"
                            ],
                            "deny": [],
                            "ignoreCase": true
                        },
                        "column_pattern": {
                            "allow": [
                                ".*"
                            ],
                            "deny": [],
                            "ignoreCase": true
                        },
                        "info_type_to_term": {},
                        "classifiers": [
                            {
                                "type": "datahub",
                                "config": null
                            }
                        ]
                    },
                    "allOf": [
                        {
                            "$ref": "#/definitions/ClassificationConfig"
                        }
                    ]
                },
                "enable_stateful_profiling": {
                    "title": "Enable Stateful Profiling",
                    "description": "Enable stateful profiling. This will store profiling timestamps per dataset after successful profiling. and will not run profiling again in subsequent run if table has not been updated. ",
                    "default": true,
                    "type": "boolean"
                },
                "enable_stateful_lineage_ingestion": {
                    "title": "Enable Stateful Lineage Ingestion",
                    "description": "Enable stateful lineage ingestion. This will store lineage window timestamps after successful lineage ingestion. and will not run lineage ingestion for same timestamps in subsequent run. ",
                    "default": true,
                    "type": "boolean"
                },
                "bucket_duration": {
                    "description": "Size of the time window to aggregate usage stats.",
                    "default": "DAY",
                    "allOf": [
                        {
                            "$ref": "#/definitions/BucketDuration"
                        }
                    ]
                },
                "end_time": {
                    "title": "End Time",
                    "description": "Latest date of lineage/usage to consider. Default: Current time in UTC",
                    "type": "string",
                    "format": "date-time"
                },
                "start_time": {
                    "title": "Start Time",
                    "description": "Earliest date of lineage/usage to consider. Default: Last full day in UTC (or hour, depending on `bucket_duration`). You can also specify relative time with respect to end_time such as '-7 days' Or '-7d'.",
                    "type": "string",
                    "format": "date-time"
                },
                "enable_stateful_usage_ingestion": {
                    "title": "Enable Stateful Usage Ingestion",
                    "description": "Enable stateful lineage ingestion. This will store usage window timestamps after successful usage ingestion. and will not run usage ingestion for same timestamps in subsequent run. ",
                    "default": true,
                    "type": "boolean"
                },
                "table_pattern": {
                    "title": "Table Pattern",
                    "description": "Regex patterns for tables to filter in ingestion. Specify regex to match the entire table name in database.schema.table format. e.g. to match all tables starting with customer in Customer database and public schema, use the regex 'Customer.public.customer.*'",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "allOf": [
                        {
                            "$ref": "#/definitions/AllowDenyPattern"
                        }
                    ]
                },
                "view_pattern": {
                    "title": "View Pattern",
                    "description": "Regex patterns for views to filter in ingestion. Note: Defaults to table_pattern if not specified. Specify regex to match the entire view name in database.schema.view format. e.g. to match all views starting with customer in Customer database and public schema, use the regex 'Customer.public.customer.*'",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "allOf": [
                        {
                            "$ref": "#/definitions/AllowDenyPattern"
                        }
                    ]
                },
                "incremental_lineage": {
                    "title": "Incremental Lineage",
                    "description": "When enabled, emits lineage as incremental to existing lineage already in DataHub. When disabled, re-states lineage on each run.",
                    "default": false,
                    "type": "boolean"
                },
                "convert_urns_to_lowercase": {
                    "title": "Convert Urns To Lowercase",
                    "description": "Whether to convert dataset urns to lowercase.",
                    "default": false,
                    "type": "boolean"
                },
                "env": {
                    "title": "Env",
                    "description": "The environment that all assets produced by this connector belong to",
                    "default": "PROD",
                    "type": "string"
                },
                "platform_instance": {
                    "title": "Platform Instance",
                    "description": "The instance of the platform that all assets produced by this recipe belong to. This should be unique within the platform. See https://datahubproject.io/docs/platform-instances/ for more details.",
                    "type": "string"
                },
                "stateful_ingestion": {
                    "$ref": "#/definitions/StatefulStaleMetadataRemovalConfig"
                },
                "options": {
                    "title": "Options",
                    "description": "Any options specified here will be passed to [SQLAlchemy.create_engine](https://docs.sqlalchemy.org/en/14/core/engines.html#sqlalchemy.create_engine) as kwargs.",
                    "type": "object"
                },
                "profile_pattern": {
                    "title": "Profile Pattern",
                    "description": "Regex patterns to filter tables (or specific columns) for profiling during ingestion. Note that only tables allowed by the `table_pattern` will be considered.",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "allOf": [
                        {
                            "$ref": "#/definitions/AllowDenyPattern"
                        }
                    ]
                },
                "domain": {
                    "title": "Domain",
                    "description": "Attach domains to databases, schemas or tables during ingestion using regex patterns. Domain key can be a guid like *urn:li:domain:ec428203-ce86-4db3-985d-5a8ee6df32ba* or a string like \"Marketing\".) If you provide strings, then datahub will attempt to resolve this name to a guid, and will error out if this fails. There can be multiple domain keys specified.",
                    "default": {},
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/definitions/AllowDenyPattern"
                    }
                },
                "include_views": {
                    "title": "Include Views",
                    "description": "Whether views should be ingested.",
                    "default": true,
                    "type": "boolean"
                },
                "include_tables": {
                    "title": "Include Tables",
                    "description": "Whether tables should be ingested.",
                    "default": true,
                    "type": "boolean"
                },
                "include_table_location_lineage": {
                    "title": "Include Table Location Lineage",
                    "description": "If the source supports it, include table lineage to the underlying storage location.",
                    "default": true,
                    "type": "boolean"
                },
                "use_file_backed_cache": {
                    "title": "Use File Backed Cache",
                    "description": "Whether to use a file backed cache for the view definitions.",
                    "default": true,
                    "type": "boolean"
                },
                "profiling": {
                    "title": "Profiling",
                    "default": {
                        "enabled": false,
                        "operation_config": {
                            "lower_freq_profile_enabled": false,
                            "profile_day_of_week": null,
                            "profile_date_of_month": null
                        },
                        "limit": null,
                        "offset": null,
                        "profile_table_level_only": false,
                        "include_field_null_count": true,
                        "include_field_distinct_count": true,
                        "include_field_min_value": true,
                        "include_field_max_value": true,
                        "include_field_mean_value": true,
                        "include_field_median_value": true,
                        "include_field_stddev_value": true,
                        "include_field_quantiles": false,
                        "include_field_distinct_value_frequencies": false,
                        "include_field_histogram": false,
                        "include_field_sample_values": true,
                        "max_workers": 20,
                        "report_dropped_profiles": false,
                        "turn_off_expensive_profiling_metrics": false,
                        "field_sample_values_limit": 20,
                        "max_number_of_fields_to_profile": null,
                        "profile_if_updated_since_days": null,
                        "profile_table_size_limit": 5,
                        "profile_table_row_limit": 5000000,
                        "profile_table_row_count_estimate_only": false,
                        "query_combiner_enabled": true,
                        "catch_exceptions": true,
                        "partition_profiling_enabled": true,
                        "partition_datetime": null,
                        "use_sampling": true,
                        "sample_size": 10000,
                        "profile_external_tables": false,
                        "tags_to_ignore_sampling": null,
                        "profile_nested_fields": false
                    },
                    "allOf": [
                        {
                            "$ref": "#/definitions/GEProfilingConfig"
                        }
                    ]
                },
                "include_data_platform_instance": {
                    "title": "Include Data Platform Instance",
                    "description": "Whether to create a DataPlatformInstance aspect, equal to the BigQuery project id. If enabled, will cause redundancy in the browse path for BigQuery entities in the UI, because the project id is represented as the top-level container.",
                    "default": false,
                    "type": "boolean"
                },
                "enable_legacy_sharded_table_support": {
                    "title": "Enable Legacy Sharded Table Support",
                    "description": "Use the legacy sharded table urn suffix added.",
                    "default": true,
                    "type": "boolean"
                },
                "project_ids": {
                    "title": "Project Ids",
                    "description": "Ingests specified project_ids. Use this property if you want to specify what projects to ingest or don't want to give project resourcemanager.projects.list to your service account. Overrides `project_id_pattern`.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "project_labels": {
                    "title": "Project Labels",
                    "description": "Ingests projects with the specified labels. Set value in the format of `key:value`. Use this property to define which projects to ingest basedon project-level labels. If project_ids or project_id is set, this configuration has no effect. The ingestion process filters projects by label first, and then applies the project_id_pattern.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "project_id_pattern": {
                    "title": "Project Id Pattern",
                    "description": "Regex patterns for project_id to filter in ingestion.",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "allOf": [
                        {
                            "$ref": "#/definitions/AllowDenyPattern"
                        }
                    ]
                },
                "dataset_pattern": {
                    "title": "Dataset Pattern",
                    "description": "Regex patterns for dataset to filter in ingestion. Specify regex to only match the schema name. e.g. to match all tables in schema analytics, use the regex 'analytics'",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "allOf": [
                        {
                            "$ref": "#/definitions/AllowDenyPattern"
                        }
                    ]
                },
                "match_fully_qualified_names": {
                    "title": "Match Fully Qualified Names",
                    "description": "[deprecated] Whether `dataset_pattern` is matched against fully qualified dataset name `<project_id>.<dataset_name>`.",
                    "default": true,
                    "type": "boolean"
                },
                "table_snapshot_pattern": {
                    "title": "Table Snapshot Pattern",
                    "description": "Regex patterns for table snapshots to filter in ingestion. Specify regex to match the entire snapshot name in database.schema.snapshot format. e.g. to match all snapshots starting with customer in Customer database and public schema, use the regex 'Customer.public.customer.*'",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "allOf": [
                        {
                            "$ref": "#/definitions/AllowDenyPattern"
                        }
                    ]
                },
                "rate_limit": {
                    "title": "Rate Limit",
                    "description": "Should we rate limit requests made to API.",
                    "default": false,
                    "type": "boolean"
                },
                "requests_per_min": {
                    "title": "Requests Per Min",
                    "description": "Used to control number of API calls made per min. Only used when `rate_limit` is set to `True`.",
                    "default": 60,
                    "type": "integer"
                },
                "temp_table_dataset_prefix": {
                    "title": "Temp Table Dataset Prefix",
                    "description": "If you are creating temp tables in a dataset with a particular prefix you can use this config to set the prefix for the dataset. This is to support workflows from before bigquery's introduction of temp tables. By default we use `_` because of datasets that begin with an underscore are hidden by default https://cloud.google.com/bigquery/docs/datasets#dataset-naming.",
                    "default": "_",
                    "type": "string"
                },
                "sharded_table_pattern": {
                    "title": "Sharded Table Pattern",
                    "description": "The regex pattern to match sharded tables and group as one table. This is a very low level config parameter, only change if you know what you are doing, ",
                    "default": "((.+\\D)[_$]?)?(\\d\\d\\d\\d(?:0[1-9]|1[0-2])(?:0[1-9]|[12][0-9]|3[01]))$",
                    "deprecated": true,
                    "type": "string"
                },
                "credential": {
                    "title": "Credential",
                    "description": "BigQuery credential informations",
                    "allOf": [
                        {
                            "$ref": "#/definitions/BigQueryCredential"
                        }
                    ]
                },
                "extra_client_options": {
                    "title": "Extra Client Options",
                    "description": "Additional options to pass to google.cloud.logging_v2.client.Client.",
                    "default": {},
                    "type": "object"
                },
                "project_on_behalf": {
                    "title": "Project On Behalf",
                    "description": "[Advanced] The BigQuery project in which queries are executed. Will be passed when creating a job. If not passed, falls back to the project associated with the service account.",
                    "type": "string"
                },
                "gcs_lineage_config": {
                    "title": "Gcs Lineage Config",
                    "description": "Common config for gcs lineage generation",
                    "default": {
                        "path_specs": [],
                        "strip_urls": true,
                        "ignore_non_path_spec_path": false
                    },
                    "allOf": [
                        {
                            "$ref": "#/definitions/GcsLineageProviderConfig"
                        }
                    ]
                },
                "include_schema_metadata": {
                    "title": "Include Schema Metadata",
                    "description": "Whether to ingest the BigQuery schema, i.e. projects, schemas, tables, and views.",
                    "default": true,
                    "type": "boolean"
                },
                "usage": {
                    "title": "Usage",
                    "description": "Usage related configs",
                    "default": {
                        "bucket_duration": "DAY",
                        "end_time": "2024-12-24T12:58:30.191370+00:00",
                        "start_time": "2024-12-23T00:00:00+00:00",
                        "queries_character_limit": 24000,
                        "top_n_queries": 10,
                        "user_email_pattern": {
                            "allow": [
                                ".*"
                            ],
                            "deny": [],
                            "ignoreCase": true
                        },
                        "include_operational_stats": true,
                        "include_read_operational_stats": false,
                        "format_sql_queries": false,
                        "include_top_n_queries": true,
                        "max_query_duration": 900.0,
                        "apply_view_usage_to_tables": false
                    },
                    "allOf": [
                        {
                            "$ref": "#/definitions/BigQueryUsageConfig"
                        }
                    ]
                },
                "include_usage_statistics": {
                    "title": "Include Usage Statistics",
                    "description": "Generate usage statistic",
                    "default": true,
                    "type": "boolean"
                },
                "capture_table_label_as_tag": {
                    "title": "Capture Table Label As Tag",
                    "description": "Capture BigQuery table labels as DataHub tag",
                    "default": false,
                    "anyOf": [
                        {
                            "type": "boolean"
                        },
                        {
                            "$ref": "#/definitions/AllowDenyPattern"
                        }
                    ]
                },
                "capture_view_label_as_tag": {
                    "title": "Capture View Label As Tag",
                    "description": "Capture BigQuery view labels as DataHub tag",
                    "default": false,
                    "anyOf": [
                        {
                            "type": "boolean"
                        },
                        {
                            "$ref": "#/definitions/AllowDenyPattern"
                        }
                    ]
                },
                "capture_dataset_label_as_tag": {
                    "title": "Capture Dataset Label As Tag",
                    "description": "Capture BigQuery dataset labels as DataHub tag",
                    "default": false,
                    "anyOf": [
                        {
                            "type": "boolean"
                        },
                        {
                            "$ref": "#/definitions/AllowDenyPattern"
                        }
                    ]
                },
                "include_table_constraints": {
                    "title": "Include Table Constraints",
                    "description": "Whether to ingest table constraints. If you know you don't use table constraints, you can disable it to save one extra query per dataset. In general it should be enabled",
                    "default": true,
                    "type": "boolean"
                },
                "include_external_url": {
                    "title": "Include External Url",
                    "description": "Whether to populate BigQuery Console url to Datasets/Tables",
                    "default": true,
                    "type": "boolean"
                },
                "include_table_snapshots": {
                    "title": "Include Table Snapshots",
                    "description": "Whether table snapshots should be ingested.",
                    "default": true,
                    "type": "boolean"
                },
                "debug_include_full_payloads": {
                    "title": "Debug Include Full Payloads",
                    "description": "Include full payload into events. It is only for debugging and internal use.",
                    "default": false,
                    "type": "boolean"
                },
                "number_of_datasets_process_in_batch_if_profiling_enabled": {
                    "title": "Number Of Datasets Process In Batch If Profiling Enabled",
                    "description": "Number of partitioned table queried in batch when getting metadata. This is a low level config property which should be touched with care. This restriction is needed because we query partitions system view which throws error if we try to touch too many tables.",
                    "default": 1000,
                    "type": "integer"
                },
                "use_tables_list_query_v2": {
                    "title": "Use Tables List Query V2",
                    "description": "List tables using an improved query that extracts partitions and last modified timestamps more accurately. Requires the ability to read table data. Automatically enabled when profiling is enabled.",
                    "default": false,
                    "type": "boolean"
                },
                "use_queries_v2": {
                    "title": "Use Queries V2",
                    "description": "If enabled, uses the new queries extractor to extract queries from bigquery.",
                    "default": false,
                    "type": "boolean"
                },
                "column_limit": {
                    "title": "Column Limit",
                    "description": "Maximum number of columns to process in a table. This is a low level config property which should be touched with care. This restriction is needed because excessively wide tables can result in failure to ingest the schema.",
                    "default": 300,
                    "type": "integer"
                },
                "lineage_use_sql_parser": {
                    "title": "Lineage Use Sql Parser",
                    "description": "Use sql parser to resolve view/table lineage.",
                    "default": true,
                    "type": "boolean"
                },
                "lineage_parse_view_ddl": {
                    "title": "Lineage Parse View Ddl",
                    "description": "Sql parse view ddl to get lineage.",
                    "default": true,
                    "type": "boolean"
                },
                "lineage_sql_parser_use_raw_names": {
                    "title": "Lineage Sql Parser Use Raw Names",
                    "description": "This parameter ignores the lowercase pattern stipulated in the SQLParser. NOTE: Ignored if lineage_use_sql_parser is False.",
                    "default": false,
                    "type": "boolean"
                },
                "extract_column_lineage": {
                    "title": "Extract Column Lineage",
                    "description": "If enabled, generate column level lineage. Requires lineage_use_sql_parser to be enabled.",
                    "default": false,
                    "type": "boolean"
                },
                "extract_lineage_from_catalog": {
                    "title": "Extract Lineage From Catalog",
                    "description": "This flag enables the data lineage extraction from Data Lineage API exposed by Google Data Catalog. NOTE: This extractor can't build views lineage. It's recommended to enable the view's DDL parsing. Read the docs to have more information about: https://cloud.google.com/data-catalog/docs/concepts/about-data-lineage",
                    "default": false,
                    "type": "boolean"
                },
                "extract_policy_tags_from_catalog": {
                    "title": "Extract Policy Tags From Catalog",
                    "description": "This flag enables the extraction of policy tags from the Google Data Catalog API. When enabled, the extractor will fetch policy tags associated with BigQuery table columns. For more information about policy tags and column-level security, refer to the documentation: https://cloud.google.com/bigquery/docs/column-level-security-intro",
                    "default": false,
                    "type": "boolean"
                },
                "scheme": {
                    "title": "Scheme",
                    "default": "bigquery",
                    "type": "string"
                },
                "log_page_size": {
                    "title": "Log Page Size",
                    "description": "The number of log item will be queried per page for lineage collection",
                    "default": 1000,
                    "exclusiveMinimum": 0,
                    "type": "integer"
                },
                "include_table_lineage": {
                    "title": "Include Table Lineage",
                    "description": "Option to enable/disable lineage generation. Is enabled by default.",
                    "default": true,
                    "type": "boolean"
                },
                "include_column_lineage_with_gcs": {
                    "title": "Include Column Lineage With Gcs",
                    "description": "When enabled, column-level lineage will be extracted from the gcs.",
                    "default": true,
                    "type": "boolean"
                },
                "max_query_duration": {
                    "title": "Max Query Duration",
                    "description": "Correction to pad start_time and end_time with. For handling the case where the read happens within our time range but the query completion event is delayed and happens after the configured end time.",
                    "default": 900.0,
                    "type": "number",
                    "format": "time-delta"
                },
                "bigquery_audit_metadata_datasets": {
                    "title": "Bigquery Audit Metadata Datasets",
                    "description": "A list of datasets that contain a table named cloudaudit_googleapis_com_data_access which contain BigQuery audit logs, specifically, those containing BigQueryAuditMetadata. It is recommended that the project of the dataset is also specified, for example, projectA.datasetB.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "use_exported_bigquery_audit_metadata": {
                    "title": "Use Exported Bigquery Audit Metadata",
                    "description": "When configured, use BigQueryAuditMetadata in bigquery_audit_metadata_datasets to compute lineage information.",
                    "default": false,
                    "type": "boolean"
                },
                "use_date_sharded_audit_log_tables": {
                    "title": "Use Date Sharded Audit Log Tables",
                    "description": "Whether to read date sharded tables or time partitioned tables when extracting usage from exported audit logs.",
                    "default": false,
                    "type": "boolean"
                },
                "upstream_lineage_in_report": {
                    "title": "Upstream Lineage In Report",
                    "description": "Useful for debugging lineage information. Set to True to see the raw lineage created internally.",
                    "default": false,
                    "type": "boolean"
                },
                "exclude_empty_projects": {
                    "title": "Exclude Empty Projects",
                    "description": "Option to exclude empty projects from being ingested.",
                    "default": false,
                    "type": "boolean"
                },
                "schema_resolution_batch_size": {
                    "title": "Schema Resolution Batch Size",
                    "description": "The number of tables to process in a batch when resolving schema from DataHub.",
                    "default": 100,
                    "hidden_from_schema": true,
                    "type": "integer"
                },
                "max_threads_dataset_parallelism": {
                    "title": "Max Threads Dataset Parallelism",
                    "description": "Number of worker threads to use to parallelize BigQuery Dataset Metadata Extraction. Set to 1 to disable.",
                    "default": 20,
                    "type": "integer"
                },
                "region_qualifiers": {
                    "title": "Region Qualifiers",
                    "description": "BigQuery regions to be scanned for bigquery jobs when using `use_queries_v2`. See [this](https://cloud.google.com/bigquery/docs/information-schema-jobs#scope_and_syntax) for details.",
                    "default": [
                        "region-us",
                        "region-eu"
                    ],
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "additionalProperties": false
        },
        "demo-data": {
            "type": "object",
            "properties": {
                "type": {
                    "type": "string",
                    "enum": [
                        "demo-data"
                    ]
                },
                "config": {
                    "$ref": "#/definitions/demo-data_config"
                }
            },
            "required": [
                "type",
                "config"
            ]
        },
        "demo-data_config": {
            "title": "DemoDataConfig",
            "type": "object",
            "properties": {},
            "additionalProperties": false
        },
        "nifi": {
            "type": "object",
            "properties": {
                "type": {
                    "type": "string",
                    "enum": [
                        "nifi"
                    ]
                },
                "config": {
                    "$ref": "#/definitions/nifi_config"
                }
            },
            "required": [
                "type",
                "config"
            ]
        },
        "nifi_config": {
            "title": "NifiSourceConfig",
            "description": "Any source that produces dataset urns in a single environment should inherit this class",
            "type": "object",
            "properties": {
                "env": {
                    "title": "Env",
                    "description": "The environment that all assets produced by this connector belong to",
                    "default": "PROD",
                    "type": "string"
                },
                "site_url": {
                    "title": "Site Url",
                    "description": "URL for Nifi, ending with /nifi/. e.g. https://mynifi.domain/nifi/",
                    "type": "string"
                },
                "auth": {
                    "description": "Nifi authentication. must be one of : NO_AUTH, SINGLE_USER, CLIENT_CERT, KERBEROS",
                    "default": "NO_AUTH",
                    "allOf": [
                        {
                            "$ref": "#/definitions/NifiAuthType"
                        }
                    ]
                },
                "provenance_days": {
                    "title": "Provenance Days",
                    "description": "time window to analyze provenance events for external datasets",
                    "default": 7,
                    "type": "integer"
                },
                "process_group_pattern": {
                    "title": "Process Group Pattern",
                    "description": "regex patterns for filtering process groups",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "allOf": [
                        {
                            "$ref": "#/definitions/AllowDenyPattern"
                        }
                    ]
                },
                "site_name": {
                    "title": "Site Name",
                    "description": "Site name to identify this site with, useful when using input and output ports receiving remote connections",
                    "default": "default",
                    "type": "string"
                },
                "site_url_to_site_name": {
                    "title": "Site Url To Site Name",
                    "description": "Lookup to find site_name for site_url ending with /nifi/, required if using remote process groups in nifi flow",
                    "default": {},
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "username": {
                    "title": "Username",
                    "description": "Nifi username, must be set for auth = \"SINGLE_USER\"",
                    "type": "string"
                },
                "password": {
                    "title": "Password",
                    "description": "Nifi password, must be set for auth = \"SINGLE_USER\"",
                    "type": "string"
                },
                "client_cert_file": {
                    "title": "Client Cert File",
                    "description": "Path to PEM file containing the public certificates for the user/client identity, must be set for auth = \"CLIENT_CERT\"",
                    "type": "string"
                },
                "client_key_file": {
                    "title": "Client Key File",
                    "description": "Path to PEM file containing the client\u2019s secret key",
                    "type": "string"
                },
                "client_key_password": {
                    "title": "Client Key Password",
                    "description": "The password to decrypt the client_key_file",
                    "type": "string"
                },
                "ca_file": {
                    "title": "Ca File",
                    "description": "Path to PEM file containing certs for the root CA(s) for the NiFi.Set to False to disable SSL verification.",
                    "anyOf": [
                        {
                            "type": "boolean"
                        },
                        {
                            "type": "string"
                        }
                    ]
                },
                "emit_process_group_as_container": {
                    "title": "Emit Process Group As Container",
                    "description": "Whether to emit Nifi process groups as container entities.",
                    "default": false,
                    "type": "boolean"
                },
                "incremental_lineage": {
                    "title": "Incremental Lineage",
                    "description": "When enabled, emits incremental/patch lineage for Nifi processors. When disabled, re-states lineage on each run.",
                    "default": true,
                    "type": "boolean"
                }
            },
            "required": [
                "site_url"
            ],
            "additionalProperties": false
        },
        "mongodb": {
            "type": "object",
            "properties": {
                "type": {
                    "type": "string",
                    "enum": [
                        "mongodb"
                    ]
                },
                "config": {
                    "$ref": "#/definitions/mongodb_config"
                }
            },
            "required": [
                "type",
                "config"
            ]
        },
        "mongodb_config": {
            "title": "MongoDBConfig",
            "description": "Any source that connects to a platform should inherit this class",
            "type": "object",
            "properties": {
                "stateful_ingestion": {
                    "$ref": "#/definitions/StatefulStaleMetadataRemovalConfig"
                },
                "env": {
                    "title": "Env",
                    "description": "The environment that all assets produced by this connector belong to",
                    "default": "PROD",
                    "type": "string"
                },
                "platform_instance": {
                    "title": "Platform Instance",
                    "description": "The instance of the platform that all assets produced by this recipe belong to. This should be unique within the platform. See https://datahubproject.io/docs/platform-instances/ for more details.",
                    "type": "string"
                },
                "connect_uri": {
                    "title": "Connect Uri",
                    "description": "MongoDB connection URI.",
                    "default": "mongodb://localhost",
                    "type": "string"
                },
                "username": {
                    "title": "Username",
                    "description": "MongoDB username.",
                    "type": "string"
                },
                "password": {
                    "title": "Password",
                    "description": "MongoDB password.",
                    "type": "string"
                },
                "authMechanism": {
                    "title": "Authmechanism",
                    "description": "MongoDB authentication mechanism.",
                    "type": "string"
                },
                "options": {
                    "title": "Options",
                    "description": "Additional options to pass to `pymongo.MongoClient()`.",
                    "default": {},
                    "type": "object"
                },
                "enableSchemaInference": {
                    "title": "Enableschemainference",
                    "description": "Whether to infer schemas. ",
                    "default": true,
                    "type": "boolean"
                },
                "schemaSamplingSize": {
                    "title": "Schemasamplingsize",
                    "description": "Number of documents to use when inferring schema size. If set to `null`, all documents will be scanned.",
                    "default": 1000,
                    "exclusiveMinimum": 0,
                    "type": "integer"
                },
                "useRandomSampling": {
                    "title": "Userandomsampling",
                    "description": "If documents for schema inference should be randomly selected. If `False`, documents will be selected from start.",
                    "default": true,
                    "type": "boolean"
                },
                "maxSchemaSize": {
                    "title": "Maxschemasize",
                    "description": "Maximum number of fields to include in the schema.",
                    "default": 300,
                    "exclusiveMinimum": 0,
                    "type": "integer"
                },
                "maxDocumentSize": {
                    "title": "Maxdocumentsize",
                    "default": 16793600,
                    "exclusiveMinimum": 0,
                    "type": "integer"
                },
                "hostingEnvironment": {
                    "description": "Hosting environment of MongoDB, default is SELF_HOSTED, currently support `SELF_HOSTED`, `ATLAS`, `AWS_DOCUMENTDB`",
                    "default": "SELF_HOSTED",
                    "allOf": [
                        {
                            "$ref": "#/definitions/HostingEnvironment"
                        }
                    ]
                },
                "database_pattern": {
                    "title": "Database Pattern",
                    "description": "regex patterns for databases to filter in ingestion.",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "allOf": [
                        {
                            "$ref": "#/definitions/AllowDenyPattern"
                        }
                    ]
                },
                "collection_pattern": {
                    "title": "Collection Pattern",
                    "description": "regex patterns for collections to filter in ingestion.",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "allOf": [
                        {
                            "$ref": "#/definitions/AllowDenyPattern"
                        }
                    ]
                }
            },
            "additionalProperties": false
        },
        "json-schema": {
            "type": "object",
            "properties": {
                "type": {
                    "type": "string",
                    "enum": [
                        "json-schema"
                    ]
                },
                "config": {
                    "$ref": "#/definitions/json-schema_config"
                }
            },
            "required": [
                "type",
                "config"
            ]
        },
        "json-schema_config": {
            "title": "JsonSchemaSourceConfig",
            "description": "Base configuration class for stateful ingestion for source configs to inherit from.",
            "type": "object",
            "properties": {
                "env": {
                    "title": "Env",
                    "description": "The environment that all assets produced by this connector belong to",
                    "default": "PROD",
                    "type": "string"
                },
                "platform_instance": {
                    "title": "Platform Instance",
                    "description": "The instance of the platform that all assets produced by this recipe belong to. This should be unique within the platform. See https://datahubproject.io/docs/platform-instances/ for more details.",
                    "type": "string"
                },
                "stateful_ingestion": {
                    "$ref": "#/definitions/StatefulStaleMetadataRemovalConfig"
                },
                "path": {
                    "title": "Path",
                    "description": "Set this to a single file-path or a directory-path (for recursive traversal) or a remote url. e.g. https://json.schemastore.org/petstore-v1.0.json",
                    "anyOf": [
                        {
                            "type": "string",
                            "format": "file-path"
                        },
                        {
                            "type": "string",
                            "format": "directory-path"
                        },
                        {
                            "type": "string",
                            "minLength": 1,
                            "maxLength": 65536,
                            "format": "uri"
                        }
                    ]
                },
                "platform": {
                    "title": "Platform",
                    "description": "Set this to a platform that you want all schemas to live under. e.g. schemaregistry / schemarepo etc.",
                    "type": "string"
                },
                "use_id_as_base_uri": {
                    "title": "Use Id As Base Uri",
                    "description": "When enabled, uses the `$id` field in the json schema as the base uri for following references.",
                    "default": false,
                    "type": "boolean"
                },
                "uri_replace_pattern": {
                    "title": "Uri Replace Pattern",
                    "description": "Use this if URI-s need to be modified during reference resolution. Simple string match - replace capabilities are supported.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/URIReplacePattern"
                        }
                    ]
                }
            },
            "required": [
                "path",
                "platform"
            ],
            "additionalProperties": false
        },
        "openapi": {
            "type": "object",
            "properties": {
                "type": {
                    "type": "string",
                    "enum": [
                        "openapi"
                    ]
                },
                "config": {
                    "$ref": "#/definitions/openapi_config"
                }
            },
            "required": [
                "type",
                "config"
            ]
        },
        "openapi_config": {
            "title": "OpenApiConfig",
            "type": "object",
            "properties": {
                "name": {
                    "title": "Name",
                    "description": "Name of ingestion.",
                    "type": "string"
                },
                "url": {
                    "title": "Url",
                    "description": "Endpoint URL. e.g. https://example.com",
                    "type": "string"
                },
                "swagger_file": {
                    "title": "Swagger File",
                    "description": "Route for access to the swagger file. e.g. openapi.json",
                    "type": "string"
                },
                "ignore_endpoints": {
                    "title": "Ignore Endpoints",
                    "description": "List of endpoints to ignore during ingestion.",
                    "default": [],
                    "type": "array",
                    "items": {}
                },
                "username": {
                    "title": "Username",
                    "description": "Username used for basic HTTP authentication.",
                    "default": "",
                    "type": "string"
                },
                "password": {
                    "title": "Password",
                    "description": "Password used for basic HTTP authentication.",
                    "default": "",
                    "type": "string"
                },
                "proxies": {
                    "title": "Proxies",
                    "description": "Eg. `{'http': 'http://10.10.1.10:3128', 'https': 'http://10.10.1.10:1080'}`.If authentication is required, add it to the proxy url directly e.g. `http://user:pass@10.10.1.10:3128/`.",
                    "type": "object"
                },
                "forced_examples": {
                    "title": "Forced Examples",
                    "description": "If no example is provided for a route, it is possible to create one using forced_example.",
                    "default": {},
                    "type": "object"
                },
                "token": {
                    "title": "Token",
                    "description": "Token for endpoint authentication.",
                    "type": "string"
                },
                "bearer_token": {
                    "title": "Bearer Token",
                    "description": "Bearer token for endpoint authentication.",
                    "type": "string"
                },
                "get_token": {
                    "title": "Get Token",
                    "description": "Retrieving a token from the endpoint.",
                    "default": {},
                    "type": "object"
                }
            },
            "required": [
                "name",
                "url",
                "swagger_file"
            ],
            "additionalProperties": false
        },
        "starburst-trino-usage": {
            "type": "object",
            "properties": {
                "type": {
                    "type": "string",
                    "enum": [
                        "starburst-trino-usage"
                    ]
                },
                "config": {
                    "$ref": "#/definitions/starburst-trino-usage_config"
                }
            },
            "required": [
                "type",
                "config"
            ]
        },
        "starburst-trino-usage_config": {
            "title": "TrinoUsageConfig",
            "description": "Base configuration class for stateful ingestion for source configs to inherit from.",
            "type": "object",
            "properties": {
                "bucket_duration": {
                    "description": "Size of the time window to aggregate usage stats.",
                    "default": "DAY",
                    "allOf": [
                        {
                            "$ref": "#/definitions/BucketDuration"
                        }
                    ]
                },
                "end_time": {
                    "title": "End Time",
                    "description": "Latest date of lineage/usage to consider. Default: Current time in UTC",
                    "type": "string",
                    "format": "date-time"
                },
                "start_time": {
                    "title": "Start Time",
                    "description": "Earliest date of lineage/usage to consider. Default: Last full day in UTC (or hour, depending on `bucket_duration`). You can also specify relative time with respect to end_time such as '-7 days' Or '-7d'.",
                    "type": "string",
                    "format": "date-time"
                },
                "top_n_queries": {
                    "title": "Top N Queries",
                    "description": "Number of top queries to save to each table.",
                    "default": 10,
                    "exclusiveMinimum": 0,
                    "type": "integer"
                },
                "user_email_pattern": {
                    "title": "User Email Pattern",
                    "description": "regex patterns for user emails to filter in usage.",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "allOf": [
                        {
                            "$ref": "#/definitions/AllowDenyPattern"
                        }
                    ]
                },
                "include_operational_stats": {
                    "title": "Include Operational Stats",
                    "description": "Whether to display operational stats.",
                    "default": true,
                    "type": "boolean"
                },
                "include_read_operational_stats": {
                    "title": "Include Read Operational Stats",
                    "description": "Whether to report read operational stats. Experimental.",
                    "default": false,
                    "type": "boolean"
                },
                "format_sql_queries": {
                    "title": "Format Sql Queries",
                    "description": "Whether to format sql queries",
                    "default": false,
                    "type": "boolean"
                },
                "include_top_n_queries": {
                    "title": "Include Top N Queries",
                    "description": "Whether to ingest the top_n_queries.",
                    "default": true,
                    "type": "boolean"
                },
                "schema_pattern": {
                    "title": "Schema Pattern",
                    "description": "Regex patterns for schemas to filter in ingestion. Specify regex to only match the schema name. e.g. to match all tables in schema analytics, use the regex 'analytics'",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "allOf": [
                        {
                            "$ref": "#/definitions/AllowDenyPattern"
                        }
                    ]
                },
                "table_pattern": {
                    "title": "Table Pattern",
                    "description": "Regex patterns for tables to filter in ingestion. Specify regex to match the entire table name in database.schema.table format. e.g. to match all tables starting with customer in Customer database and public schema, use the regex 'Customer.public.customer.*'",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "allOf": [
                        {
                            "$ref": "#/definitions/AllowDenyPattern"
                        }
                    ]
                },
                "view_pattern": {
                    "title": "View Pattern",
                    "description": "Regex patterns for views to filter in ingestion. Note: Defaults to table_pattern if not specified. Specify regex to match the entire view name in database.schema.view format. e.g. to match all views starting with customer in Customer database and public schema, use the regex 'Customer.public.customer.*'",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "allOf": [
                        {
                            "$ref": "#/definitions/AllowDenyPattern"
                        }
                    ]
                },
                "classification": {
                    "title": "Classification",
                    "description": "For details, refer to [Classification](../../../../metadata-ingestion/docs/dev_guides/classification.md).",
                    "default": {
                        "enabled": false,
                        "sample_size": 100,
                        "max_workers": 4,
                        "table_pattern": {
                            "allow": [
                                ".*"
                            ],
                            "deny": [],
                            "ignoreCase": true
                        },
                        "column_pattern": {
                            "allow": [
                                ".*"
                            ],
                            "deny": [],
                            "ignoreCase": true
                        },
                        "info_type_to_term": {},
                        "classifiers": [
                            {
                                "type": "datahub",
                                "config": null
                            }
                        ]
                    },
                    "allOf": [
                        {
                            "$ref": "#/definitions/ClassificationConfig"
                        }
                    ]
                },
                "incremental_lineage": {
                    "title": "Incremental Lineage",
                    "description": "When enabled, emits lineage as incremental to existing lineage already in DataHub. When disabled, re-states lineage on each run.",
                    "default": false,
                    "type": "boolean"
                },
                "convert_urns_to_lowercase": {
                    "title": "Convert Urns To Lowercase",
                    "description": "Whether to convert dataset urns to lowercase.",
                    "default": false,
                    "type": "boolean"
                },
                "env": {
                    "title": "Env",
                    "description": "The environment that all assets produced by this connector belong to",
                    "default": "PROD",
                    "type": "string"
                },
                "platform_instance": {
                    "title": "Platform Instance",
                    "description": "The instance of the platform that all assets produced by this recipe belong to. This should be unique within the platform. See https://datahubproject.io/docs/platform-instances/ for more details.",
                    "type": "string"
                },
                "stateful_ingestion": {
                    "$ref": "#/definitions/StatefulStaleMetadataRemovalConfig"
                },
                "options": {
                    "title": "Options",
                    "default": {},
                    "type": "object"
                },
                "profile_pattern": {
                    "title": "Profile Pattern",
                    "description": "Regex patterns to filter tables (or specific columns) for profiling during ingestion. Note that only tables allowed by the `table_pattern` will be considered.",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "allOf": [
                        {
                            "$ref": "#/definitions/AllowDenyPattern"
                        }
                    ]
                },
                "domain": {
                    "title": "Domain",
                    "description": "Attach domains to databases, schemas or tables during ingestion using regex patterns. Domain key can be a guid like *urn:li:domain:ec428203-ce86-4db3-985d-5a8ee6df32ba* or a string like \"Marketing\".) If you provide strings, then datahub will attempt to resolve this name to a guid, and will error out if this fails. There can be multiple domain keys specified.",
                    "default": {},
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/definitions/AllowDenyPattern"
                    }
                },
                "include_views": {
                    "title": "Include Views",
                    "description": "Whether views should be ingested.",
                    "default": true,
                    "type": "boolean"
                },
                "include_tables": {
                    "title": "Include Tables",
                    "description": "Whether tables should be ingested.",
                    "default": true,
                    "type": "boolean"
                },
                "include_table_location_lineage": {
                    "title": "Include Table Location Lineage",
                    "description": "If the source supports it, include table lineage to the underlying storage location.",
                    "default": true,
                    "type": "boolean"
                },
                "include_view_lineage": {
                    "title": "Include View Lineage",
                    "description": "Populates view->view and table->view lineage using DataHub's sql parser.",
                    "default": true,
                    "type": "boolean"
                },
                "include_view_column_lineage": {
                    "title": "Include View Column Lineage",
                    "description": "Populates column-level lineage for  view->view and table->view lineage using DataHub's sql parser. Requires `include_view_lineage` to be enabled.",
                    "default": true,
                    "type": "boolean"
                },
                "use_file_backed_cache": {
                    "title": "Use File Backed Cache",
                    "description": "Whether to use a file backed cache for the view definitions.",
                    "default": true,
                    "type": "boolean"
                },
                "profiling": {
                    "title": "Profiling",
                    "default": {
                        "enabled": false,
                        "operation_config": {
                            "lower_freq_profile_enabled": false,
                            "profile_day_of_week": null,
                            "profile_date_of_month": null
                        },
                        "limit": null,
                        "offset": null,
                        "profile_table_level_only": false,
                        "include_field_null_count": true,
                        "include_field_distinct_count": true,
                        "include_field_min_value": true,
                        "include_field_max_value": true,
                        "include_field_mean_value": true,
                        "include_field_median_value": true,
                        "include_field_stddev_value": true,
                        "include_field_quantiles": false,
                        "include_field_distinct_value_frequencies": false,
                        "include_field_histogram": false,
                        "include_field_sample_values": true,
                        "max_workers": 20,
                        "report_dropped_profiles": false,
                        "turn_off_expensive_profiling_metrics": false,
                        "field_sample_values_limit": 20,
                        "max_number_of_fields_to_profile": null,
                        "profile_if_updated_since_days": null,
                        "profile_table_size_limit": 5,
                        "profile_table_row_limit": 5000000,
                        "profile_table_row_count_estimate_only": false,
                        "query_combiner_enabled": true,
                        "catch_exceptions": true,
                        "partition_profiling_enabled": true,
                        "partition_datetime": null,
                        "use_sampling": true,
                        "sample_size": 10000,
                        "profile_external_tables": false,
                        "tags_to_ignore_sampling": null,
                        "profile_nested_fields": false
                    },
                    "allOf": [
                        {
                            "$ref": "#/definitions/GEProfilingConfig"
                        }
                    ]
                },
                "username": {
                    "title": "Username",
                    "description": "username",
                    "type": "string"
                },
                "password": {
                    "title": "Password",
                    "description": "password",
                    "type": "string",
                    "writeOnly": true,
                    "format": "password"
                },
                "host_port": {
                    "title": "Host Port",
                    "description": "host URL",
                    "type": "string"
                },
                "database": {
                    "title": "Database",
                    "description": "The name of the catalog from getting the usage",
                    "type": "string"
                },
                "sqlalchemy_uri": {
                    "title": "Sqlalchemy Uri",
                    "description": "URI of database to connect to. See https://docs.sqlalchemy.org/en/14/core/engines.html#database-urls. Takes precedence over other connection parameters.",
                    "type": "string"
                },
                "catalog_to_connector_details": {
                    "title": "Catalog To Connector Details",
                    "description": "A mapping of trino catalog to its connector details like connector database, env and platform instance.This configuration is used to build lineage to the underlying connector. Use catalog name as key.",
                    "default": {},
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/definitions/ConnectorDetail"
                    }
                },
                "ingest_lineage_to_connectors": {
                    "title": "Ingest Lineage To Connectors",
                    "description": "Whether lineage of datasets to connectors should be ingested",
                    "default": true,
                    "type": "boolean"
                },
                "trino_as_primary": {
                    "title": "Trino As Primary",
                    "description": "Experimental feature. Whether trino dataset should be primary entity of the set of siblings",
                    "default": true,
                    "type": "boolean"
                },
                "email_domain": {
                    "title": "Email Domain",
                    "description": "The email domain which will be appended to the users ",
                    "type": "string"
                },
                "audit_catalog": {
                    "title": "Audit Catalog",
                    "description": "The catalog name where the audit table can be found ",
                    "type": "string"
                },
                "audit_schema": {
                    "title": "Audit Schema",
                    "description": "The schema name where the audit table can be found",
                    "type": "string"
                }
            },
            "required": [
                "host_port",
                "database",
                "email_domain",
                "audit_catalog",
                "audit_schema"
            ],
            "additionalProperties": false
        },
        "sigma": {
            "type": "object",
            "properties": {
                "type": {
                    "type": "string",
                    "enum": [
                        "sigma"
                    ]
                },
                "config": {
                    "$ref": "#/definitions/sigma_config"
                }
            },
            "required": [
                "type",
                "config"
            ]
        },
        "sigma_config": {
            "title": "SigmaSourceConfig",
            "description": "Base configuration class for stateful ingestion for source configs to inherit from.",
            "type": "object",
            "properties": {
                "env": {
                    "title": "Env",
                    "description": "The environment that all assets produced by this connector belong to",
                    "default": "PROD",
                    "type": "string"
                },
                "platform_instance": {
                    "title": "Platform Instance",
                    "description": "The instance of the platform that all assets produced by this recipe belong to. This should be unique within the platform. See https://datahubproject.io/docs/platform-instances/ for more details.",
                    "type": "string"
                },
                "stateful_ingestion": {
                    "title": "Stateful Ingestion",
                    "description": "Sigma Stateful Ingestion Config.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/StatefulStaleMetadataRemovalConfig"
                        }
                    ]
                },
                "api_url": {
                    "title": "Api Url",
                    "description": "Sigma API hosted URL.",
                    "default": "https://aws-api.sigmacomputing.com/v2",
                    "type": "string"
                },
                "client_id": {
                    "title": "Client Id",
                    "description": "Sigma Client ID",
                    "type": "string"
                },
                "client_secret": {
                    "title": "Client Secret",
                    "description": "Sigma Client Secret",
                    "type": "string"
                },
                "workspace_pattern": {
                    "title": "Workspace Pattern",
                    "description": "Regex patterns to filter Sigma workspaces in ingestion.Mention 'My documents' if personal entities also need to ingest.",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "allOf": [
                        {
                            "$ref": "#/definitions/AllowDenyPattern"
                        }
                    ]
                },
                "ingest_owner": {
                    "title": "Ingest Owner",
                    "description": "Ingest Owner from source. This will override Owner info entered from UI.",
                    "default": true,
                    "type": "boolean"
                },
                "ingest_shared_entities": {
                    "title": "Ingest Shared Entities",
                    "description": "Whether to ingest the shared entities or not.",
                    "default": false,
                    "type": "boolean"
                },
                "extract_lineage": {
                    "title": "Extract Lineage",
                    "description": "Whether to extract lineage of workbook's elements and datasets or not.",
                    "default": true,
                    "type": "boolean"
                },
                "workbook_lineage_pattern": {
                    "title": "Workbook Lineage Pattern",
                    "description": "Regex patterns to filter workbook's elements and datasets lineage in ingestion.Requires extract_lineage to be enabled.",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "allOf": [
                        {
                            "$ref": "#/definitions/AllowDenyPattern"
                        }
                    ]
                },
                "chart_sources_platform_mapping": {
                    "title": "Chart Sources Platform Mapping",
                    "description": "A mapping of the sigma workspace/workbook/chart folder path to all chart's data sources platform details present inside that folder path.",
                    "default": {},
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/definitions/PlatformDetail"
                    }
                }
            },
            "required": [
                "client_id",
                "client_secret"
            ],
            "additionalProperties": false
        },
        "okta": {
            "type": "object",
            "properties": {
                "type": {
                    "type": "string",
                    "enum": [
                        "okta"
                    ]
                },
                "config": {
                    "$ref": "#/definitions/okta_config"
                }
            },
            "required": [
                "type",
                "config"
            ]
        },
        "okta_config": {
            "title": "OktaConfig",
            "description": "Base configuration class for stateful ingestion for source configs to inherit from.",
            "type": "object",
            "properties": {
                "stateful_ingestion": {
                    "title": "Stateful Ingestion",
                    "description": "Okta Stateful Ingestion Config.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/StatefulStaleMetadataRemovalConfig"
                        }
                    ]
                },
                "okta_domain": {
                    "title": "Okta Domain",
                    "description": "The location of your Okta Domain, without a protocol. Can be found in Okta Developer console. e.g. dev-33231928.okta.com",
                    "type": "string"
                },
                "okta_api_token": {
                    "title": "Okta Api Token",
                    "description": "An API token generated for the DataHub application inside your Okta Developer Console. e.g. 00be4R_M2MzDqXawbWgfKGpKee0kuEOfX1RCQSRx00",
                    "type": "string"
                },
                "ingest_users": {
                    "title": "Ingest Users",
                    "description": "Whether users should be ingested into DataHub.",
                    "default": true,
                    "type": "boolean"
                },
                "ingest_groups": {
                    "title": "Ingest Groups",
                    "description": "Whether groups should be ingested into DataHub.",
                    "default": true,
                    "type": "boolean"
                },
                "ingest_group_membership": {
                    "title": "Ingest Group Membership",
                    "description": "Whether group membership should be ingested into DataHub. ingest_groups must be True if this is True.",
                    "default": true,
                    "type": "boolean"
                },
                "okta_profile_to_username_attr": {
                    "title": "Okta Profile To Username Attr",
                    "description": "Which Okta User Profile attribute to use as input to DataHub username mapping. Common values used are - login, email.",
                    "default": "email",
                    "type": "string"
                },
                "okta_profile_to_username_regex": {
                    "title": "Okta Profile To Username Regex",
                    "description": "A regex used to parse the DataHub username from the attribute specified in `okta_profile_to_username_attr`.",
                    "default": "(.*)",
                    "type": "string"
                },
                "okta_profile_to_group_name_attr": {
                    "title": "Okta Profile To Group Name Attr",
                    "description": "Which Okta Group Profile attribute to use as input to DataHub group name mapping.",
                    "default": "name",
                    "type": "string"
                },
                "okta_profile_to_group_name_regex": {
                    "title": "Okta Profile To Group Name Regex",
                    "description": "A regex used to parse the DataHub group name from the attribute specified in `okta_profile_to_group_name_attr`.",
                    "default": "(.*)",
                    "type": "string"
                },
                "include_deprovisioned_users": {
                    "title": "Include Deprovisioned Users",
                    "description": "Whether to ingest users in the DEPROVISIONED state from Okta.",
                    "default": false,
                    "type": "boolean"
                },
                "include_suspended_users": {
                    "title": "Include Suspended Users",
                    "description": "Whether to ingest users in the SUSPENDED state from Okta.",
                    "default": false,
                    "type": "boolean"
                },
                "page_size": {
                    "title": "Page Size",
                    "description": "The number of entities requested from Okta's REST APIs in one request.",
                    "default": 100,
                    "type": "integer"
                },
                "delay_seconds": {
                    "title": "Delay Seconds",
                    "description": "Number of seconds to wait between calls to Okta's REST APIs. (Okta rate limits). Defaults to 10ms.",
                    "default": 0.01,
                    "anyOf": [
                        {
                            "type": "number"
                        },
                        {
                            "type": "integer"
                        }
                    ]
                },
                "okta_users_filter": {
                    "title": "Okta Users Filter",
                    "description": "Okta filter expression (not regex) for ingesting users. Only one of `okta_users_filter` and `okta_users_search` can be set. See (https://developer.okta.com/docs/reference/api/users/#list-users-with-a-filter) for more info.",
                    "type": "string"
                },
                "okta_users_search": {
                    "title": "Okta Users Search",
                    "description": "Okta search expression (not regex) for ingesting users. Only one of `okta_users_filter` and `okta_users_search` can be set. See (https://developer.okta.com/docs/reference/api/users/#list-users-with-search) for more info.",
                    "type": "string"
                },
                "okta_groups_filter": {
                    "title": "Okta Groups Filter",
                    "description": "Okta filter expression (not regex) for ingesting groups. Only one of `okta_groups_filter` and `okta_groups_search` can be set. See (https://developer.okta.com/docs/reference/api/groups/#filters) for more info.",
                    "type": "string"
                },
                "okta_groups_search": {
                    "title": "Okta Groups Search",
                    "description": "Okta search expression (not regex) for ingesting groups. Only one of `okta_groups_filter` and `okta_groups_search` can be set. See (https://developer.okta.com/docs/reference/api/groups/#list-groups-with-search) for more info.",
                    "type": "string"
                },
                "skip_users_without_a_group": {
                    "title": "Skip Users Without A Group",
                    "description": "Whether to only ingest users that are members of groups. If this is set to False, all users will be ingested regardless of group membership.",
                    "default": false,
                    "type": "boolean"
                },
                "mask_group_id": {
                    "title": "Mask Group Id",
                    "default": true,
                    "type": "boolean"
                },
                "mask_user_id": {
                    "title": "Mask User Id",
                    "default": true,
                    "type": "boolean"
                }
            },
            "required": [
                "okta_domain",
                "okta_api_token"
            ],
            "additionalProperties": false
        },
        "mode": {
            "type": "object",
            "properties": {
                "type": {
                    "type": "string",
                    "enum": [
                        "mode"
                    ]
                },
                "config": {
                    "$ref": "#/definitions/mode_config"
                }
            },
            "required": [
                "type",
                "config"
            ]
        },
        "mode_config": {
            "title": "ModeConfig",
            "description": "Base configuration class for stateful ingestion for source configs to inherit from.",
            "type": "object",
            "properties": {
                "env": {
                    "title": "Env",
                    "description": "The environment that all assets produced by this connector belong to",
                    "default": "PROD",
                    "type": "string"
                },
                "platform_instance_map": {
                    "title": "Platform Instance Map",
                    "description": "A holder for platform -> platform_instance mappings to generate correct dataset urns",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "stateful_ingestion": {
                    "$ref": "#/definitions/StatefulStaleMetadataRemovalConfig"
                },
                "connect_uri": {
                    "title": "Connect Uri",
                    "description": "Mode host URL.",
                    "default": "https://app.mode.com",
                    "type": "string"
                },
                "token": {
                    "title": "Token",
                    "description": "When creating workspace API key this is the 'Key ID'.",
                    "type": "string"
                },
                "password": {
                    "title": "Password",
                    "description": "When creating workspace API key this is the 'Secret'.",
                    "type": "string",
                    "writeOnly": true,
                    "format": "password"
                },
                "exclude_restricted": {
                    "title": "Exclude Restricted",
                    "description": "Exclude restricted collections",
                    "default": false,
                    "type": "boolean"
                },
                "workspace": {
                    "title": "Workspace",
                    "description": "The Mode workspace name. Find it in Settings > Workspace > Details.",
                    "type": "string"
                },
                "default_schema": {
                    "title": "Default Schema",
                    "description": "Default schema to use when schema is not provided in an SQL query",
                    "default": "public",
                    "type": "string"
                },
                "space_pattern": {
                    "title": "Space Pattern",
                    "description": "Regex patterns for mode spaces to filter in ingestion (Spaces named as 'Personal' are filtered by default.) Specify regex to only match the space name. e.g. to only ingest space named analytics, use the regex 'analytics'",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [
                            "^Personal$"
                        ],
                        "ignoreCase": true
                    },
                    "allOf": [
                        {
                            "$ref": "#/definitions/AllowDenyPattern"
                        }
                    ]
                },
                "owner_username_instead_of_email": {
                    "title": "Owner Username Instead Of Email",
                    "description": "Use username for owner URN instead of Email",
                    "default": true,
                    "type": "boolean"
                },
                "api_options": {
                    "title": "Api Options",
                    "description": "Retry/Wait settings for Mode API to avoid \"Too many Requests\" error. See Mode API Options below",
                    "default": {
                        "retry_backoff_multiplier": 2,
                        "max_retry_interval": 10,
                        "max_attempts": 5,
                        "timeout": 40
                    },
                    "allOf": [
                        {
                            "$ref": "#/definitions/ModeAPIConfig"
                        }
                    ]
                },
                "ingest_embed_url": {
                    "title": "Ingest Embed Url",
                    "description": "Whether to Ingest embed URL for Reports",
                    "default": true,
                    "type": "boolean"
                },
                "tag_measures_and_dimensions": {
                    "title": "Tag Measures And Dimensions",
                    "description": "Tag measures and dimensions in the schema",
                    "default": true,
                    "type": "boolean"
                }
            },
            "required": [
                "token",
                "password",
                "workspace"
            ],
            "additionalProperties": false
        },
        "file": {
            "type": "object",
            "properties": {
                "type": {
                    "type": "string",
                    "enum": [
                        "file"
                    ]
                },
                "config": {
                    "$ref": "#/definitions/file_config"
                }
            },
            "required": [
                "type",
                "config"
            ]
        },
        "file_config": {
            "title": "FileSourceConfig",
            "description": "Base configuration class for stateful ingestion for source configs to inherit from.",
            "type": "object",
            "properties": {
                "stateful_ingestion": {
                    "$ref": "#/definitions/StatefulStaleMetadataRemovalConfig"
                },
                "path": {
                    "title": "Path",
                    "description": "File path to folder or file to ingest, or URL to a remote file. If pointed to a folder, all files with extension {file_extension} (default json) within that folder will be processed.",
                    "type": "string"
                },
                "file_extension": {
                    "title": "File Extension",
                    "description": "When providing a folder to use to read files, set this field to control file extensions that you want the source to process. * is a special value that means process every file regardless of extension",
                    "default": ".json",
                    "type": "string"
                },
                "read_mode": {
                    "default": "AUTO",
                    "allOf": [
                        {
                            "$ref": "#/definitions/FileReadMode"
                        }
                    ]
                },
                "aspect": {
                    "title": "Aspect",
                    "description": "Set to an aspect to only read this aspect for ingestion.",
                    "type": "string"
                },
                "count_all_before_starting": {
                    "title": "Count All Before Starting",
                    "description": "When enabled, counts total number of records in the file before starting. Used for accurate estimation of completion time. Turn it off if startup time is too high.",
                    "default": true,
                    "type": "boolean"
                }
            },
            "required": [
                "path"
            ]
        },
        "postgres": {
            "type": "object",
            "properties": {
                "type": {
                    "type": "string",
                    "enum": [
                        "postgres"
                    ]
                },
                "config": {
                    "$ref": "#/definitions/postgres_config"
                }
            },
            "required": [
                "type",
                "config"
            ]
        },
        "postgres_config": {
            "title": "PostgresConfig",
            "description": "Base configuration class for stateful ingestion for source configs to inherit from.",
            "type": "object",
            "properties": {
                "schema_pattern": {
                    "title": "Schema Pattern",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [
                            "information_schema"
                        ],
                        "ignoreCase": true
                    },
                    "allOf": [
                        {
                            "$ref": "#/definitions/AllowDenyPattern"
                        }
                    ]
                },
                "table_pattern": {
                    "title": "Table Pattern",
                    "description": "Regex patterns for tables to filter in ingestion. Specify regex to match the entire table name in database.schema.table format. e.g. to match all tables starting with customer in Customer database and public schema, use the regex 'Customer.public.customer.*'",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "allOf": [
                        {
                            "$ref": "#/definitions/AllowDenyPattern"
                        }
                    ]
                },
                "view_pattern": {
                    "title": "View Pattern",
                    "description": "Regex patterns for views to filter in ingestion. Note: Defaults to table_pattern if not specified. Specify regex to match the entire view name in database.schema.view format. e.g. to match all views starting with customer in Customer database and public schema, use the regex 'Customer.public.customer.*'",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "allOf": [
                        {
                            "$ref": "#/definitions/AllowDenyPattern"
                        }
                    ]
                },
                "classification": {
                    "title": "Classification",
                    "description": "For details, refer to [Classification](../../../../metadata-ingestion/docs/dev_guides/classification.md).",
                    "default": {
                        "enabled": false,
                        "sample_size": 100,
                        "max_workers": 4,
                        "table_pattern": {
                            "allow": [
                                ".*"
                            ],
                            "deny": [],
                            "ignoreCase": true
                        },
                        "column_pattern": {
                            "allow": [
                                ".*"
                            ],
                            "deny": [],
                            "ignoreCase": true
                        },
                        "info_type_to_term": {},
                        "classifiers": [
                            {
                                "type": "datahub",
                                "config": null
                            }
                        ]
                    },
                    "allOf": [
                        {
                            "$ref": "#/definitions/ClassificationConfig"
                        }
                    ]
                },
                "incremental_lineage": {
                    "title": "Incremental Lineage",
                    "description": "When enabled, emits lineage as incremental to existing lineage already in DataHub. When disabled, re-states lineage on each run.",
                    "default": false,
                    "type": "boolean"
                },
                "convert_urns_to_lowercase": {
                    "title": "Convert Urns To Lowercase",
                    "description": "Whether to convert dataset urns to lowercase.",
                    "default": false,
                    "type": "boolean"
                },
                "env": {
                    "title": "Env",
                    "description": "The environment that all assets produced by this connector belong to",
                    "default": "PROD",
                    "type": "string"
                },
                "platform_instance": {
                    "title": "Platform Instance",
                    "description": "The instance of the platform that all assets produced by this recipe belong to. This should be unique within the platform. See https://datahubproject.io/docs/platform-instances/ for more details.",
                    "type": "string"
                },
                "stateful_ingestion": {
                    "$ref": "#/definitions/StatefulStaleMetadataRemovalConfig"
                },
                "options": {
                    "title": "Options",
                    "description": "Any options specified here will be passed to [SQLAlchemy.create_engine](https://docs.sqlalchemy.org/en/14/core/engines.html#sqlalchemy.create_engine) as kwargs. To set connection arguments in the URL, specify them under `connect_args`.",
                    "type": "object"
                },
                "profile_pattern": {
                    "title": "Profile Pattern",
                    "description": "Regex patterns to filter tables (or specific columns) for profiling during ingestion. Note that only tables allowed by the `table_pattern` will be considered.",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "allOf": [
                        {
                            "$ref": "#/definitions/AllowDenyPattern"
                        }
                    ]
                },
                "domain": {
                    "title": "Domain",
                    "description": "Attach domains to databases, schemas or tables during ingestion using regex patterns. Domain key can be a guid like *urn:li:domain:ec428203-ce86-4db3-985d-5a8ee6df32ba* or a string like \"Marketing\".) If you provide strings, then datahub will attempt to resolve this name to a guid, and will error out if this fails. There can be multiple domain keys specified.",
                    "default": {},
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/definitions/AllowDenyPattern"
                    }
                },
                "include_views": {
                    "title": "Include Views",
                    "description": "Whether views should be ingested.",
                    "default": true,
                    "type": "boolean"
                },
                "include_tables": {
                    "title": "Include Tables",
                    "description": "Whether tables should be ingested.",
                    "default": true,
                    "type": "boolean"
                },
                "include_table_location_lineage": {
                    "title": "Include Table Location Lineage",
                    "description": "If the source supports it, include table lineage to the underlying storage location.",
                    "default": true,
                    "type": "boolean"
                },
                "include_view_lineage": {
                    "title": "Include View Lineage",
                    "description": "Populates view->view and table->view lineage using DataHub's sql parser.",
                    "default": true,
                    "type": "boolean"
                },
                "include_view_column_lineage": {
                    "title": "Include View Column Lineage",
                    "description": "Populates column-level lineage for  view->view and table->view lineage using DataHub's sql parser. Requires `include_view_lineage` to be enabled.",
                    "default": true,
                    "type": "boolean"
                },
                "use_file_backed_cache": {
                    "title": "Use File Backed Cache",
                    "description": "Whether to use a file backed cache for the view definitions.",
                    "default": true,
                    "type": "boolean"
                },
                "profiling": {
                    "title": "Profiling",
                    "default": {
                        "enabled": false,
                        "operation_config": {
                            "lower_freq_profile_enabled": false,
                            "profile_day_of_week": null,
                            "profile_date_of_month": null
                        },
                        "limit": null,
                        "offset": null,
                        "profile_table_level_only": false,
                        "include_field_null_count": true,
                        "include_field_distinct_count": true,
                        "include_field_min_value": true,
                        "include_field_max_value": true,
                        "include_field_mean_value": true,
                        "include_field_median_value": true,
                        "include_field_stddev_value": true,
                        "include_field_quantiles": false,
                        "include_field_distinct_value_frequencies": false,
                        "include_field_histogram": false,
                        "include_field_sample_values": true,
                        "max_workers": 20,
                        "report_dropped_profiles": false,
                        "turn_off_expensive_profiling_metrics": false,
                        "field_sample_values_limit": 20,
                        "max_number_of_fields_to_profile": null,
                        "profile_if_updated_since_days": null,
                        "profile_table_size_limit": 5,
                        "profile_table_row_limit": 5000000,
                        "profile_table_row_count_estimate_only": false,
                        "query_combiner_enabled": true,
                        "catch_exceptions": true,
                        "partition_profiling_enabled": true,
                        "partition_datetime": null,
                        "use_sampling": true,
                        "sample_size": 10000,
                        "profile_external_tables": false,
                        "tags_to_ignore_sampling": null,
                        "profile_nested_fields": false
                    },
                    "allOf": [
                        {
                            "$ref": "#/definitions/GEProfilingConfig"
                        }
                    ]
                },
                "username": {
                    "title": "Username",
                    "description": "username",
                    "type": "string"
                },
                "password": {
                    "title": "Password",
                    "description": "password",
                    "type": "string",
                    "writeOnly": true,
                    "format": "password"
                },
                "host_port": {
                    "title": "Host Port",
                    "description": "host URL",
                    "type": "string"
                },
                "database": {
                    "title": "Database",
                    "description": "database (catalog). If set to Null, all databases will be considered for ingestion.",
                    "type": "string"
                },
                "scheme": {
                    "title": "Scheme",
                    "description": "database scheme",
                    "default": "postgresql+psycopg2",
                    "type": "string"
                },
                "sqlalchemy_uri": {
                    "title": "Sqlalchemy Uri",
                    "description": "URI of database to connect to. See https://docs.sqlalchemy.org/en/14/core/engines.html#database-urls. Takes precedence over other connection parameters.",
                    "type": "string"
                },
                "database_pattern": {
                    "title": "Database Pattern",
                    "description": "Regex patterns for databases to filter in ingestion. Note: this is not used if `database` or `sqlalchemy_uri` are provided.",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "allOf": [
                        {
                            "$ref": "#/definitions/AllowDenyPattern"
                        }
                    ]
                },
                "initial_database": {
                    "title": "Initial Database",
                    "description": "Initial database used to query for the list of databases, when ingesting multiple databases. Note: this is not used if `database` or `sqlalchemy_uri` are provided.",
                    "default": "postgres",
                    "type": "string"
                }
            },
            "required": [
                "host_port"
            ],
            "additionalProperties": false
        },
        "dbt": {
            "type": "object",
            "properties": {
                "type": {
                    "type": "string",
                    "enum": [
                        "dbt"
                    ]
                },
                "config": {
                    "$ref": "#/definitions/dbt_config"
                }
            },
            "required": [
                "type",
                "config"
            ]
        },
        "dbt_config": {
            "title": "DBTCoreConfig",
            "description": "Base configuration class for stateful ingestion for source configs to inherit from.",
            "type": "object",
            "properties": {
                "incremental_lineage": {
                    "title": "Incremental Lineage",
                    "description": "When enabled, emits incremental/patch lineage for non-dbt entities. When disabled, re-states lineage on each run.",
                    "default": true,
                    "type": "boolean"
                },
                "env": {
                    "title": "Env",
                    "description": "Environment to use in namespace when constructing URNs.",
                    "default": "PROD",
                    "type": "string"
                },
                "platform_instance": {
                    "title": "Platform Instance",
                    "description": "The instance of the platform that all assets produced by this recipe belong to. This should be unique within the platform. See https://datahubproject.io/docs/platform-instances/ for more details.",
                    "type": "string"
                },
                "stateful_ingestion": {
                    "title": "Stateful Ingestion",
                    "description": "DBT Stateful Ingestion Config.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/StatefulStaleMetadataRemovalConfig"
                        }
                    ]
                },
                "target_platform": {
                    "title": "Target Platform",
                    "description": "The platform that dbt is loading onto. (e.g. bigquery / redshift / postgres etc.)",
                    "type": "string"
                },
                "target_platform_instance": {
                    "title": "Target Platform Instance",
                    "description": "The platform instance for the platform that dbt is operating on. Use this if you have multiple instances of the same platform (e.g. redshift) and need to distinguish between them.",
                    "type": "string"
                },
                "use_identifiers": {
                    "title": "Use Identifiers",
                    "description": "Use model identifier instead of model name if defined (if not, default to model name).",
                    "default": false,
                    "type": "boolean"
                },
                "entities_enabled": {
                    "title": "Entities Enabled",
                    "description": "Controls for enabling / disabling metadata emission for different dbt entities (models, test definitions, test results, etc.)",
                    "default": {
                        "models": "YES",
                        "sources": "YES",
                        "seeds": "YES",
                        "snapshots": "YES",
                        "test_definitions": "YES",
                        "test_results": "YES",
                        "model_performance": "YES"
                    },
                    "allOf": [
                        {
                            "$ref": "#/definitions/DBTEntitiesEnabled"
                        }
                    ]
                },
                "prefer_sql_parser_lineage": {
                    "title": "Prefer Sql Parser Lineage",
                    "description": "Normally we use dbt's metadata to generate table lineage. When enabled, we prefer results from the SQL parser when generating lineage instead. This can be useful when dbt models reference tables directly, instead of using the ref() macro. This requires that `skip_sources_in_lineage` is enabled.",
                    "default": false,
                    "type": "boolean"
                },
                "skip_sources_in_lineage": {
                    "title": "Skip Sources In Lineage",
                    "description": "[Experimental] When enabled, dbt sources will not be included in the lineage graph. Requires that `entities_enabled.sources` is set to `NO`. This is mainly useful when you have multiple, interdependent dbt projects. ",
                    "default": false,
                    "type": "boolean"
                },
                "tag_prefix": {
                    "title": "Tag Prefix",
                    "description": "Prefix added to tags during ingestion.",
                    "default": "dbt:",
                    "type": "string"
                },
                "node_name_pattern": {
                    "title": "Node Name Pattern",
                    "description": "regex patterns for dbt model names to filter in ingestion.",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "allOf": [
                        {
                            "$ref": "#/definitions/AllowDenyPattern"
                        }
                    ]
                },
                "meta_mapping": {
                    "title": "Meta Mapping",
                    "description": "mapping rules that will be executed against dbt meta properties. Refer to the section below on dbt meta automated mappings.",
                    "default": {},
                    "type": "object"
                },
                "column_meta_mapping": {
                    "title": "Column Meta Mapping",
                    "description": "mapping rules that will be executed against dbt column meta properties. Refer to the section below on dbt meta automated mappings.",
                    "default": {},
                    "type": "object"
                },
                "enable_meta_mapping": {
                    "title": "Enable Meta Mapping",
                    "description": "When enabled, applies the mappings that are defined through the meta_mapping directives.",
                    "default": true,
                    "type": "boolean"
                },
                "query_tag_mapping": {
                    "title": "Query Tag Mapping",
                    "description": "mapping rules that will be executed against dbt query_tag meta properties. Refer to the section below on dbt meta automated mappings.",
                    "default": {},
                    "type": "object"
                },
                "enable_query_tag_mapping": {
                    "title": "Enable Query Tag Mapping",
                    "description": "When enabled, applies the mappings that are defined through the `query_tag_mapping` directives.",
                    "default": true,
                    "type": "boolean"
                },
                "write_semantics": {
                    "title": "Write Semantics",
                    "description": "Whether the new tags, terms and owners to be added will override the existing ones added only by this source or not. Value for this config can be \"PATCH\" or \"OVERRIDE\"",
                    "default": "PATCH",
                    "type": "string"
                },
                "strip_user_ids_from_email": {
                    "title": "Strip User Ids From Email",
                    "description": "Whether or not to strip email id while adding owners using dbt meta actions.",
                    "default": false,
                    "type": "boolean"
                },
                "enable_owner_extraction": {
                    "title": "Enable Owner Extraction",
                    "description": "When enabled, ownership info will be extracted from the dbt meta",
                    "default": true,
                    "type": "boolean"
                },
                "owner_extraction_pattern": {
                    "title": "Owner Extraction Pattern",
                    "description": "Regex string to extract owner from the dbt node using the `(?P<name>...) syntax` of the [match object](https://docs.python.org/3/library/re.html#match-objects), where the group name must be `owner`. Examples: (1)`r\"(?P<owner>(.*)): (\\w+) (\\w+)\"` will extract `jdoe` as the owner from `\"jdoe: John Doe\"` (2) `r\"@(?P<owner>(.*))\"` will extract `alice` as the owner from `\"@alice\"`.",
                    "type": "string"
                },
                "include_env_in_assertion_guid": {
                    "title": "Include Env In Assertion Guid",
                    "description": "Prior to version 0.9.4.2, the assertion GUIDs did not include the environment. If you're using multiple dbt ingestion that are only distinguished by env, then you should set this flag to True.",
                    "default": false,
                    "type": "boolean"
                },
                "convert_column_urns_to_lowercase": {
                    "title": "Convert Column Urns To Lowercase",
                    "description": "When enabled, converts column URNs to lowercase to ensure cross-platform compatibility. If `target_platform` is Snowflake, the default is True.",
                    "default": false,
                    "type": "boolean"
                },
                "test_warnings_are_errors": {
                    "title": "Test Warnings Are Errors",
                    "description": "When enabled, dbt test warnings will be treated as failures.",
                    "default": false,
                    "type": "boolean"
                },
                "infer_dbt_schemas": {
                    "title": "Infer Dbt Schemas",
                    "description": "When enabled, schemas will be inferred from the dbt node definition.",
                    "default": true,
                    "type": "boolean"
                },
                "include_column_lineage": {
                    "title": "Include Column Lineage",
                    "description": "When enabled, column-level lineage will be extracted from the dbt node definition. Requires `infer_dbt_schemas` to be enabled. If you run into issues where the column name casing does not match up with properly, providing a datahub_api or using the rest sink will improve accuracy.",
                    "default": true,
                    "type": "boolean"
                },
                "include_compiled_code": {
                    "title": "Include Compiled Code",
                    "description": "When enabled, includes the compiled code in the emitted metadata.",
                    "default": true,
                    "type": "boolean"
                },
                "manifest_path": {
                    "title": "Manifest Path",
                    "description": "Path to dbt manifest JSON. See https://docs.getdbt.com/reference/artifacts/manifest-json Note this can be a local file or a URI.",
                    "type": "string"
                },
                "catalog_path": {
                    "title": "Catalog Path",
                    "description": "Path to dbt catalog JSON. See https://docs.getdbt.com/reference/artifacts/catalog-json Note this can be a local file or a URI.",
                    "type": "string"
                },
                "sources_path": {
                    "title": "Sources Path",
                    "description": "Path to dbt sources JSON. See https://docs.getdbt.com/reference/artifacts/sources-json. If not specified, last-modified fields will not be populated. Note this can be a local file or a URI.",
                    "type": "string"
                },
                "run_results_paths": {
                    "title": "Run Results Paths",
                    "description": "Path to output of dbt test run as run_results files in JSON format. If not specified, test execution results and model performance metadata will not be populated in DataHub.If invoking dbt multiple times, you can provide paths to multiple run result files. See https://docs.getdbt.com/reference/artifacts/run-results-json.",
                    "default": [],
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "only_include_if_in_catalog": {
                    "title": "Only Include If In Catalog",
                    "description": "[experimental] If true, only include nodes that are also present in the catalog file. This is useful if you only want to include models that have been built by the associated run.",
                    "default": false,
                    "type": "boolean"
                },
                "aws_connection": {
                    "title": "Aws Connection",
                    "description": "When fetching manifest files from s3, configuration for aws connection details",
                    "allOf": [
                        {
                            "$ref": "#/definitions/AwsConnectionConfig"
                        }
                    ]
                },
                "git_info": {
                    "title": "Git Info",
                    "description": "Reference to your git location to enable easy navigation from DataHub to your dbt files.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/GitReference"
                        }
                    ]
                }
            },
            "required": [
                "target_platform",
                "manifest_path",
                "catalog_path"
            ],
            "additionalProperties": false
        },
        "lookml": {
            "type": "object",
            "properties": {
                "type": {
                    "type": "string",
                    "enum": [
                        "lookml"
                    ]
                },
                "config": {
                    "$ref": "#/definitions/lookml_config"
                }
            },
            "required": [
                "type",
                "config"
            ]
        },
        "lookml_config": {
            "title": "LookMLSourceConfig",
            "description": "Base configuration class for stateful ingestion for source configs to inherit from.",
            "type": "object",
            "properties": {
                "env": {
                    "title": "Env",
                    "description": "The environment that all assets produced by this connector belong to",
                    "default": "PROD",
                    "type": "string"
                },
                "stateful_ingestion": {
                    "$ref": "#/definitions/StatefulStaleMetadataRemovalConfig"
                },
                "platform_instance": {
                    "title": "Platform Instance",
                    "description": "The instance of the platform that all assets produced by this recipe belong to. This should be unique within the platform. See https://datahubproject.io/docs/platform-instances/ for more details.",
                    "type": "string"
                },
                "explore_naming_pattern": {
                    "title": "Explore Naming Pattern",
                    "description": "Pattern for providing dataset names to explores. Allowed variables are ['platform', 'env', 'project', 'model', 'name']",
                    "default": {
                        "pattern": "{model}.explore.{name}"
                    },
                    "allOf": [
                        {
                            "$ref": "#/definitions/LookerNamingPattern"
                        }
                    ]
                },
                "explore_browse_pattern": {
                    "title": "Explore Browse Pattern",
                    "description": "Pattern for providing browse paths to explores. Allowed variables are ['platform', 'env', 'project', 'model', 'name']",
                    "default": {
                        "pattern": "/Explore/{model}"
                    },
                    "allOf": [
                        {
                            "$ref": "#/definitions/LookerNamingPattern"
                        }
                    ]
                },
                "view_naming_pattern": {
                    "title": "View Naming Pattern",
                    "description": "Pattern for providing dataset names to views. Allowed variables are ['platform', 'env', 'project', 'model', 'name', 'file_path', 'folder_path']",
                    "default": {
                        "pattern": "{project}.view.{name}"
                    },
                    "allOf": [
                        {
                            "$ref": "#/definitions/LookerViewNamingPattern"
                        }
                    ]
                },
                "view_browse_pattern": {
                    "title": "View Browse Pattern",
                    "description": "Pattern for providing browse paths to views. Allowed variables are ['platform', 'env', 'project', 'model', 'name', 'file_path', 'folder_path']",
                    "default": {
                        "pattern": "/Develop/{project}/{folder_path}"
                    },
                    "allOf": [
                        {
                            "$ref": "#/definitions/LookerViewNamingPattern"
                        }
                    ]
                },
                "tag_measures_and_dimensions": {
                    "title": "Tag Measures And Dimensions",
                    "description": "When enabled, attaches tags to measures, dimensions and dimension groups to make them more discoverable. When disabled, adds this information to the description of the column.",
                    "default": true,
                    "type": "boolean"
                },
                "extract_column_level_lineage": {
                    "title": "Extract Column Level Lineage",
                    "description": "When enabled, extracts column-level lineage from Views and Explores",
                    "default": true,
                    "type": "boolean"
                },
                "git_info": {
                    "title": "Git Info",
                    "description": "Reference to your git location. If present, supplies handy links to your lookml on the dataset entity page.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/GitInfo"
                        }
                    ]
                },
                "base_folder": {
                    "title": "Base Folder",
                    "description": "Required if not providing github configuration and deploy keys. A pointer to a local directory (accessible to the ingestion system) where the root of the LookML repo has been checked out (typically via a git clone). This is typically the root folder where the `*.model.lkml` and `*.view.lkml` files are stored. e.g. If you have checked out your LookML repo under `/Users/jdoe/workspace/my-lookml-repo`, then set `base_folder` to `/Users/jdoe/workspace/my-lookml-repo`.",
                    "format": "directory-path",
                    "type": "string"
                },
                "project_dependencies": {
                    "title": "Project Dependencies",
                    "description": "A map of project_name to local directory (accessible to the ingestion system) or Git credentials. Every local_dependencies or private remote_dependency listed in the main project's manifest.lkml file should have a corresponding entry here.If a deploy key is not provided, the ingestion system will use the same deploy key as the main project. ",
                    "default": {},
                    "type": "object",
                    "additionalProperties": {
                        "anyOf": [
                            {
                                "type": "string",
                                "format": "directory-path"
                            },
                            {
                                "$ref": "#/definitions/GitInfo"
                            }
                        ]
                    }
                },
                "connection_to_platform_map": {
                    "title": "Connection To Platform Map",
                    "description": "A mapping of [Looker connection names](https://docs.looker.com/reference/model-params/connection-for-model) to DataHub platform, database, and schema values.",
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/definitions/LookerConnectionDefinition"
                    }
                },
                "model_pattern": {
                    "title": "Model Pattern",
                    "description": "List of regex patterns for LookML models to include in the extraction.",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "allOf": [
                        {
                            "$ref": "#/definitions/AllowDenyPattern"
                        }
                    ]
                },
                "view_pattern": {
                    "title": "View Pattern",
                    "description": "List of regex patterns for LookML views to include in the extraction.",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "allOf": [
                        {
                            "$ref": "#/definitions/AllowDenyPattern"
                        }
                    ]
                },
                "parse_table_names_from_sql": {
                    "title": "Parse Table Names From Sql",
                    "description": "See note below.",
                    "default": true,
                    "type": "boolean"
                },
                "api": {
                    "$ref": "#/definitions/LookerAPIConfig"
                },
                "project_name": {
                    "title": "Project Name",
                    "description": "Required if you don't specify the `api` section. The project name within which all the model files live. See (https://docs.looker.com/data-modeling/getting-started/how-project-works) to understand what the Looker project name should be. The simplest way to see your projects is to click on `Develop` followed by `Manage LookML Projects` in the Looker application.",
                    "type": "string"
                },
                "transport_options": {
                    "title": "Transport Options",
                    "description": "Populates the [TransportOptions](https://github.com/looker-open-source/sdk-codegen/blob/94d6047a0d52912ac082eb91616c1e7c379ab262/python/looker_sdk/rtl/transport.py#L70) struct for looker client",
                    "allOf": [
                        {
                            "$ref": "#/definitions/TransportOptionsConfig"
                        }
                    ]
                },
                "max_file_snippet_length": {
                    "title": "Max File Snippet Length",
                    "description": "When extracting the view definition from a lookml file, the maximum number of characters to extract.",
                    "default": 512000,
                    "type": "integer"
                },
                "emit_reachable_views_only": {
                    "title": "Emit Reachable Views Only",
                    "description": "When enabled, only views that are reachable from explores defined in the model files are emitted",
                    "default": true,
                    "type": "boolean"
                },
                "populate_sql_logic_for_missing_descriptions": {
                    "title": "Populate Sql Logic For Missing Descriptions",
                    "description": "When enabled, field descriptions will include the sql logic for computed fields if descriptions are missing",
                    "default": false,
                    "type": "boolean"
                },
                "process_isolation_for_sql_parsing": {
                    "title": "Process Isolation For Sql Parsing",
                    "description": "When enabled, sql parsing will be executed in a separate process to prevent memory leaks.",
                    "default": false,
                    "type": "boolean"
                },
                "process_refinements": {
                    "title": "Process Refinements",
                    "description": "When enabled, looker refinement will be processed to adapt an existing view.",
                    "default": false,
                    "type": "boolean"
                },
                "liquid_variable": {
                    "title": "Liquid Variable",
                    "description": "A dictionary containing Liquid variables and their corresponding values, utilized in SQL-defined derived views. The Liquid template will be resolved in view.derived_table.sql and view.sql_table_name. Defaults to an empty dictionary.",
                    "default": {},
                    "type": "object"
                },
                "looker_environment": {
                    "title": "Looker Environment",
                    "description": "A looker prod or dev environment. It helps to evaluate looker if comments i.e. -- if prod --. All if comments are evaluated to true for configured looker_environment value",
                    "default": "prod",
                    "enum": [
                        "prod",
                        "dev"
                    ],
                    "type": "string"
                }
            },
            "additionalProperties": false
        },
        "preset": {
            "type": "object",
            "properties": {
                "type": {
                    "type": "string",
                    "enum": [
                        "preset"
                    ]
                },
                "config": {
                    "$ref": "#/definitions/preset_config"
                }
            },
            "required": [
                "type",
                "config"
            ]
        },
        "preset_config": {
            "title": "PresetConfig",
            "description": "Base configuration class for stateful ingestion for source configs to inherit from.",
            "type": "object",
            "properties": {
                "platform_instance": {
                    "title": "Platform Instance",
                    "description": "The instance of the platform that all assets produced by this recipe belong to. This should be unique within the platform. See https://datahubproject.io/docs/platform-instances/ for more details.",
                    "type": "string"
                },
                "env": {
                    "title": "Env",
                    "description": "Environment to use in namespace when constructing URNs",
                    "default": "PROD",
                    "type": "string"
                },
                "stateful_ingestion": {
                    "title": "Stateful Ingestion",
                    "description": "Preset Stateful Ingestion Config.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/StatefulStaleMetadataRemovalConfig"
                        }
                    ]
                },
                "connect_uri": {
                    "title": "Connect Uri",
                    "description": "Preset workspace URL.",
                    "default": "",
                    "type": "string"
                },
                "display_uri": {
                    "title": "Display Uri",
                    "description": "optional URL to use in links (if `connect_uri` is only for ingestion)",
                    "type": "string"
                },
                "domain": {
                    "title": "Domain",
                    "description": "regex patterns for tables to filter to assign domain_key. ",
                    "default": {},
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/definitions/AllowDenyPattern"
                    }
                },
                "username": {
                    "title": "Username",
                    "description": "Superset username.",
                    "type": "string"
                },
                "password": {
                    "title": "Password",
                    "description": "Superset password.",
                    "type": "string"
                },
                "ingest_dashboards": {
                    "title": "Ingest Dashboards",
                    "description": "Enable to ingest dashboards.",
                    "default": true,
                    "type": "boolean"
                },
                "ingest_charts": {
                    "title": "Ingest Charts",
                    "description": "Enable to ingest charts.",
                    "default": true,
                    "type": "boolean"
                },
                "ingest_datasets": {
                    "title": "Ingest Datasets",
                    "description": "Enable to ingest datasets.",
                    "default": false,
                    "type": "boolean"
                },
                "provider": {
                    "title": "Provider",
                    "description": "Superset provider.",
                    "default": "db",
                    "type": "string"
                },
                "options": {
                    "title": "Options",
                    "default": {},
                    "type": "object"
                },
                "database_alias": {
                    "title": "Database Alias",
                    "description": "Can be used to change mapping for database names in superset to what you have in datahub",
                    "default": {},
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "manager_uri": {
                    "title": "Manager Uri",
                    "description": "Preset.io API URL",
                    "default": "https://api.app.preset.io",
                    "type": "string"
                },
                "api_key": {
                    "title": "Api Key",
                    "description": "Preset.io API key.",
                    "type": "string"
                },
                "api_secret": {
                    "title": "Api Secret",
                    "description": "Preset.io API secret.",
                    "type": "string"
                }
            }
        },
        "slack": {
            "type": "object",
            "properties": {
                "type": {
                    "type": "string",
                    "enum": [
                        "slack"
                    ]
                },
                "config": {
                    "$ref": "#/definitions/slack_config"
                }
            },
            "required": [
                "type",
                "config"
            ]
        },
        "slack_config": {
            "title": "SlackSourceConfig",
            "type": "object",
            "properties": {
                "bot_token": {
                    "title": "Bot Token",
                    "description": "Bot token for the Slack workspace. Needs `users:read`, `users:read.email` and `users.profile:read` scopes.",
                    "type": "string",
                    "writeOnly": true,
                    "format": "password"
                },
                "enrich_user_metadata": {
                    "title": "Enrich User Metadata",
                    "description": "Whether to enrich user metadata.",
                    "default": true,
                    "type": "boolean"
                },
                "api_requests_per_min": {
                    "title": "Api Requests Per Min",
                    "description": "Number of API requests per minute. Low-level config. Do not tweak unless you are facing any issues.",
                    "default": 10,
                    "type": "integer"
                },
                "ingest_public_channels": {
                    "title": "Ingest Public Channels",
                    "description": "Whether to ingest public channels. If set to true needs `channels:read` scope.",
                    "default": false,
                    "type": "boolean"
                },
                "channels_iteration_limit": {
                    "title": "Channels Iteration Limit",
                    "description": "Limit the number of channels to be ingested in a iteration. Low-level config. Do not tweak unless you are facing any issues.",
                    "default": 200,
                    "type": "integer"
                },
                "channel_min_members": {
                    "title": "Channel Min Members",
                    "description": "Ingest channels with at least this many members.",
                    "default": 2,
                    "type": "integer"
                },
                "should_ingest_archived_channels": {
                    "title": "Should Ingest Archived Channels",
                    "description": "Whether to ingest archived channels.",
                    "default": false,
                    "type": "boolean"
                }
            },
            "required": [
                "bot_token"
            ],
            "additionalProperties": false
        },
        "redash": {
            "type": "object",
            "properties": {
                "type": {
                    "type": "string",
                    "enum": [
                        "redash"
                    ]
                },
                "config": {
                    "$ref": "#/definitions/redash_config"
                }
            },
            "required": [
                "type",
                "config"
            ]
        },
        "redash_config": {
            "title": "RedashConfig",
            "type": "object",
            "properties": {
                "connect_uri": {
                    "title": "Connect Uri",
                    "description": "Redash base URL.",
                    "default": "http://localhost:5000",
                    "type": "string"
                },
                "api_key": {
                    "title": "Api Key",
                    "description": "Redash user API key.",
                    "default": "REDASH_API_KEY",
                    "type": "string"
                },
                "dashboard_patterns": {
                    "title": "Dashboard Patterns",
                    "description": "regex patterns for dashboards to filter for ingestion.",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "allOf": [
                        {
                            "$ref": "#/definitions/AllowDenyPattern"
                        }
                    ]
                },
                "chart_patterns": {
                    "title": "Chart Patterns",
                    "description": "regex patterns for charts to filter for ingestion.",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "allOf": [
                        {
                            "$ref": "#/definitions/AllowDenyPattern"
                        }
                    ]
                },
                "skip_draft": {
                    "title": "Skip Draft",
                    "description": "Only ingest published dashboards and charts.",
                    "default": true,
                    "type": "boolean"
                },
                "page_size": {
                    "title": "Page Size",
                    "description": "Limit on number of items to be queried at once.",
                    "default": 25,
                    "type": "integer"
                },
                "api_page_limit": {
                    "title": "Api Page Limit",
                    "description": "Limit on number of pages queried for ingesting dashboards and charts API during pagination.",
                    "default": 9223372036854775807,
                    "type": "integer"
                },
                "parallelism": {
                    "title": "Parallelism",
                    "description": "Parallelism to use while processing.",
                    "default": 1,
                    "type": "integer"
                },
                "parse_table_names_from_sql": {
                    "title": "Parse Table Names From Sql",
                    "description": "See note below.",
                    "default": false,
                    "type": "boolean"
                },
                "env": {
                    "title": "Env",
                    "description": "Environment to use in namespace when constructing URNs.",
                    "default": "PROD",
                    "type": "string"
                }
            },
            "additionalProperties": false
        },
        "presto-on-hive": {
            "type": "object",
            "properties": {
                "type": {
                    "type": "string",
                    "enum": [
                        "presto-on-hive"
                    ]
                },
                "config": {
                    "$ref": "#/definitions/presto-on-hive_config"
                }
            },
            "required": [
                "type",
                "config"
            ]
        },
        "presto-on-hive_config": {
            "title": "HiveMetastore",
            "description": "Base configuration class for stateful ingestion for source configs to inherit from.",
            "type": "object",
            "properties": {
                "schema_pattern": {
                    "title": "Schema Pattern",
                    "description": "Regex patterns for schemas to filter in ingestion. Specify regex to only match the schema name. e.g. to match all tables in schema analytics, use the regex 'analytics'",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "allOf": [
                        {
                            "$ref": "#/definitions/AllowDenyPattern"
                        }
                    ]
                },
                "table_pattern": {
                    "title": "Table Pattern",
                    "description": "Regex patterns for tables to filter in ingestion. Specify regex to match the entire table name in database.schema.table format. e.g. to match all tables starting with customer in Customer database and public schema, use the regex 'Customer.public.customer.*'",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "allOf": [
                        {
                            "$ref": "#/definitions/AllowDenyPattern"
                        }
                    ]
                },
                "view_pattern": {
                    "title": "View Pattern",
                    "description": "Regex patterns for views to filter in ingestion. Note: Defaults to table_pattern if not specified. Specify regex to match the entire view name in database.schema.view format. e.g. to match all views starting with customer in Customer database and public schema, use the regex 'Customer.public.customer.*'",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "allOf": [
                        {
                            "$ref": "#/definitions/AllowDenyPattern"
                        }
                    ]
                },
                "classification": {
                    "title": "Classification",
                    "description": "For details, refer to [Classification](../../../../metadata-ingestion/docs/dev_guides/classification.md).",
                    "default": {
                        "enabled": false,
                        "sample_size": 100,
                        "max_workers": 4,
                        "table_pattern": {
                            "allow": [
                                ".*"
                            ],
                            "deny": [],
                            "ignoreCase": true
                        },
                        "column_pattern": {
                            "allow": [
                                ".*"
                            ],
                            "deny": [],
                            "ignoreCase": true
                        },
                        "info_type_to_term": {},
                        "classifiers": [
                            {
                                "type": "datahub",
                                "config": null
                            }
                        ]
                    },
                    "allOf": [
                        {
                            "$ref": "#/definitions/ClassificationConfig"
                        }
                    ]
                },
                "incremental_lineage": {
                    "title": "Incremental Lineage",
                    "description": "When enabled, emits lineage as incremental to existing lineage already in DataHub. When disabled, re-states lineage on each run.",
                    "default": false,
                    "type": "boolean"
                },
                "convert_urns_to_lowercase": {
                    "title": "Convert Urns To Lowercase",
                    "description": "Whether to convert dataset urns to lowercase.",
                    "default": false,
                    "type": "boolean"
                },
                "env": {
                    "title": "Env",
                    "description": "The environment that all assets produced by this connector belong to",
                    "default": "PROD",
                    "type": "string"
                },
                "platform_instance": {
                    "title": "Platform Instance",
                    "description": "The instance of the platform that all assets produced by this recipe belong to. This should be unique within the platform. See https://datahubproject.io/docs/platform-instances/ for more details.",
                    "type": "string"
                },
                "stateful_ingestion": {
                    "$ref": "#/definitions/StatefulStaleMetadataRemovalConfig"
                },
                "options": {
                    "title": "Options",
                    "description": "Any options specified here will be passed to [SQLAlchemy.create_engine](https://docs.sqlalchemy.org/en/14/core/engines.html#sqlalchemy.create_engine) as kwargs. To set connection arguments in the URL, specify them under `connect_args`.",
                    "type": "object"
                },
                "profile_pattern": {
                    "title": "Profile Pattern",
                    "description": "Regex patterns to filter tables (or specific columns) for profiling during ingestion. Note that only tables allowed by the `table_pattern` will be considered.",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "allOf": [
                        {
                            "$ref": "#/definitions/AllowDenyPattern"
                        }
                    ]
                },
                "domain": {
                    "title": "Domain",
                    "description": "Attach domains to databases, schemas or tables during ingestion using regex patterns. Domain key can be a guid like *urn:li:domain:ec428203-ce86-4db3-985d-5a8ee6df32ba* or a string like \"Marketing\".) If you provide strings, then datahub will attempt to resolve this name to a guid, and will error out if this fails. There can be multiple domain keys specified.",
                    "default": {},
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/definitions/AllowDenyPattern"
                    }
                },
                "include_views": {
                    "title": "Include Views",
                    "description": "Whether views should be ingested.",
                    "default": true,
                    "type": "boolean"
                },
                "include_tables": {
                    "title": "Include Tables",
                    "description": "Whether tables should be ingested.",
                    "default": true,
                    "type": "boolean"
                },
                "include_table_location_lineage": {
                    "title": "Include Table Location Lineage",
                    "description": "If the source supports it, include table lineage to the underlying storage location.",
                    "default": true,
                    "type": "boolean"
                },
                "include_view_lineage": {
                    "title": "Include View Lineage",
                    "description": "Populates view->view and table->view lineage using DataHub's sql parser.",
                    "default": true,
                    "type": "boolean"
                },
                "include_view_column_lineage": {
                    "title": "Include View Column Lineage",
                    "description": "Populates column-level lineage for  view->view and table->view lineage using DataHub's sql parser. Requires `include_view_lineage` to be enabled.",
                    "default": true,
                    "type": "boolean"
                },
                "use_file_backed_cache": {
                    "title": "Use File Backed Cache",
                    "description": "Whether to use a file backed cache for the view definitions.",
                    "default": true,
                    "type": "boolean"
                },
                "profiling": {
                    "title": "Profiling",
                    "default": {
                        "enabled": false,
                        "operation_config": {
                            "lower_freq_profile_enabled": false,
                            "profile_day_of_week": null,
                            "profile_date_of_month": null
                        },
                        "limit": null,
                        "offset": null,
                        "profile_table_level_only": false,
                        "include_field_null_count": true,
                        "include_field_distinct_count": true,
                        "include_field_min_value": true,
                        "include_field_max_value": true,
                        "include_field_mean_value": true,
                        "include_field_median_value": true,
                        "include_field_stddev_value": true,
                        "include_field_quantiles": false,
                        "include_field_distinct_value_frequencies": false,
                        "include_field_histogram": false,
                        "include_field_sample_values": true,
                        "max_workers": 20,
                        "report_dropped_profiles": false,
                        "turn_off_expensive_profiling_metrics": false,
                        "field_sample_values_limit": 20,
                        "max_number_of_fields_to_profile": null,
                        "profile_if_updated_since_days": null,
                        "profile_table_size_limit": 5,
                        "profile_table_row_limit": 5000000,
                        "profile_table_row_count_estimate_only": false,
                        "query_combiner_enabled": true,
                        "catch_exceptions": true,
                        "partition_profiling_enabled": true,
                        "partition_datetime": null,
                        "use_sampling": true,
                        "sample_size": 10000,
                        "profile_external_tables": false,
                        "tags_to_ignore_sampling": null,
                        "profile_nested_fields": false
                    },
                    "allOf": [
                        {
                            "$ref": "#/definitions/GEProfilingConfig"
                        }
                    ]
                },
                "username": {
                    "title": "Username",
                    "description": "username",
                    "type": "string"
                },
                "password": {
                    "title": "Password",
                    "description": "password",
                    "type": "string",
                    "writeOnly": true,
                    "format": "password"
                },
                "host_port": {
                    "title": "Host Port",
                    "description": "Host URL and port to connect to. Example: localhost:3306",
                    "default": "localhost:3306",
                    "type": "string"
                },
                "database": {
                    "title": "Database",
                    "description": "database (catalog)",
                    "type": "string"
                },
                "sqlalchemy_uri": {
                    "title": "Sqlalchemy Uri",
                    "description": "URI of database to connect to. See https://docs.sqlalchemy.org/en/14/core/engines.html#database-urls. Takes precedence over other connection parameters.",
                    "type": "string"
                },
                "views_where_clause_suffix": {
                    "title": "Views Where Clause Suffix",
                    "description": "Where clause to specify what Presto views should be ingested.",
                    "default": "",
                    "type": "string"
                },
                "tables_where_clause_suffix": {
                    "title": "Tables Where Clause Suffix",
                    "description": "Where clause to specify what Hive tables should be ingested.",
                    "default": "",
                    "type": "string"
                },
                "schemas_where_clause_suffix": {
                    "title": "Schemas Where Clause Suffix",
                    "description": "Where clause to specify what Hive schemas should be ingested.",
                    "default": "",
                    "type": "string"
                },
                "ingestion_job_id": {
                    "title": "Ingestion Job Id",
                    "default": "",
                    "type": "string"
                },
                "database_pattern": {
                    "title": "Database Pattern",
                    "description": "Regex patterns for hive/presto database to filter in ingestion. Specify regex to only match the database name. e.g. to match all tables in database analytics, use the regex 'analytics'",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "allOf": [
                        {
                            "$ref": "#/definitions/AllowDenyPattern"
                        }
                    ]
                },
                "metastore_db_name": {
                    "title": "Metastore Db Name",
                    "description": "Name of the Hive metastore's database (usually: metastore). For backward compatibility, if this field is not provided, the database field will be used. If both the 'database' and 'metastore_db_name' fields are set then the 'database' field will be used to filter the hive/presto/trino database",
                    "type": "string"
                },
                "mode": {
                    "description": "The ingested data will be stored under this platform. Valid options: ['hive', 'presto', 'presto-on-hive', 'trino']",
                    "default": "hive",
                    "allOf": [
                        {
                            "$ref": "#/definitions/HiveMetastoreConfigMode"
                        }
                    ]
                },
                "use_catalog_subtype": {
                    "title": "Use Catalog Subtype",
                    "description": "Container Subtype name to be 'Database' or 'Catalog' Valid options: ['True', 'False']",
                    "default": true,
                    "type": "boolean"
                },
                "use_dataset_pascalcase_subtype": {
                    "title": "Use Dataset Pascalcase Subtype",
                    "description": "Dataset Subtype name to be 'Table' or 'View' Valid options: ['True', 'False']",
                    "default": false,
                    "type": "boolean"
                },
                "include_catalog_name_in_ids": {
                    "title": "Include Catalog Name In Ids",
                    "description": "Add the Presto catalog name (e.g. hive) to the generated dataset urns. `urn:li:dataset:(urn:li:dataPlatform:hive,hive.user.logging_events,PROD)` versus `urn:li:dataset:(urn:li:dataPlatform:hive,user.logging_events,PROD)`",
                    "default": false,
                    "type": "boolean"
                },
                "enable_properties_merge": {
                    "title": "Enable Properties Merge",
                    "description": "By default, the connector enables merging of properties with what exists on the server. Set this to False to enable the default connector behavior of overwriting properties on each ingestion.",
                    "default": true,
                    "type": "boolean"
                },
                "simplify_nested_field_paths": {
                    "title": "Simplify Nested Field Paths",
                    "description": "Simplify v2 field paths to v1 by default. If the schema has Union or Array types, still falls back to v2",
                    "default": false,
                    "type": "boolean"
                }
            },
            "additionalProperties": false
        },
        "looker": {
            "type": "object",
            "properties": {
                "type": {
                    "type": "string",
                    "enum": [
                        "looker"
                    ]
                },
                "config": {
                    "$ref": "#/definitions/looker_config"
                }
            },
            "required": [
                "type",
                "config"
            ]
        },
        "looker_config": {
            "title": "LookerDashboardSourceConfig",
            "description": "Base configuration class for stateful ingestion for source configs to inherit from.",
            "type": "object",
            "properties": {
                "env": {
                    "title": "Env",
                    "description": "The environment that all assets produced by this connector belong to",
                    "default": "PROD",
                    "type": "string"
                },
                "stateful_ingestion": {
                    "$ref": "#/definitions/StatefulStaleMetadataRemovalConfig"
                },
                "platform_instance": {
                    "title": "Platform Instance",
                    "description": "The instance of the platform that all assets produced by this recipe belong to. This should be unique within the platform. See https://datahubproject.io/docs/platform-instances/ for more details.",
                    "type": "string"
                },
                "explore_naming_pattern": {
                    "title": "Explore Naming Pattern",
                    "description": "Pattern for providing dataset names to explores. Allowed variables are ['platform', 'env', 'project', 'model', 'name']",
                    "default": {
                        "pattern": "{model}.explore.{name}"
                    },
                    "allOf": [
                        {
                            "$ref": "#/definitions/LookerNamingPattern"
                        }
                    ]
                },
                "explore_browse_pattern": {
                    "title": "Explore Browse Pattern",
                    "description": "Pattern for providing browse paths to explores. Allowed variables are ['platform', 'env', 'project', 'model', 'name']",
                    "default": {
                        "pattern": "/Explore/{model}"
                    },
                    "allOf": [
                        {
                            "$ref": "#/definitions/LookerNamingPattern"
                        }
                    ]
                },
                "view_naming_pattern": {
                    "title": "View Naming Pattern",
                    "description": "Pattern for providing dataset names to views. Allowed variables are ['platform', 'env', 'project', 'model', 'name', 'file_path', 'folder_path']",
                    "default": {
                        "pattern": "{project}.view.{name}"
                    },
                    "allOf": [
                        {
                            "$ref": "#/definitions/LookerViewNamingPattern"
                        }
                    ]
                },
                "view_browse_pattern": {
                    "title": "View Browse Pattern",
                    "description": "Pattern for providing browse paths to views. Allowed variables are ['platform', 'env', 'project', 'model', 'name', 'file_path', 'folder_path']",
                    "default": {
                        "pattern": "/Develop/{project}/{folder_path}"
                    },
                    "allOf": [
                        {
                            "$ref": "#/definitions/LookerViewNamingPattern"
                        }
                    ]
                },
                "tag_measures_and_dimensions": {
                    "title": "Tag Measures And Dimensions",
                    "description": "When enabled, attaches tags to measures, dimensions and dimension groups to make them more discoverable. When disabled, adds this information to the description of the column.",
                    "default": true,
                    "type": "boolean"
                },
                "extract_column_level_lineage": {
                    "title": "Extract Column Level Lineage",
                    "description": "When enabled, extracts column-level lineage from Views and Explores",
                    "default": true,
                    "type": "boolean"
                },
                "client_id": {
                    "title": "Client Id",
                    "description": "Looker API client id.",
                    "type": "string"
                },
                "client_secret": {
                    "title": "Client Secret",
                    "description": "Looker API client secret.",
                    "type": "string"
                },
                "base_url": {
                    "title": "Base Url",
                    "description": "Url to your Looker instance: `https://company.looker.com:19999` or `https://looker.company.com`, or similar. Used for making API calls to Looker and constructing clickable dashboard and chart urls.",
                    "type": "string"
                },
                "transport_options": {
                    "title": "Transport Options",
                    "description": "Populates the [TransportOptions](https://github.com/looker-open-source/sdk-codegen/blob/94d6047a0d52912ac082eb91616c1e7c379ab262/python/looker_sdk/rtl/transport.py#L70) struct for looker client",
                    "allOf": [
                        {
                            "$ref": "#/definitions/TransportOptionsConfig"
                        }
                    ]
                },
                "max_retries": {
                    "title": "Max Retries",
                    "description": "Number of retries for Looker API calls",
                    "default": 3,
                    "type": "integer"
                },
                "dashboard_pattern": {
                    "title": "Dashboard Pattern",
                    "description": "Patterns for selecting dashboard ids that are to be included",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "allOf": [
                        {
                            "$ref": "#/definitions/AllowDenyPattern"
                        }
                    ]
                },
                "chart_pattern": {
                    "title": "Chart Pattern",
                    "description": "Patterns for selecting chart ids that are to be included",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "allOf": [
                        {
                            "$ref": "#/definitions/AllowDenyPattern"
                        }
                    ]
                },
                "include_deleted": {
                    "title": "Include Deleted",
                    "description": "Whether to include deleted dashboards and looks.",
                    "default": false,
                    "type": "boolean"
                },
                "extract_owners": {
                    "title": "Extract Owners",
                    "description": "When enabled, extracts ownership from Looker directly. When disabled, ownership is left empty for dashboards and charts.",
                    "default": true,
                    "type": "boolean"
                },
                "strip_user_ids_from_email": {
                    "title": "Strip User Ids From Email",
                    "description": "When enabled, converts Looker user emails of the form name@domain.com to urn:li:corpuser:name when assigning ownership",
                    "default": false,
                    "type": "boolean"
                },
                "skip_personal_folders": {
                    "title": "Skip Personal Folders",
                    "description": "Whether to skip ingestion of dashboards in personal folders. Setting this to True will only ingest dashboards in the Shared folder space.",
                    "default": false,
                    "type": "boolean"
                },
                "max_threads": {
                    "title": "Max Threads",
                    "description": "Max parallelism for Looker API calls. Defaults to cpuCount or 40",
                    "type": "integer"
                },
                "external_base_url": {
                    "title": "External Base Url",
                    "description": "Optional URL to use when constructing external URLs to Looker if the `base_url` is not the correct one to use. For example, `https://looker-public.company.com`. If not provided, the external base URL will default to `base_url`.",
                    "type": "string"
                },
                "extract_usage_history": {
                    "title": "Extract Usage History",
                    "description": "Whether to ingest usage statistics for dashboards. Setting this to True will query looker system activity explores to fetch historical dashboard usage.",
                    "default": true,
                    "type": "boolean"
                },
                "extract_usage_history_for_interval": {
                    "title": "Extract Usage History For Interval",
                    "description": "Used only if extract_usage_history is set to True. Interval to extract looker dashboard usage history for. See https://docs.looker.com/reference/filter-expressions#date_and_time.",
                    "default": "30 days",
                    "type": "string"
                },
                "extract_embed_urls": {
                    "title": "Extract Embed Urls",
                    "description": "Produce URLs used to render Looker Explores as Previews inside of DataHub UI. Embeds must be enabled inside of Looker to use this feature.",
                    "default": true,
                    "type": "boolean"
                },
                "extract_independent_looks": {
                    "title": "Extract Independent Looks",
                    "description": "Extract looks which are not part of any Dashboard. To enable this flag the stateful_ingestion should also be enabled.",
                    "default": false,
                    "type": "boolean"
                },
                "emit_used_explores_only": {
                    "title": "Emit Used Explores Only",
                    "description": "When enabled, only explores that are used by a Dashboard/Look will be ingested.",
                    "default": true,
                    "type": "boolean"
                },
                "include_platform_instance_in_urns": {
                    "title": "Include Platform Instance In Urns",
                    "description": "When enabled, platform instance will be added in dashboard and chart urn.",
                    "default": false,
                    "type": "boolean"
                },
                "folder_path_pattern": {
                    "title": "Folder Path Pattern",
                    "description": "Allow or deny dashboards from specific folders. For example: \ndeny: \n - sales/deprecated \nThis pattern will deny the ingestion of all dashboards and looks within the sales/deprecated folder. \nDashboards will only be ingested if they're allowed by both this config and dashboard_pattern.",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "allOf": [
                        {
                            "$ref": "#/definitions/AllowDenyPattern"
                        }
                    ]
                }
            },
            "required": [
                "client_id",
                "client_secret",
                "base_url"
            ],
            "additionalProperties": false
        },
        "fivetran": {
            "type": "object",
            "properties": {
                "type": {
                    "type": "string",
                    "enum": [
                        "fivetran"
                    ]
                },
                "config": {
                    "$ref": "#/definitions/fivetran_config"
                }
            },
            "required": [
                "type",
                "config"
            ]
        },
        "fivetran_config": {
            "title": "FivetranSourceConfig",
            "description": "Base configuration class for stateful ingestion for source configs to inherit from.",
            "type": "object",
            "properties": {
                "env": {
                    "title": "Env",
                    "description": "The environment that all assets produced by this connector belong to",
                    "default": "PROD",
                    "type": "string"
                },
                "platform_instance": {
                    "title": "Platform Instance",
                    "description": "The instance of the platform that all assets produced by this recipe belong to. This should be unique within the platform. See https://datahubproject.io/docs/platform-instances/ for more details.",
                    "type": "string"
                },
                "stateful_ingestion": {
                    "title": "Stateful Ingestion",
                    "description": "Airbyte Stateful Ingestion Config.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/StatefulStaleMetadataRemovalConfig"
                        }
                    ]
                },
                "fivetran_log_config": {
                    "title": "Fivetran Log Config",
                    "description": "Fivetran log connector destination server configurations.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/FivetranLogConfig"
                        }
                    ]
                },
                "connector_patterns": {
                    "title": "Connector Patterns",
                    "description": "Filtering regex patterns for connector names.",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "allOf": [
                        {
                            "$ref": "#/definitions/AllowDenyPattern"
                        }
                    ]
                },
                "destination_patterns": {
                    "title": "Destination Patterns",
                    "description": "Regex patterns for destination ids to filter in ingestion. Fivetran destination IDs are usually two word identifiers e.g. canyon_tolerable, and are not the same as the destination database name. They're visible in the Fivetran UI under Destinations -> Overview -> Destination Group ID.",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "allOf": [
                        {
                            "$ref": "#/definitions/AllowDenyPattern"
                        }
                    ]
                },
                "include_column_lineage": {
                    "title": "Include Column Lineage",
                    "description": "Populates table->table column lineage.",
                    "default": true,
                    "type": "boolean"
                },
                "sources_to_platform_instance": {
                    "title": "Sources To Platform Instance",
                    "description": "A mapping from connector id to its platform/instance/env/database details.",
                    "default": {},
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/definitions/PlatformDetail"
                    }
                },
                "destination_to_platform_instance": {
                    "title": "Destination To Platform Instance",
                    "description": "A mapping of destination id to its platform/instance/env details.",
                    "default": {},
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/definitions/PlatformDetail"
                    }
                },
                "history_sync_lookback_period": {
                    "title": "History Sync Lookback Period",
                    "description": "The number of days to look back when extracting connectors' sync history.",
                    "default": 7,
                    "type": "integer"
                }
            },
            "required": [
                "fivetran_log_config"
            ],
            "additionalProperties": false
        },
        "dremio": {
            "type": "object",
            "properties": {
                "type": {
                    "type": "string",
                    "enum": [
                        "dremio"
                    ]
                },
                "config": {
                    "$ref": "#/definitions/dremio_config"
                }
            },
            "required": [
                "type",
                "config"
            ]
        },
        "dremio_config": {
            "title": "DremioSourceConfig",
            "description": "Base configuration class for stateful ingestion for source configs to inherit from.",
            "type": "object",
            "properties": {
                "platform_instance": {
                    "title": "Platform Instance",
                    "description": "The instance of the platform that all assets produced by this recipe belong to. This should be unique within the platform. See https://datahubproject.io/docs/platform-instances/ for more details.",
                    "type": "string"
                },
                "env": {
                    "title": "Env",
                    "description": "The environment that all assets produced by this connector belong to",
                    "default": "PROD",
                    "type": "string"
                },
                "stateful_ingestion": {
                    "$ref": "#/definitions/StatefulStaleMetadataRemovalConfig"
                },
                "hostname": {
                    "title": "Hostname",
                    "description": "Hostname or IP Address of the Dremio server",
                    "type": "string"
                },
                "port": {
                    "title": "Port",
                    "description": "Port of the Dremio REST API",
                    "default": 9047,
                    "type": "integer"
                },
                "username": {
                    "title": "Username",
                    "description": "Dremio username",
                    "type": "string"
                },
                "authentication_method": {
                    "title": "Authentication Method",
                    "description": "Authentication method: 'password' or 'PAT' (Personal Access Token)",
                    "default": "PAT",
                    "type": "string"
                },
                "password": {
                    "title": "Password",
                    "description": "Dremio password or Personal Access Token",
                    "type": "string"
                },
                "tls": {
                    "title": "Tls",
                    "description": "Whether the Dremio REST API port is encrypted",
                    "default": true,
                    "type": "boolean"
                },
                "disable_certificate_verification": {
                    "title": "Disable Certificate Verification",
                    "description": "Disable TLS certificate verification",
                    "default": false,
                    "type": "boolean"
                },
                "path_to_certificates": {
                    "title": "Path To Certificates",
                    "description": "Path to SSL certificates",
                    "default": "/home/runner/work/datahub/datahub/metadata-ingestion/venv/lib/python3.10/site-packages/certifi/cacert.pem",
                    "type": "string"
                },
                "is_dremio_cloud": {
                    "title": "Is Dremio Cloud",
                    "description": "Whether this is a Dremio Cloud instance",
                    "default": false,
                    "type": "boolean"
                },
                "dremio_cloud_region": {
                    "title": "Dremio Cloud Region",
                    "description": "Dremio Cloud region ('US' or 'EU')",
                    "default": "US",
                    "enum": [
                        "US",
                        "EU"
                    ],
                    "type": "string"
                },
                "dremio_cloud_project_id": {
                    "title": "Dremio Cloud Project Id",
                    "description": "ID of Dremio Cloud Project. Found in Project Settings in the Dremio Cloud UI",
                    "type": "string"
                },
                "domain": {
                    "title": "Domain",
                    "description": "Domain for all source objects.",
                    "type": "string"
                },
                "source_mappings": {
                    "title": "Source Mappings",
                    "description": "Mappings from Dremio sources to DataHub platforms and datasets.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/DremioSourceMapping"
                    }
                },
                "schema_pattern": {
                    "title": "Schema Pattern",
                    "description": "Regex patterns for schemas to filter",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "allOf": [
                        {
                            "$ref": "#/definitions/AllowDenyPattern"
                        }
                    ]
                },
                "dataset_pattern": {
                    "title": "Dataset Pattern",
                    "description": "Regex patterns for tables and views to filter in ingestion. Specify regex to match the entire table name in dremio.schema.table format. e.g. to match all tables starting with customer in Customer database and public schema, use the regex 'dremio.public.customer.*'",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "allOf": [
                        {
                            "$ref": "#/definitions/AllowDenyPattern"
                        }
                    ]
                },
                "usage": {
                    "title": "Usage",
                    "description": "The usage config to use when generating usage statistics",
                    "default": {
                        "bucket_duration": "DAY",
                        "end_time": "2024-12-24T12:58:36.236140+00:00",
                        "start_time": "2024-12-23T00:00:00+00:00",
                        "queries_character_limit": 24000,
                        "top_n_queries": 10,
                        "user_email_pattern": {
                            "allow": [
                                ".*"
                            ],
                            "deny": [],
                            "ignoreCase": true
                        },
                        "include_operational_stats": true,
                        "include_read_operational_stats": false,
                        "format_sql_queries": false,
                        "include_top_n_queries": true
                    },
                    "allOf": [
                        {
                            "$ref": "#/definitions/BaseUsageConfig"
                        }
                    ]
                },
                "profile_pattern": {
                    "title": "Profile Pattern",
                    "description": "Regex patterns for tables to profile",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "allOf": [
                        {
                            "$ref": "#/definitions/AllowDenyPattern"
                        }
                    ]
                },
                "profiling": {
                    "title": "Profiling",
                    "description": "Configuration for profiling",
                    "default": {
                        "enabled": false,
                        "operation_config": {
                            "lower_freq_profile_enabled": false,
                            "profile_day_of_week": null,
                            "profile_date_of_month": null
                        },
                        "limit": null,
                        "offset": null,
                        "profile_table_level_only": false,
                        "include_field_null_count": true,
                        "include_field_distinct_count": true,
                        "include_field_min_value": true,
                        "include_field_max_value": true,
                        "include_field_mean_value": true,
                        "include_field_median_value": false,
                        "include_field_stddev_value": true,
                        "include_field_quantiles": false,
                        "include_field_distinct_value_frequencies": false,
                        "include_field_histogram": false,
                        "include_field_sample_values": true,
                        "max_workers": 20,
                        "query_timeout": 300
                    },
                    "allOf": [
                        {
                            "$ref": "#/definitions/ProfileConfig"
                        }
                    ]
                },
                "max_workers": {
                    "title": "Max Workers",
                    "description": "Number of worker threads to use for parallel processing",
                    "default": 20,
                    "type": "integer"
                },
                "include_query_lineage": {
                    "title": "Include Query Lineage",
                    "description": "Whether to include query-based lineage information.",
                    "default": false,
                    "type": "boolean"
                },
                "ingest_owner": {
                    "title": "Ingest Owner",
                    "description": "Ingest Owner from source. This will override Owner info entered from UI",
                    "default": true,
                    "type": "boolean"
                }
            },
            "additionalProperties": false
        },
        "dbt-cloud": {
            "type": "object",
            "properties": {
                "type": {
                    "type": "string",
                    "enum": [
                        "dbt-cloud"
                    ]
                },
                "config": {
                    "$ref": "#/definitions/dbt-cloud_config"
                }
            },
            "required": [
                "type",
                "config"
            ]
        },
        "dbt-cloud_config": {
            "title": "DBTCloudConfig",
            "description": "Base configuration class for stateful ingestion for source configs to inherit from.",
            "type": "object",
            "properties": {
                "incremental_lineage": {
                    "title": "Incremental Lineage",
                    "description": "When enabled, emits incremental/patch lineage for non-dbt entities. When disabled, re-states lineage on each run.",
                    "default": true,
                    "type": "boolean"
                },
                "env": {
                    "title": "Env",
                    "description": "Environment to use in namespace when constructing URNs.",
                    "default": "PROD",
                    "type": "string"
                },
                "platform_instance": {
                    "title": "Platform Instance",
                    "description": "The instance of the platform that all assets produced by this recipe belong to. This should be unique within the platform. See https://datahubproject.io/docs/platform-instances/ for more details.",
                    "type": "string"
                },
                "stateful_ingestion": {
                    "title": "Stateful Ingestion",
                    "description": "DBT Stateful Ingestion Config.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/StatefulStaleMetadataRemovalConfig"
                        }
                    ]
                },
                "target_platform": {
                    "title": "Target Platform",
                    "description": "The platform that dbt is loading onto. (e.g. bigquery / redshift / postgres etc.)",
                    "type": "string"
                },
                "target_platform_instance": {
                    "title": "Target Platform Instance",
                    "description": "The platform instance for the platform that dbt is operating on. Use this if you have multiple instances of the same platform (e.g. redshift) and need to distinguish between them.",
                    "type": "string"
                },
                "use_identifiers": {
                    "title": "Use Identifiers",
                    "description": "Use model identifier instead of model name if defined (if not, default to model name).",
                    "default": false,
                    "type": "boolean"
                },
                "entities_enabled": {
                    "title": "Entities Enabled",
                    "description": "Controls for enabling / disabling metadata emission for different dbt entities (models, test definitions, test results, etc.)",
                    "default": {
                        "models": "YES",
                        "sources": "YES",
                        "seeds": "YES",
                        "snapshots": "YES",
                        "test_definitions": "YES",
                        "test_results": "YES",
                        "model_performance": "YES"
                    },
                    "allOf": [
                        {
                            "$ref": "#/definitions/DBTEntitiesEnabled"
                        }
                    ]
                },
                "prefer_sql_parser_lineage": {
                    "title": "Prefer Sql Parser Lineage",
                    "description": "Normally we use dbt's metadata to generate table lineage. When enabled, we prefer results from the SQL parser when generating lineage instead. This can be useful when dbt models reference tables directly, instead of using the ref() macro. This requires that `skip_sources_in_lineage` is enabled.",
                    "default": false,
                    "type": "boolean"
                },
                "skip_sources_in_lineage": {
                    "title": "Skip Sources In Lineage",
                    "description": "[Experimental] When enabled, dbt sources will not be included in the lineage graph. Requires that `entities_enabled.sources` is set to `NO`. This is mainly useful when you have multiple, interdependent dbt projects. ",
                    "default": false,
                    "type": "boolean"
                },
                "tag_prefix": {
                    "title": "Tag Prefix",
                    "description": "Prefix added to tags during ingestion.",
                    "default": "dbt:",
                    "type": "string"
                },
                "node_name_pattern": {
                    "title": "Node Name Pattern",
                    "description": "regex patterns for dbt model names to filter in ingestion.",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "allOf": [
                        {
                            "$ref": "#/definitions/AllowDenyPattern"
                        }
                    ]
                },
                "meta_mapping": {
                    "title": "Meta Mapping",
                    "description": "mapping rules that will be executed against dbt meta properties. Refer to the section below on dbt meta automated mappings.",
                    "default": {},
                    "type": "object"
                },
                "column_meta_mapping": {
                    "title": "Column Meta Mapping",
                    "description": "mapping rules that will be executed against dbt column meta properties. Refer to the section below on dbt meta automated mappings.",
                    "default": {},
                    "type": "object"
                },
                "enable_meta_mapping": {
                    "title": "Enable Meta Mapping",
                    "description": "When enabled, applies the mappings that are defined through the meta_mapping directives.",
                    "default": true,
                    "type": "boolean"
                },
                "query_tag_mapping": {
                    "title": "Query Tag Mapping",
                    "description": "mapping rules that will be executed against dbt query_tag meta properties. Refer to the section below on dbt meta automated mappings.",
                    "default": {},
                    "type": "object"
                },
                "enable_query_tag_mapping": {
                    "title": "Enable Query Tag Mapping",
                    "description": "When enabled, applies the mappings that are defined through the `query_tag_mapping` directives.",
                    "default": true,
                    "type": "boolean"
                },
                "write_semantics": {
                    "title": "Write Semantics",
                    "description": "Whether the new tags, terms and owners to be added will override the existing ones added only by this source or not. Value for this config can be \"PATCH\" or \"OVERRIDE\"",
                    "default": "PATCH",
                    "type": "string"
                },
                "strip_user_ids_from_email": {
                    "title": "Strip User Ids From Email",
                    "description": "Whether or not to strip email id while adding owners using dbt meta actions.",
                    "default": false,
                    "type": "boolean"
                },
                "enable_owner_extraction": {
                    "title": "Enable Owner Extraction",
                    "description": "When enabled, ownership info will be extracted from the dbt meta",
                    "default": true,
                    "type": "boolean"
                },
                "owner_extraction_pattern": {
                    "title": "Owner Extraction Pattern",
                    "description": "Regex string to extract owner from the dbt node using the `(?P<name>...) syntax` of the [match object](https://docs.python.org/3/library/re.html#match-objects), where the group name must be `owner`. Examples: (1)`r\"(?P<owner>(.*)): (\\w+) (\\w+)\"` will extract `jdoe` as the owner from `\"jdoe: John Doe\"` (2) `r\"@(?P<owner>(.*))\"` will extract `alice` as the owner from `\"@alice\"`.",
                    "type": "string"
                },
                "include_env_in_assertion_guid": {
                    "title": "Include Env In Assertion Guid",
                    "description": "Prior to version 0.9.4.2, the assertion GUIDs did not include the environment. If you're using multiple dbt ingestion that are only distinguished by env, then you should set this flag to True.",
                    "default": false,
                    "type": "boolean"
                },
                "convert_column_urns_to_lowercase": {
                    "title": "Convert Column Urns To Lowercase",
                    "description": "When enabled, converts column URNs to lowercase to ensure cross-platform compatibility. If `target_platform` is Snowflake, the default is True.",
                    "default": false,
                    "type": "boolean"
                },
                "test_warnings_are_errors": {
                    "title": "Test Warnings Are Errors",
                    "description": "When enabled, dbt test warnings will be treated as failures.",
                    "default": false,
                    "type": "boolean"
                },
                "infer_dbt_schemas": {
                    "title": "Infer Dbt Schemas",
                    "description": "When enabled, schemas will be inferred from the dbt node definition.",
                    "default": true,
                    "type": "boolean"
                },
                "include_column_lineage": {
                    "title": "Include Column Lineage",
                    "description": "When enabled, column-level lineage will be extracted from the dbt node definition. Requires `infer_dbt_schemas` to be enabled. If you run into issues where the column name casing does not match up with properly, providing a datahub_api or using the rest sink will improve accuracy.",
                    "default": true,
                    "type": "boolean"
                },
                "include_compiled_code": {
                    "title": "Include Compiled Code",
                    "description": "When enabled, includes the compiled code in the emitted metadata.",
                    "default": true,
                    "type": "boolean"
                },
                "access_url": {
                    "title": "Access Url",
                    "description": "The base URL of the dbt Cloud instance to use. This should be the URL you use to access the dbt Cloud UI. It should include the scheme (http/https) and not include a trailing slash. See the access url for your dbt Cloud region here: https://docs.getdbt.com/docs/cloud/about-cloud/regions-ip-addresses",
                    "default": "https://cloud.getdbt.com",
                    "type": "string"
                },
                "metadata_endpoint": {
                    "title": "Metadata Endpoint",
                    "description": "The dbt Cloud metadata API endpoint. If not provided, we will try to infer it from the access_url.",
                    "default": "https://metadata.cloud.getdbt.com/graphql",
                    "type": "string"
                },
                "token": {
                    "title": "Token",
                    "description": "The API token to use to authenticate with DBT Cloud.",
                    "type": "string"
                },
                "account_id": {
                    "title": "Account Id",
                    "description": "The DBT Cloud account ID to use.",
                    "type": "integer"
                },
                "project_id": {
                    "title": "Project Id",
                    "description": "The dbt Cloud project ID to use.",
                    "type": "integer"
                },
                "job_id": {
                    "title": "Job Id",
                    "description": "The ID of the job to ingest metadata from.",
                    "type": "integer"
                },
                "run_id": {
                    "title": "Run Id",
                    "description": "The ID of the run to ingest metadata from. If not specified, we'll default to the latest run.",
                    "type": "integer"
                }
            },
            "required": [
                "target_platform",
                "token",
                "account_id",
                "project_id",
                "job_id"
            ],
            "additionalProperties": false
        },
        "mssql": {
            "type": "object",
            "properties": {
                "type": {
                    "type": "string",
                    "enum": [
                        "mssql"
                    ]
                },
                "config": {
                    "$ref": "#/definitions/mssql_config"
                }
            },
            "required": [
                "type",
                "config"
            ]
        },
        "mssql_config": {
            "title": "SQLServerConfig",
            "description": "Base configuration class for stateful ingestion for source configs to inherit from.",
            "type": "object",
            "properties": {
                "schema_pattern": {
                    "title": "Schema Pattern",
                    "description": "Regex patterns for schemas to filter in ingestion. Specify regex to only match the schema name. e.g. to match all tables in schema analytics, use the regex 'analytics'",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "allOf": [
                        {
                            "$ref": "#/definitions/AllowDenyPattern"
                        }
                    ]
                },
                "table_pattern": {
                    "title": "Table Pattern",
                    "description": "Regex patterns for tables to filter in ingestion. Specify regex to match the entire table name in database.schema.table format. e.g. to match all tables starting with customer in Customer database and public schema, use the regex 'Customer.public.customer.*'",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "allOf": [
                        {
                            "$ref": "#/definitions/AllowDenyPattern"
                        }
                    ]
                },
                "view_pattern": {
                    "title": "View Pattern",
                    "description": "Regex patterns for views to filter in ingestion. Note: Defaults to table_pattern if not specified. Specify regex to match the entire view name in database.schema.view format. e.g. to match all views starting with customer in Customer database and public schema, use the regex 'Customer.public.customer.*'",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "allOf": [
                        {
                            "$ref": "#/definitions/AllowDenyPattern"
                        }
                    ]
                },
                "classification": {
                    "title": "Classification",
                    "description": "For details, refer to [Classification](../../../../metadata-ingestion/docs/dev_guides/classification.md).",
                    "default": {
                        "enabled": false,
                        "sample_size": 100,
                        "max_workers": 4,
                        "table_pattern": {
                            "allow": [
                                ".*"
                            ],
                            "deny": [],
                            "ignoreCase": true
                        },
                        "column_pattern": {
                            "allow": [
                                ".*"
                            ],
                            "deny": [],
                            "ignoreCase": true
                        },
                        "info_type_to_term": {},
                        "classifiers": [
                            {
                                "type": "datahub",
                                "config": null
                            }
                        ]
                    },
                    "allOf": [
                        {
                            "$ref": "#/definitions/ClassificationConfig"
                        }
                    ]
                },
                "incremental_lineage": {
                    "title": "Incremental Lineage",
                    "description": "When enabled, emits lineage as incremental to existing lineage already in DataHub. When disabled, re-states lineage on each run.",
                    "default": false,
                    "type": "boolean"
                },
                "convert_urns_to_lowercase": {
                    "title": "Convert Urns To Lowercase",
                    "description": "Enable to convert the SQL Server assets urns to lowercase",
                    "default": false,
                    "type": "boolean"
                },
                "env": {
                    "title": "Env",
                    "description": "The environment that all assets produced by this connector belong to",
                    "default": "PROD",
                    "type": "string"
                },
                "platform_instance": {
                    "title": "Platform Instance",
                    "description": "The instance of the platform that all assets produced by this recipe belong to. This should be unique within the platform. See https://datahubproject.io/docs/platform-instances/ for more details.",
                    "type": "string"
                },
                "stateful_ingestion": {
                    "$ref": "#/definitions/StatefulStaleMetadataRemovalConfig"
                },
                "options": {
                    "title": "Options",
                    "description": "Any options specified here will be passed to [SQLAlchemy.create_engine](https://docs.sqlalchemy.org/en/14/core/engines.html#sqlalchemy.create_engine) as kwargs. To set connection arguments in the URL, specify them under `connect_args`.",
                    "type": "object"
                },
                "profile_pattern": {
                    "title": "Profile Pattern",
                    "description": "Regex patterns to filter tables (or specific columns) for profiling during ingestion. Note that only tables allowed by the `table_pattern` will be considered.",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "allOf": [
                        {
                            "$ref": "#/definitions/AllowDenyPattern"
                        }
                    ]
                },
                "domain": {
                    "title": "Domain",
                    "description": "Attach domains to databases, schemas or tables during ingestion using regex patterns. Domain key can be a guid like *urn:li:domain:ec428203-ce86-4db3-985d-5a8ee6df32ba* or a string like \"Marketing\".) If you provide strings, then datahub will attempt to resolve this name to a guid, and will error out if this fails. There can be multiple domain keys specified.",
                    "default": {},
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/definitions/AllowDenyPattern"
                    }
                },
                "include_views": {
                    "title": "Include Views",
                    "description": "Whether views should be ingested.",
                    "default": true,
                    "type": "boolean"
                },
                "include_tables": {
                    "title": "Include Tables",
                    "description": "Whether tables should be ingested.",
                    "default": true,
                    "type": "boolean"
                },
                "include_table_location_lineage": {
                    "title": "Include Table Location Lineage",
                    "description": "If the source supports it, include table lineage to the underlying storage location.",
                    "default": true,
                    "type": "boolean"
                },
                "include_view_lineage": {
                    "title": "Include View Lineage",
                    "description": "Populates view->view and table->view lineage using DataHub's sql parser.",
                    "default": true,
                    "type": "boolean"
                },
                "include_view_column_lineage": {
                    "title": "Include View Column Lineage",
                    "description": "Populates column-level lineage for  view->view and table->view lineage using DataHub's sql parser. Requires `include_view_lineage` to be enabled.",
                    "default": true,
                    "type": "boolean"
                },
                "use_file_backed_cache": {
                    "title": "Use File Backed Cache",
                    "description": "Whether to use a file backed cache for the view definitions.",
                    "default": true,
                    "type": "boolean"
                },
                "profiling": {
                    "title": "Profiling",
                    "default": {
                        "enabled": false,
                        "operation_config": {
                            "lower_freq_profile_enabled": false,
                            "profile_day_of_week": null,
                            "profile_date_of_month": null
                        },
                        "limit": null,
                        "offset": null,
                        "profile_table_level_only": false,
                        "include_field_null_count": true,
                        "include_field_distinct_count": true,
                        "include_field_min_value": true,
                        "include_field_max_value": true,
                        "include_field_mean_value": true,
                        "include_field_median_value": true,
                        "include_field_stddev_value": true,
                        "include_field_quantiles": false,
                        "include_field_distinct_value_frequencies": false,
                        "include_field_histogram": false,
                        "include_field_sample_values": true,
                        "max_workers": 20,
                        "report_dropped_profiles": false,
                        "turn_off_expensive_profiling_metrics": false,
                        "field_sample_values_limit": 20,
                        "max_number_of_fields_to_profile": null,
                        "profile_if_updated_since_days": null,
                        "profile_table_size_limit": 5,
                        "profile_table_row_limit": 5000000,
                        "profile_table_row_count_estimate_only": false,
                        "query_combiner_enabled": true,
                        "catch_exceptions": true,
                        "partition_profiling_enabled": true,
                        "partition_datetime": null,
                        "use_sampling": true,
                        "sample_size": 10000,
                        "profile_external_tables": false,
                        "tags_to_ignore_sampling": null,
                        "profile_nested_fields": false
                    },
                    "allOf": [
                        {
                            "$ref": "#/definitions/GEProfilingConfig"
                        }
                    ]
                },
                "username": {
                    "title": "Username",
                    "description": "username",
                    "type": "string"
                },
                "password": {
                    "title": "Password",
                    "description": "password",
                    "type": "string",
                    "writeOnly": true,
                    "format": "password"
                },
                "host_port": {
                    "title": "Host Port",
                    "description": "MSSQL host URL.",
                    "default": "localhost:1433",
                    "type": "string"
                },
                "database": {
                    "title": "Database",
                    "description": "database (catalog). If set to Null, all databases will be considered for ingestion.",
                    "type": "string"
                },
                "sqlalchemy_uri": {
                    "title": "Sqlalchemy Uri",
                    "description": "URI of database to connect to. See https://docs.sqlalchemy.org/en/14/core/engines.html#database-urls. Takes precedence over other connection parameters.",
                    "type": "string"
                },
                "include_stored_procedures": {
                    "title": "Include Stored Procedures",
                    "description": "Include ingest of stored procedures. Requires access to the 'sys' schema.",
                    "default": true,
                    "type": "boolean"
                },
                "include_stored_procedures_code": {
                    "title": "Include Stored Procedures Code",
                    "description": "Include information about object code.",
                    "default": true,
                    "type": "boolean"
                },
                "procedure_pattern": {
                    "title": "Procedure Pattern",
                    "description": "Regex patterns for stored procedures to filter in ingestion.Specify regex to match the entire procedure name in database.schema.procedure_name format. e.g. to match all procedures starting with customer in Customer database and public schema, use the regex 'Customer.public.customer.*'",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "allOf": [
                        {
                            "$ref": "#/definitions/AllowDenyPattern"
                        }
                    ]
                },
                "include_jobs": {
                    "title": "Include Jobs",
                    "description": "Include ingest of MSSQL Jobs. Requires access to the 'msdb' and 'sys' schema.",
                    "default": true,
                    "type": "boolean"
                },
                "include_descriptions": {
                    "title": "Include Descriptions",
                    "description": "Include table descriptions information.",
                    "default": true,
                    "type": "boolean"
                },
                "use_odbc": {
                    "title": "Use Odbc",
                    "description": "See https://docs.sqlalchemy.org/en/14/dialects/mssql.html#module-sqlalchemy.dialects.mssql.pyodbc.",
                    "default": false,
                    "type": "boolean"
                },
                "uri_args": {
                    "title": "Uri Args",
                    "description": "Arguments to URL-encode when connecting. See https://docs.microsoft.com/en-us/sql/connect/odbc/dsn-connection-string-attribute?view=sql-server-ver15.",
                    "default": {},
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "database_pattern": {
                    "title": "Database Pattern",
                    "description": "Regex patterns for databases to filter in ingestion.",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "allOf": [
                        {
                            "$ref": "#/definitions/AllowDenyPattern"
                        }
                    ]
                },
                "include_lineage": {
                    "title": "Include Lineage",
                    "description": "Enable lineage extraction for stored procedures",
                    "default": true,
                    "type": "boolean"
                }
            },
            "additionalProperties": false
        },
        "glue": {
            "type": "object",
            "properties": {
                "type": {
                    "type": "string",
                    "enum": [
                        "glue"
                    ]
                },
                "config": {
                    "$ref": "#/definitions/glue_config"
                }
            },
            "required": [
                "type",
                "config"
            ]
        },
        "glue_config": {
            "title": "GlueSourceConfig",
            "description": "Base configuration class for stateful ingestion for source configs to inherit from.",
            "type": "object",
            "properties": {
                "aws_access_key_id": {
                    "title": "Aws Access Key Id",
                    "description": "AWS access key ID. Can be auto-detected, see [the AWS boto3 docs](https://boto3.amazonaws.com/v1/documentation/api/latest/guide/credentials.html) for details.",
                    "type": "string"
                },
                "aws_secret_access_key": {
                    "title": "Aws Secret Access Key",
                    "description": "AWS secret access key. Can be auto-detected, see [the AWS boto3 docs](https://boto3.amazonaws.com/v1/documentation/api/latest/guide/credentials.html) for details.",
                    "type": "string"
                },
                "aws_session_token": {
                    "title": "Aws Session Token",
                    "description": "AWS session token. Can be auto-detected, see [the AWS boto3 docs](https://boto3.amazonaws.com/v1/documentation/api/latest/guide/credentials.html) for details.",
                    "type": "string"
                },
                "aws_role": {
                    "title": "Aws Role",
                    "description": "AWS roles to assume. If using the string format, the role ARN can be specified directly. If using the object format, the role can be specified in the RoleArn field and additional available arguments are the same as [boto3's STS.Client.assume_role](https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/sts.html?highlight=assume_role#STS.Client.assume_role).",
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "array",
                            "items": {
                                "anyOf": [
                                    {
                                        "type": "string"
                                    },
                                    {
                                        "$ref": "#/definitions/AwsAssumeRoleConfig"
                                    }
                                ]
                            }
                        }
                    ]
                },
                "aws_profile": {
                    "title": "Aws Profile",
                    "description": "The [named profile](https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-profiles.html) to use from AWS credentials. Falls back to default profile if not specified and no access keys provided. Profiles are configured in ~/.aws/credentials or ~/.aws/config.",
                    "type": "string"
                },
                "aws_region": {
                    "title": "Aws Region",
                    "description": "AWS region code.",
                    "type": "string"
                },
                "aws_endpoint_url": {
                    "title": "Aws Endpoint Url",
                    "description": "The AWS service endpoint. This is normally [constructed automatically](https://boto3.amazonaws.com/v1/documentation/api/latest/reference/core/session.html), but can be overridden here.",
                    "type": "string"
                },
                "aws_proxy": {
                    "title": "Aws Proxy",
                    "description": "A set of proxy configs to use with AWS. See the [botocore.config](https://botocore.amazonaws.com/v1/documentation/api/latest/reference/config.html) docs for details.",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "aws_retry_num": {
                    "title": "Aws Retry Num",
                    "description": "Number of times to retry failed AWS requests. See the [botocore.retry](https://boto3.amazonaws.com/v1/documentation/api/latest/guide/retries.html) docs for details.",
                    "default": 5,
                    "type": "integer"
                },
                "aws_retry_mode": {
                    "title": "Aws Retry Mode",
                    "description": "Retry mode to use for failed AWS requests. See the [botocore.retry](https://boto3.amazonaws.com/v1/documentation/api/latest/guide/retries.html) docs for details.",
                    "default": "standard",
                    "enum": [
                        "legacy",
                        "standard",
                        "adaptive"
                    ],
                    "type": "string"
                },
                "read_timeout": {
                    "title": "Read Timeout",
                    "description": "The timeout for reading from the connection (in seconds).",
                    "default": 60,
                    "type": "number"
                },
                "aws_advanced_config": {
                    "title": "Aws Advanced Config",
                    "description": "Advanced AWS configuration options. These are passed directly to [botocore.config.Config](https://botocore.amazonaws.com/v1/documentation/api/latest/reference/config.html).",
                    "type": "object"
                },
                "env": {
                    "title": "Env",
                    "description": "The environment that all assets produced by this connector belong to",
                    "default": "PROD",
                    "type": "string"
                },
                "database_pattern": {
                    "title": "Database Pattern",
                    "description": "regex patterns for databases to filter in ingestion.",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "allOf": [
                        {
                            "$ref": "#/definitions/AllowDenyPattern"
                        }
                    ]
                },
                "table_pattern": {
                    "title": "Table Pattern",
                    "description": "regex patterns for tables to filter in ingestion.",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "allOf": [
                        {
                            "$ref": "#/definitions/AllowDenyPattern"
                        }
                    ]
                },
                "platform_instance": {
                    "title": "Platform Instance",
                    "description": "The instance of the platform that all assets produced by this recipe belong to. This should be unique within the platform. See https://datahubproject.io/docs/platform-instances/ for more details.",
                    "type": "string"
                },
                "stateful_ingestion": {
                    "$ref": "#/definitions/StatefulStaleMetadataRemovalConfig"
                },
                "platform": {
                    "title": "Platform",
                    "description": "The platform to use for the dataset URNs. Must be one of ['glue', 'athena'].",
                    "default": "glue",
                    "type": "string"
                },
                "extract_owners": {
                    "title": "Extract Owners",
                    "description": "When enabled, extracts ownership from Glue table property and overwrites existing owners (DATAOWNER). When disabled, ownership is left empty for datasets. Expects a corpGroup urn, a corpuser urn or only the identifier part for the latter. Not used in the normal course of AWS Glue operations.",
                    "default": true,
                    "type": "boolean"
                },
                "extract_transforms": {
                    "title": "Extract Transforms",
                    "description": "Whether to extract Glue transform jobs.",
                    "default": true,
                    "type": "boolean"
                },
                "ignore_unsupported_connectors": {
                    "title": "Ignore Unsupported Connectors",
                    "description": "Whether to ignore unsupported connectors. If disabled, an error will be raised.",
                    "default": true,
                    "type": "boolean"
                },
                "emit_s3_lineage": {
                    "title": "Emit S3 Lineage",
                    "description": "Whether to emit S3-to-Glue lineage.",
                    "default": false,
                    "type": "boolean"
                },
                "glue_s3_lineage_direction": {
                    "title": "Glue S3 Lineage Direction",
                    "description": "If `upstream`, S3 is upstream to Glue. If `downstream` S3 is downstream to Glue.",
                    "default": "upstream",
                    "type": "string"
                },
                "domain": {
                    "title": "Domain",
                    "description": "regex patterns for tables to filter to assign domain_key. ",
                    "default": {},
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/definitions/AllowDenyPattern"
                    }
                },
                "catalog_id": {
                    "title": "Catalog Id",
                    "description": "The aws account id where the target glue catalog lives. If None, datahub will ingest glue in aws caller's account.",
                    "type": "string"
                },
                "ignore_resource_links": {
                    "title": "Ignore Resource Links",
                    "description": "If set to True, ignore database resource links.",
                    "default": false,
                    "type": "boolean"
                },
                "use_s3_bucket_tags": {
                    "title": "Use S3 Bucket Tags",
                    "description": "If an S3 Buckets Tags should be created for the Tables ingested by Glue. Please Note that this will not apply tags to any folders ingested, only the files.",
                    "default": false,
                    "type": "boolean"
                },
                "use_s3_object_tags": {
                    "title": "Use S3 Object Tags",
                    "description": "If an S3 Objects Tags should be created for the Tables ingested by Glue.",
                    "default": false,
                    "type": "boolean"
                },
                "profiling": {
                    "title": "Profiling",
                    "description": "Configs to ingest data profiles from glue table",
                    "allOf": [
                        {
                            "$ref": "#/definitions/GlueProfilingConfig"
                        }
                    ]
                },
                "extract_delta_schema_from_parameters": {
                    "title": "Extract Delta Schema From Parameters",
                    "description": "If enabled, delta schemas can be alternatively fetched from table parameters.",
                    "default": false,
                    "type": "boolean"
                },
                "include_column_lineage": {
                    "title": "Include Column Lineage",
                    "description": "When enabled, column-level lineage will be extracted from the s3.",
                    "default": true,
                    "type": "boolean"
                }
            },
            "additionalProperties": false
        },
        "salesforce": {
            "type": "object",
            "properties": {
                "type": {
                    "type": "string",
                    "enum": [
                        "salesforce"
                    ]
                },
                "config": {
                    "$ref": "#/definitions/salesforce_config"
                }
            },
            "required": [
                "type",
                "config"
            ]
        },
        "salesforce_config": {
            "title": "SalesforceConfig",
            "description": "Any source that is a primary producer of Dataset metadata should inherit this class",
            "type": "object",
            "properties": {
                "env": {
                    "title": "Env",
                    "description": "The environment that all assets produced by this connector belong to",
                    "default": "PROD",
                    "type": "string"
                },
                "platform_instance": {
                    "title": "Platform Instance",
                    "description": "The instance of the platform that all assets produced by this recipe belong to. This should be unique within the platform. See https://datahubproject.io/docs/platform-instances/ for more details.",
                    "type": "string"
                },
                "platform": {
                    "title": "Platform",
                    "default": "salesforce",
                    "type": "string"
                },
                "auth": {
                    "default": "USERNAME_PASSWORD",
                    "allOf": [
                        {
                            "$ref": "#/definitions/SalesforceAuthType"
                        }
                    ]
                },
                "username": {
                    "title": "Username",
                    "description": "Salesforce username",
                    "type": "string"
                },
                "password": {
                    "title": "Password",
                    "description": "Password for Salesforce user",
                    "type": "string"
                },
                "consumer_key": {
                    "title": "Consumer Key",
                    "description": "Consumer key for Salesforce JSON web token access",
                    "type": "string"
                },
                "private_key": {
                    "title": "Private Key",
                    "description": "Private key as a string for Salesforce JSON web token access",
                    "type": "string"
                },
                "security_token": {
                    "title": "Security Token",
                    "description": "Security token for Salesforce username",
                    "type": "string"
                },
                "instance_url": {
                    "title": "Instance Url",
                    "description": "Salesforce instance url. e.g. https://MyDomainName.my.salesforce.com",
                    "type": "string"
                },
                "is_sandbox": {
                    "title": "Is Sandbox",
                    "description": "Connect to Sandbox instance of your Salesforce",
                    "default": false,
                    "type": "boolean"
                },
                "access_token": {
                    "title": "Access Token",
                    "description": "Access token for instance url",
                    "type": "string"
                },
                "ingest_tags": {
                    "title": "Ingest Tags",
                    "description": "Ingest Tags from source. This will override Tags entered from UI",
                    "default": false,
                    "type": "boolean"
                },
                "object_pattern": {
                    "title": "Object Pattern",
                    "description": "Regex patterns for Salesforce objects to filter in ingestion.",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "allOf": [
                        {
                            "$ref": "#/definitions/AllowDenyPattern"
                        }
                    ]
                },
                "domain": {
                    "title": "Domain",
                    "description": "Regex patterns for tables/schemas to describe domain_key domain key (domain_key can be any string like \"sales\".) There can be multiple domain keys specified.",
                    "default": {},
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/definitions/AllowDenyPattern"
                    }
                },
                "api_version": {
                    "title": "Api Version",
                    "description": "If specified, overrides default version used by the Salesforce package. Example value: '59.0'",
                    "type": "string"
                },
                "profiling": {
                    "title": "Profiling",
                    "default": {
                        "enabled": false,
                        "operation_config": {
                            "lower_freq_profile_enabled": false,
                            "profile_day_of_week": null,
                            "profile_date_of_month": null
                        }
                    },
                    "allOf": [
                        {
                            "$ref": "#/definitions/SalesforceProfilingConfig"
                        }
                    ]
                },
                "profile_pattern": {
                    "title": "Profile Pattern",
                    "description": "Regex patterns for profiles to filter in ingestion, allowed by the `object_pattern`.",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "allOf": [
                        {
                            "$ref": "#/definitions/AllowDenyPattern"
                        }
                    ]
                }
            },
            "additionalProperties": false
        },
        "mlflow": {
            "type": "object",
            "properties": {
                "type": {
                    "type": "string",
                    "enum": [
                        "mlflow"
                    ]
                },
                "config": {
                    "$ref": "#/definitions/mlflow_config"
                }
            },
            "required": [
                "type",
                "config"
            ]
        },
        "mlflow_config": {
            "title": "MLflowConfig",
            "description": "Any source that produces dataset urns in a single environment should inherit this class",
            "type": "object",
            "properties": {
                "env": {
                    "title": "Env",
                    "description": "The environment that all assets produced by this connector belong to",
                    "default": "PROD",
                    "type": "string"
                },
                "tracking_uri": {
                    "title": "Tracking Uri",
                    "description": "Tracking server URI. If not set, an MLflow default tracking_uri is used (local `mlruns/` directory or `MLFLOW_TRACKING_URI` environment variable)",
                    "type": "string"
                },
                "registry_uri": {
                    "title": "Registry Uri",
                    "description": "Registry server URI. If not set, an MLflow default registry_uri is used (value of tracking_uri or `MLFLOW_REGISTRY_URI` environment variable)",
                    "type": "string"
                },
                "model_name_separator": {
                    "title": "Model Name Separator",
                    "description": "A string which separates model name from its version (e.g. model_1 or model-1)",
                    "default": "_",
                    "type": "string"
                },
                "base_external_url": {
                    "title": "Base External Url",
                    "description": "Base URL to use when constructing external URLs to MLflow. If not set, tracking_uri is used if it's an HTTP URL. If neither is set, external URLs are not generated.",
                    "type": "string"
                }
            },
            "additionalProperties": false
        },
        "DynamicTypedStateProviderConfig": {
            "title": "DynamicTypedStateProviderConfig",
            "type": "object",
            "properties": {
                "type": {
                    "title": "Type",
                    "description": "The type of the state provider to use. For DataHub use `datahub`",
                    "type": "string"
                },
                "config": {
                    "title": "Config",
                    "description": "The configuration required for initializing the state provider. Default: The datahub_api config if set at pipeline level. Otherwise, the default DatahubClientConfig. See the defaults (https://github.com/datahub-project/datahub/blob/master/metadata-ingestion/src/datahub/ingestion/graph/client.py#L19).",
                    "default": {},
                    "type": "object"
                }
            },
            "required": [
                "type"
            ],
            "additionalProperties": false
        },
        "StatefulStaleMetadataRemovalConfig": {
            "title": "StatefulStaleMetadataRemovalConfig",
            "description": "Base specialized config for Stateful Ingestion with stale metadata removal capability.",
            "type": "object",
            "properties": {
                "enabled": {
                    "title": "Enabled",
                    "description": "Whether or not to enable stateful ingest. Default: True if a pipeline_name is set and either a datahub-rest sink or `datahub_api` is specified, otherwise False",
                    "default": false,
                    "type": "boolean"
                },
                "remove_stale_metadata": {
                    "title": "Remove Stale Metadata",
                    "description": "Soft-deletes the entities present in the last successful run but missing in the current run with stateful_ingestion enabled.",
                    "default": true,
                    "type": "boolean"
                }
            },
            "additionalProperties": false
        },
        "AllowDenyPattern": {
            "title": "AllowDenyPattern",
            "description": "A class to store allow deny regexes",
            "type": "object",
            "properties": {
                "allow": {
                    "title": "Allow",
                    "description": "List of regex patterns to include in ingestion",
                    "default": [
                        ".*"
                    ],
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "deny": {
                    "title": "Deny",
                    "description": "List of regex patterns to exclude from ingestion.",
                    "default": [],
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "ignoreCase": {
                    "title": "Ignorecase",
                    "description": "Whether to ignore case sensitivity during pattern matching.",
                    "default": true,
                    "type": "boolean"
                }
            },
            "additionalProperties": false
        },
        "ConnectionMappingConfig": {
            "title": "ConnectionMappingConfig",
            "description": "Any source that produces dataset urns in a single environment should inherit this class",
            "type": "object",
            "properties": {
                "env": {
                    "title": "Env",
                    "description": "The environment that this connection mapping belongs to",
                    "default": "PROD",
                    "type": "string"
                },
                "platform": {
                    "title": "Platform",
                    "description": "The platform that this connection mapping belongs to",
                    "type": "string"
                },
                "platform_instance": {
                    "title": "Platform Instance",
                    "description": "The instance of the platform that this connection mapping belongs to",
                    "type": "string"
                }
            },
            "additionalProperties": false
        },
        "PlatformDetail": {
            "title": "PlatformDetail",
            "type": "object",
            "properties": {
                "platform": {
                    "title": "Platform",
                    "description": "Override the platform type detection.",
                    "type": "string"
                },
                "platform_instance": {
                    "title": "Platform Instance",
                    "description": "The instance of the platform that all assets produced by this recipe belong to",
                    "type": "string"
                },
                "env": {
                    "title": "Env",
                    "description": "The environment that all assets produced by DataHub platform ingestion source belong to",
                    "default": "PROD",
                    "type": "string"
                },
                "database": {
                    "title": "Database",
                    "description": "The database that all assets produced by this connector belong to. For destinations, this defaults to the fivetran log config's database.",
                    "type": "string"
                }
            },
            "additionalProperties": false
        },
        "DataBricksPlatformDetail": {
            "title": "DataBricksPlatformDetail",
            "description": "metastore is an additional field used in Databricks connector to generate the dataset urn",
            "type": "object",
            "properties": {
                "platform_instance": {
                    "title": "Platform Instance",
                    "description": "DataHub platform instance name. To generate correct urn for upstream dataset, this should match with platform instance name used in ingestion recipe of other datahub sources.",
                    "type": "string"
                },
                "env": {
                    "title": "Env",
                    "description": "The environment that all assets produced by DataHub platform ingestion source belong to",
                    "default": "PROD",
                    "type": "string"
                },
                "metastore": {
                    "title": "Metastore",
                    "description": "Databricks Unity Catalog metastore name.",
                    "type": "string"
                }
            },
            "required": [
                "metastore"
            ],
            "additionalProperties": false
        },
        "OwnershipMapping": {
            "title": "OwnershipMapping",
            "type": "object",
            "properties": {
                "create_corp_user": {
                    "title": "Create Corp User",
                    "description": "Whether ingest PowerBI user as Datahub Corpuser",
                    "default": true,
                    "type": "boolean"
                },
                "use_powerbi_email": {
                    "title": "Use Powerbi Email",
                    "description": "Use PowerBI User email to ingest as corpuser, default is powerbi user identifier",
                    "default": true,
                    "type": "boolean"
                },
                "remove_email_suffix": {
                    "title": "Remove Email Suffix",
                    "description": "Remove PowerBI User email suffix for example, @acryl.io",
                    "default": false,
                    "type": "boolean"
                },
                "dataset_configured_by_as_owner": {
                    "title": "Dataset Configured By As Owner",
                    "description": "Take PBI dataset configuredBy as dataset owner if exist",
                    "default": false,
                    "type": "boolean"
                },
                "owner_criteria": {
                    "title": "Owner Criteria",
                    "description": "Need to have certain authority to qualify as owner for example ['ReadWriteReshareExplore','Owner','Admin']",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "additionalProperties": false
        },
        "PowerBiProfilingConfig": {
            "title": "PowerBiProfilingConfig",
            "type": "object",
            "properties": {
                "enabled": {
                    "title": "Enabled",
                    "description": "Whether profiling of PowerBI datasets should be done",
                    "default": false,
                    "type": "boolean"
                }
            },
            "additionalProperties": false
        },
        "DynamicTypedClassifierConfig": {
            "title": "DynamicTypedClassifierConfig",
            "type": "object",
            "properties": {
                "type": {
                    "title": "Type",
                    "description": "The type of the classifier to use. For DataHub,  use `datahub`",
                    "type": "string"
                },
                "config": {
                    "title": "Config",
                    "description": "The configuration required for initializing the classifier. If not specified, uses defaults for classifer type."
                }
            },
            "required": [
                "type"
            ],
            "additionalProperties": false
        },
        "ClassificationConfig": {
            "title": "ClassificationConfig",
            "type": "object",
            "properties": {
                "enabled": {
                    "title": "Enabled",
                    "description": "Whether classification should be used to auto-detect glossary terms",
                    "default": false,
                    "type": "boolean"
                },
                "sample_size": {
                    "title": "Sample Size",
                    "description": "Number of sample values used for classification.",
                    "default": 100,
                    "type": "integer"
                },
                "max_workers": {
                    "title": "Max Workers",
                    "description": "Number of worker processes to use for classification. Set to 1 to disable.",
                    "default": 4,
                    "type": "integer"
                },
                "table_pattern": {
                    "title": "Table Pattern",
                    "description": "Regex patterns to filter tables for classification. This is used in combination with other patterns in parent config. Specify regex to match the entire table name in `database.schema.table` format. e.g. to match all tables starting with customer in Customer database and public schema, use the regex 'Customer.public.customer.*'",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "allOf": [
                        {
                            "$ref": "#/definitions/AllowDenyPattern"
                        }
                    ]
                },
                "column_pattern": {
                    "title": "Column Pattern",
                    "description": "Regex patterns to filter columns for classification. This is used in combination with other patterns in parent config. Specify regex to match the column name in `database.schema.table.column` format.",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "allOf": [
                        {
                            "$ref": "#/definitions/AllowDenyPattern"
                        }
                    ]
                },
                "info_type_to_term": {
                    "title": "Info Type To Term",
                    "description": "Optional mapping to provide glossary term identifier for info type",
                    "default": {},
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "classifiers": {
                    "title": "Classifiers",
                    "description": "Classifiers to use to auto-detect glossary terms. If more than one classifier, infotype predictions from the classifier defined later in sequence take precedance.",
                    "default": [
                        {
                            "type": "datahub",
                            "config": null
                        }
                    ],
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/DynamicTypedClassifierConfig"
                    }
                }
            },
            "additionalProperties": false
        },
        "OperationConfig": {
            "title": "OperationConfig",
            "type": "object",
            "properties": {
                "lower_freq_profile_enabled": {
                    "title": "Lower Freq Profile Enabled",
                    "description": "Whether to do profiling at lower freq or not. This does not do any scheduling just adds additional checks to when not to run profiling.",
                    "default": false,
                    "type": "boolean"
                },
                "profile_day_of_week": {
                    "title": "Profile Day Of Week",
                    "description": "Number between 0 to 6 for day of week (both inclusive). 0 is Monday and 6 is Sunday. If not specified, defaults to Nothing and this field does not take affect.",
                    "type": "integer"
                },
                "profile_date_of_month": {
                    "title": "Profile Date Of Month",
                    "description": "Number between 1 to 31 for date of month (both inclusive). If not specified, defaults to Nothing and this field does not take affect.",
                    "type": "integer"
                }
            },
            "additionalProperties": false
        },
        "GEProfilingConfig": {
            "title": "GEProfilingConfig",
            "type": "object",
            "properties": {
                "enabled": {
                    "title": "Enabled",
                    "description": "Whether profiling should be done.",
                    "default": false,
                    "type": "boolean"
                },
                "operation_config": {
                    "title": "Operation Config",
                    "description": "Experimental feature. To specify operation configs.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/OperationConfig"
                        }
                    ]
                },
                "limit": {
                    "title": "Limit",
                    "description": "Max number of documents to profile. By default, profiles all documents.",
                    "type": "integer"
                },
                "offset": {
                    "title": "Offset",
                    "description": "Offset in documents to profile. By default, uses no offset.",
                    "type": "integer"
                },
                "profile_table_level_only": {
                    "title": "Profile Table Level Only",
                    "description": "Whether to perform profiling at table-level only, or include column-level profiling as well.",
                    "default": false,
                    "type": "boolean"
                },
                "include_field_null_count": {
                    "title": "Include Field Null Count",
                    "description": "Whether to profile for the number of nulls for each column.",
                    "default": true,
                    "type": "boolean"
                },
                "include_field_distinct_count": {
                    "title": "Include Field Distinct Count",
                    "description": "Whether to profile for the number of distinct values for each column.",
                    "default": true,
                    "type": "boolean"
                },
                "include_field_min_value": {
                    "title": "Include Field Min Value",
                    "description": "Whether to profile for the min value of numeric columns.",
                    "default": true,
                    "type": "boolean"
                },
                "include_field_max_value": {
                    "title": "Include Field Max Value",
                    "description": "Whether to profile for the max value of numeric columns.",
                    "default": true,
                    "type": "boolean"
                },
                "include_field_mean_value": {
                    "title": "Include Field Mean Value",
                    "description": "Whether to profile for the mean value of numeric columns.",
                    "default": true,
                    "type": "boolean"
                },
                "include_field_median_value": {
                    "title": "Include Field Median Value",
                    "description": "Whether to profile for the median value of numeric columns.",
                    "default": true,
                    "type": "boolean"
                },
                "include_field_stddev_value": {
                    "title": "Include Field Stddev Value",
                    "description": "Whether to profile for the standard deviation of numeric columns.",
                    "default": true,
                    "type": "boolean"
                },
                "include_field_quantiles": {
                    "title": "Include Field Quantiles",
                    "description": "Whether to profile for the quantiles of numeric columns.",
                    "default": false,
                    "type": "boolean"
                },
                "include_field_distinct_value_frequencies": {
                    "title": "Include Field Distinct Value Frequencies",
                    "description": "Whether to profile for distinct value frequencies.",
                    "default": false,
                    "type": "boolean"
                },
                "include_field_histogram": {
                    "title": "Include Field Histogram",
                    "description": "Whether to profile for the histogram for numeric fields.",
                    "default": false,
                    "type": "boolean"
                },
                "include_field_sample_values": {
                    "title": "Include Field Sample Values",
                    "description": "Whether to profile for the sample values for all columns.",
                    "default": true,
                    "type": "boolean"
                },
                "max_workers": {
                    "title": "Max Workers",
                    "description": "Number of worker threads to use for profiling. Set to 1 to disable.",
                    "default": 20,
                    "type": "integer"
                },
                "report_dropped_profiles": {
                    "title": "Report Dropped Profiles",
                    "description": "Whether to report datasets or dataset columns which were not profiled. Set to `True` for debugging purposes.",
                    "default": false,
                    "type": "boolean"
                },
                "turn_off_expensive_profiling_metrics": {
                    "title": "Turn Off Expensive Profiling Metrics",
                    "description": "Whether to turn off expensive profiling or not. This turns off profiling for quantiles, distinct_value_frequencies, histogram & sample_values. This also limits maximum number of fields being profiled to 10.",
                    "default": false,
                    "type": "boolean"
                },
                "field_sample_values_limit": {
                    "title": "Field Sample Values Limit",
                    "description": "Upper limit for number of sample values to collect for all columns.",
                    "default": 20,
                    "type": "integer"
                },
                "max_number_of_fields_to_profile": {
                    "title": "Max Number Of Fields To Profile",
                    "description": "A positive integer that specifies the maximum number of columns to profile for any table. `None` implies all columns. The cost of profiling goes up significantly as the number of columns to profile goes up.",
                    "exclusiveMinimum": 0,
                    "type": "integer"
                },
                "profile_if_updated_since_days": {
                    "title": "Profile If Updated Since Days",
                    "description": "Profile table only if it has been updated since these many number of days. If set to `null`, no constraint of last modified time for tables to profile. Supported only in `snowflake` and `BigQuery`.",
                    "exclusiveMinimum": 0,
                    "type": "number"
                },
                "profile_table_size_limit": {
                    "title": "Profile Table Size Limit",
                    "description": "Profile tables only if their size is less than specified GBs. If set to `null`, no limit on the size of tables to profile. Supported only in `snowflake` and `BigQuery`Supported for `oracle` based on calculated size from gathered stats.",
                    "default": 5,
                    "type": "integer"
                },
                "profile_table_row_limit": {
                    "title": "Profile Table Row Limit",
                    "description": "Profile tables only if their row count is less than specified count. If set to `null`, no limit on the row count of tables to profile. Supported only in `snowflake` and `BigQuery`Supported for `oracle` based on gathered stats.",
                    "default": 5000000,
                    "type": "integer"
                },
                "profile_table_row_count_estimate_only": {
                    "title": "Profile Table Row Count Estimate Only",
                    "description": "Use an approximate query for row count. This will be much faster but slightly less accurate. Only supported for Postgres and MySQL. ",
                    "default": false,
                    "type": "boolean"
                },
                "query_combiner_enabled": {
                    "title": "Query Combiner Enabled",
                    "description": "*This feature is still experimental and can be disabled if it causes issues.* Reduces the total number of queries issued and speeds up profiling by dynamically combining SQL queries where possible.",
                    "default": true,
                    "type": "boolean"
                },
                "catch_exceptions": {
                    "title": "Catch Exceptions",
                    "default": true,
                    "type": "boolean"
                },
                "partition_profiling_enabled": {
                    "title": "Partition Profiling Enabled",
                    "description": "Whether to profile partitioned tables. Only BigQuery and Aws Athena supports this. If enabled, latest partition data is used for profiling.",
                    "default": true,
                    "type": "boolean"
                },
                "partition_datetime": {
                    "title": "Partition Datetime",
                    "description": "If specified, profile only the partition which matches this datetime. If not specified, profile the latest partition. Only Bigquery supports this.",
                    "type": "string",
                    "format": "date-time"
                },
                "use_sampling": {
                    "title": "Use Sampling",
                    "description": "Whether to profile column level stats on sample of table. Only BigQuery and Snowflake support this. If enabled, profiling is done on rows sampled from table. Sampling is not done for smaller tables. ",
                    "default": true,
                    "type": "boolean"
                },
                "sample_size": {
                    "title": "Sample Size",
                    "description": "Number of rows to be sampled from table for column level profiling.Applicable only if `use_sampling` is set to True.",
                    "default": 10000,
                    "type": "integer"
                },
                "profile_external_tables": {
                    "title": "Profile External Tables",
                    "description": "Whether to profile external tables. Only Snowflake and Redshift supports this.",
                    "default": false,
                    "type": "boolean"
                },
                "tags_to_ignore_sampling": {
                    "title": "Tags To Ignore Sampling",
                    "description": "Fixed list of tags to ignore sampling. If not specified, tables will be sampled based on `use_sampling`.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "profile_nested_fields": {
                    "title": "Profile Nested Fields",
                    "description": "Whether to profile complex types like structs, arrays and maps. ",
                    "default": false,
                    "type": "boolean"
                }
            },
            "additionalProperties": false
        },
        "AthenaProfilingConfig": {
            "title": "AthenaProfilingConfig",
            "type": "object",
            "properties": {
                "enabled": {
                    "title": "Enabled",
                    "description": "Whether profiling should be done.",
                    "default": false,
                    "type": "boolean"
                },
                "operation_config": {
                    "title": "Operation Config",
                    "description": "Experimental feature. To specify operation configs.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/OperationConfig"
                        }
                    ]
                },
                "limit": {
                    "title": "Limit",
                    "description": "Max number of documents to profile. By default, profiles all documents.",
                    "type": "integer"
                },
                "offset": {
                    "title": "Offset",
                    "description": "Offset in documents to profile. By default, uses no offset.",
                    "type": "integer"
                },
                "profile_table_level_only": {
                    "title": "Profile Table Level Only",
                    "description": "Whether to perform profiling at table-level only, or include column-level profiling as well.",
                    "default": false,
                    "type": "boolean"
                },
                "include_field_null_count": {
                    "title": "Include Field Null Count",
                    "description": "Whether to profile for the number of nulls for each column.",
                    "default": true,
                    "type": "boolean"
                },
                "include_field_distinct_count": {
                    "title": "Include Field Distinct Count",
                    "description": "Whether to profile for the number of distinct values for each column.",
                    "default": true,
                    "type": "boolean"
                },
                "include_field_min_value": {
                    "title": "Include Field Min Value",
                    "description": "Whether to profile for the min value of numeric columns.",
                    "default": true,
                    "type": "boolean"
                },
                "include_field_max_value": {
                    "title": "Include Field Max Value",
                    "description": "Whether to profile for the max value of numeric columns.",
                    "default": true,
                    "type": "boolean"
                },
                "include_field_mean_value": {
                    "title": "Include Field Mean Value",
                    "description": "Whether to profile for the mean value of numeric columns.",
                    "default": true,
                    "type": "boolean"
                },
                "include_field_median_value": {
                    "title": "Include Field Median Value",
                    "description": "Whether to profile for the median value of numeric columns.",
                    "default": true,
                    "type": "boolean"
                },
                "include_field_stddev_value": {
                    "title": "Include Field Stddev Value",
                    "description": "Whether to profile for the standard deviation of numeric columns.",
                    "default": true,
                    "type": "boolean"
                },
                "include_field_quantiles": {
                    "title": "Include Field Quantiles",
                    "description": "Whether to profile for the quantiles of numeric columns.",
                    "default": false,
                    "type": "boolean"
                },
                "include_field_distinct_value_frequencies": {
                    "title": "Include Field Distinct Value Frequencies",
                    "description": "Whether to profile for distinct value frequencies.",
                    "default": false,
                    "type": "boolean"
                },
                "include_field_histogram": {
                    "title": "Include Field Histogram",
                    "description": "Whether to profile for the histogram for numeric fields.",
                    "default": false,
                    "type": "boolean"
                },
                "include_field_sample_values": {
                    "title": "Include Field Sample Values",
                    "description": "Whether to profile for the sample values for all columns.",
                    "default": true,
                    "type": "boolean"
                },
                "max_workers": {
                    "title": "Max Workers",
                    "description": "Number of worker threads to use for profiling. Set to 1 to disable.",
                    "default": 20,
                    "type": "integer"
                },
                "report_dropped_profiles": {
                    "title": "Report Dropped Profiles",
                    "description": "Whether to report datasets or dataset columns which were not profiled. Set to `True` for debugging purposes.",
                    "default": false,
                    "type": "boolean"
                },
                "turn_off_expensive_profiling_metrics": {
                    "title": "Turn Off Expensive Profiling Metrics",
                    "description": "Whether to turn off expensive profiling or not. This turns off profiling for quantiles, distinct_value_frequencies, histogram & sample_values. This also limits maximum number of fields being profiled to 10.",
                    "default": false,
                    "type": "boolean"
                },
                "field_sample_values_limit": {
                    "title": "Field Sample Values Limit",
                    "description": "Upper limit for number of sample values to collect for all columns.",
                    "default": 20,
                    "type": "integer"
                },
                "max_number_of_fields_to_profile": {
                    "title": "Max Number Of Fields To Profile",
                    "description": "A positive integer that specifies the maximum number of columns to profile for any table. `None` implies all columns. The cost of profiling goes up significantly as the number of columns to profile goes up.",
                    "exclusiveMinimum": 0,
                    "type": "integer"
                },
                "profile_if_updated_since_days": {
                    "title": "Profile If Updated Since Days",
                    "description": "Profile table only if it has been updated since these many number of days. If set to `null`, no constraint of last modified time for tables to profile. Supported only in `snowflake` and `BigQuery`.",
                    "exclusiveMinimum": 0,
                    "type": "number"
                },
                "profile_table_size_limit": {
                    "title": "Profile Table Size Limit",
                    "description": "Profile tables only if their size is less than specified GBs. If set to `null`, no limit on the size of tables to profile. Supported only in `snowflake` and `BigQuery`Supported for `oracle` based on calculated size from gathered stats.",
                    "default": 5,
                    "type": "integer"
                },
                "profile_table_row_limit": {
                    "title": "Profile Table Row Limit",
                    "description": "Profile tables only if their row count is less than specified count. If set to `null`, no limit on the row count of tables to profile. Supported only in `snowflake` and `BigQuery`Supported for `oracle` based on gathered stats.",
                    "default": 5000000,
                    "type": "integer"
                },
                "profile_table_row_count_estimate_only": {
                    "title": "Profile Table Row Count Estimate Only",
                    "description": "Use an approximate query for row count. This will be much faster but slightly less accurate. Only supported for Postgres and MySQL. ",
                    "default": false,
                    "type": "boolean"
                },
                "query_combiner_enabled": {
                    "title": "Query Combiner Enabled",
                    "description": "*This feature is still experimental and can be disabled if it causes issues.* Reduces the total number of queries issued and speeds up profiling by dynamically combining SQL queries where possible.",
                    "default": true,
                    "type": "boolean"
                },
                "catch_exceptions": {
                    "title": "Catch Exceptions",
                    "default": true,
                    "type": "boolean"
                },
                "partition_profiling_enabled": {
                    "title": "Partition Profiling Enabled",
                    "description": "Enable partition profiling. This will profile the latest partition of the table.",
                    "default": false,
                    "type": "boolean"
                },
                "partition_datetime": {
                    "title": "Partition Datetime",
                    "description": "If specified, profile only the partition which matches this datetime. If not specified, profile the latest partition. Only Bigquery supports this.",
                    "type": "string",
                    "format": "date-time"
                },
                "use_sampling": {
                    "title": "Use Sampling",
                    "description": "Whether to profile column level stats on sample of table. Only BigQuery and Snowflake support this. If enabled, profiling is done on rows sampled from table. Sampling is not done for smaller tables. ",
                    "default": true,
                    "type": "boolean"
                },
                "sample_size": {
                    "title": "Sample Size",
                    "description": "Number of rows to be sampled from table for column level profiling.Applicable only if `use_sampling` is set to True.",
                    "default": 10000,
                    "type": "integer"
                },
                "profile_external_tables": {
                    "title": "Profile External Tables",
                    "description": "Whether to profile external tables. Only Snowflake and Redshift supports this.",
                    "default": false,
                    "type": "boolean"
                },
                "tags_to_ignore_sampling": {
                    "title": "Tags To Ignore Sampling",
                    "description": "Fixed list of tags to ignore sampling. If not specified, tables will be sampled based on `use_sampling`.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "profile_nested_fields": {
                    "title": "Profile Nested Fields",
                    "description": "Whether to profile complex types like structs, arrays and maps. ",
                    "default": false,
                    "type": "boolean"
                }
            },
            "additionalProperties": false
        },
        "BucketDuration": {
            "title": "BucketDuration",
            "description": "An enumeration.",
            "enum": [
                "DAY",
                "HOUR"
            ],
            "type": "string"
        },
        "CassandraCloudConfig": {
            "title": "CassandraCloudConfig",
            "description": "Configuration for connecting to DataStax Astra DB in the cloud.",
            "type": "object",
            "properties": {
                "token": {
                    "title": "Token",
                    "description": "The Astra DB application token used for authentication.",
                    "type": "string"
                },
                "secure_connect_bundle": {
                    "title": "Secure Connect Bundle",
                    "description": "File path to the Secure Connect Bundle (.zip) used for a secure connection to DataStax Astra DB.",
                    "type": "string"
                },
                "connect_timeout": {
                    "title": "Connect Timeout",
                    "description": "Timeout in seconds for establishing new connections to Cassandra.",
                    "default": 600,
                    "type": "integer"
                },
                "request_timeout": {
                    "title": "Request Timeout",
                    "description": "Timeout in seconds for individual Cassandra requests.",
                    "default": 600,
                    "type": "integer"
                }
            },
            "required": [
                "token",
                "secure_connect_bundle"
            ],
            "additionalProperties": false
        },
        "GEProfilingBaseConfig": {
            "title": "GEProfilingBaseConfig",
            "type": "object",
            "properties": {
                "enabled": {
                    "title": "Enabled",
                    "description": "Whether profiling should be done.",
                    "default": false,
                    "type": "boolean"
                },
                "operation_config": {
                    "title": "Operation Config",
                    "description": "Experimental feature. To specify operation configs.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/OperationConfig"
                        }
                    ]
                },
                "limit": {
                    "title": "Limit",
                    "description": "Max number of documents to profile. By default, profiles all documents.",
                    "type": "integer"
                },
                "offset": {
                    "title": "Offset",
                    "description": "Offset in documents to profile. By default, uses no offset.",
                    "type": "integer"
                },
                "profile_table_level_only": {
                    "title": "Profile Table Level Only",
                    "description": "Whether to perform profiling at table-level only, or include column-level profiling as well.",
                    "default": false,
                    "type": "boolean"
                },
                "include_field_null_count": {
                    "title": "Include Field Null Count",
                    "description": "Whether to profile for the number of nulls for each column.",
                    "default": true,
                    "type": "boolean"
                },
                "include_field_distinct_count": {
                    "title": "Include Field Distinct Count",
                    "description": "Whether to profile for the number of distinct values for each column.",
                    "default": true,
                    "type": "boolean"
                },
                "include_field_min_value": {
                    "title": "Include Field Min Value",
                    "description": "Whether to profile for the min value of numeric columns.",
                    "default": true,
                    "type": "boolean"
                },
                "include_field_max_value": {
                    "title": "Include Field Max Value",
                    "description": "Whether to profile for the max value of numeric columns.",
                    "default": true,
                    "type": "boolean"
                },
                "include_field_mean_value": {
                    "title": "Include Field Mean Value",
                    "description": "Whether to profile for the mean value of numeric columns.",
                    "default": true,
                    "type": "boolean"
                },
                "include_field_median_value": {
                    "title": "Include Field Median Value",
                    "description": "Whether to profile for the median value of numeric columns.",
                    "default": true,
                    "type": "boolean"
                },
                "include_field_stddev_value": {
                    "title": "Include Field Stddev Value",
                    "description": "Whether to profile for the standard deviation of numeric columns.",
                    "default": true,
                    "type": "boolean"
                },
                "include_field_quantiles": {
                    "title": "Include Field Quantiles",
                    "description": "Whether to profile for the quantiles of numeric columns.",
                    "default": false,
                    "type": "boolean"
                },
                "include_field_distinct_value_frequencies": {
                    "title": "Include Field Distinct Value Frequencies",
                    "description": "Whether to profile for distinct value frequencies.",
                    "default": false,
                    "type": "boolean"
                },
                "include_field_histogram": {
                    "title": "Include Field Histogram",
                    "description": "Whether to profile for the histogram for numeric fields.",
                    "default": false,
                    "type": "boolean"
                },
                "include_field_sample_values": {
                    "title": "Include Field Sample Values",
                    "description": "Whether to profile for the sample values for all columns.",
                    "default": true,
                    "type": "boolean"
                },
                "max_workers": {
                    "title": "Max Workers",
                    "description": "Number of worker threads to use for profiling. Set to 1 to disable.",
                    "default": 20,
                    "type": "integer"
                }
            },
            "additionalProperties": false
        },
        "SortKeyType": {
            "title": "SortKeyType",
            "description": "An enumeration.",
            "enum": [
                "STRING",
                "INTEGER",
                "FLOAT",
                "DATETIME",
                "DATE"
            ]
        },
        "SortKey": {
            "title": "SortKey",
            "type": "object",
            "properties": {
                "key": {
                    "title": "Key",
                    "description": "The key to sort on. This can be a compound key based on the path_spec variables.",
                    "type": "string"
                },
                "type": {
                    "description": "The date format to use when sorting. This is used to parse the date from the key. The format should follow the java [SimpleDateFormat](https://docs.oracle.com/javase/8/docs/api/java/text/SimpleDateFormat.html) format.",
                    "default": "STRING",
                    "allOf": [
                        {
                            "$ref": "#/definitions/SortKeyType"
                        }
                    ]
                },
                "date_format": {
                    "title": "Date Format",
                    "description": "The date format to use when sorting. This is used to parse the date from the key. The format should follow the java [SimpleDateFormat](https://docs.oracle.com/javase/8/docs/api/java/text/SimpleDateFormat.html) format.",
                    "type": "string"
                }
            },
            "required": [
                "key"
            ],
            "additionalProperties": false
        },
        "FolderTraversalMethod": {
            "title": "FolderTraversalMethod",
            "description": "An enumeration.",
            "enum": [
                "ALL",
                "MIN_MAX",
                "MAX"
            ]
        },
        "PathSpec": {
            "title": "PathSpec",
            "type": "object",
            "properties": {
                "include": {
                    "title": "Include",
                    "description": "Path to table. Name variable `{table}` is used to mark the folder with dataset. In absence of `{table}`, file level dataset will be created. Check below examples for more details.",
                    "type": "string"
                },
                "exclude": {
                    "title": "Exclude",
                    "description": "list of paths in glob pattern which will be excluded while scanning for the datasets",
                    "default": [],
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "file_types": {
                    "title": "File Types",
                    "description": "Files with extenstions specified here (subset of default value) only will be scanned to create dataset. Other files will be omitted.",
                    "default": [
                        "csv",
                        "tsv",
                        "json",
                        "parquet",
                        "avro"
                    ],
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "default_extension": {
                    "title": "Default Extension",
                    "description": "For files without extension it will assume the specified file type. If it is not set the files without extensions will be skipped.",
                    "type": "string"
                },
                "table_name": {
                    "title": "Table Name",
                    "description": "Display name of the dataset.Combination of named variables from include path and strings",
                    "type": "string"
                },
                "enable_compression": {
                    "title": "Enable Compression",
                    "description": "Enable or disable processing compressed files. Currently .gz and .bz files are supported.",
                    "default": true,
                    "type": "boolean"
                },
                "sample_files": {
                    "title": "Sample Files",
                    "description": "Not listing all the files but only taking a handful amount of sample file to infer the schema. File count and file size calculation will be disabled. This can affect performance significantly if enabled",
                    "default": true,
                    "type": "boolean"
                },
                "allow_double_stars": {
                    "title": "Allow Double Stars",
                    "description": "Allow double stars in the include path. This can affect performance significantly if enabled",
                    "default": false,
                    "type": "boolean"
                },
                "autodetect_partitions": {
                    "title": "Autodetect Partitions",
                    "description": "Autodetect partition(s) from the path. If set to true, it will autodetect partition key/value if the folder format is {partition_key}={partition_value} for example `year=2024`",
                    "default": true,
                    "type": "boolean"
                },
                "traversal_method": {
                    "description": "Method to traverse the folder. ALL: Traverse all the folders, MIN_MAX: Traverse the folders by finding min and max value, MAX: Traverse the folder with max value",
                    "default": "MAX",
                    "allOf": [
                        {
                            "$ref": "#/definitions/FolderTraversalMethod"
                        }
                    ]
                },
                "include_hidden_folders": {
                    "title": "Include Hidden Folders",
                    "description": "Include hidden folders in the traversal (folders starting with . or _",
                    "default": false,
                    "type": "boolean"
                }
            },
            "required": [
                "include"
            ],
            "additionalProperties": false
        },
        "HMACKey": {
            "title": "HMACKey",
            "type": "object",
            "properties": {
                "hmac_access_id": {
                    "title": "Hmac Access Id",
                    "description": "Access ID",
                    "type": "string"
                },
                "hmac_access_secret": {
                    "title": "Hmac Access Secret",
                    "description": "Secret",
                    "type": "string",
                    "writeOnly": true,
                    "format": "password"
                }
            },
            "required": [
                "hmac_access_id",
                "hmac_access_secret"
            ],
            "additionalProperties": false
        },
        "HiveMetastoreConfigMode": {
            "title": "HiveMetastoreConfigMode",
            "description": "An enumeration.",
            "enum": [
                "hive",
                "presto",
                "presto-on-hive",
                "trino"
            ],
            "type": "string"
        },
        "DataProcessCleanupConfig": {
            "title": "DataProcessCleanupConfig",
            "type": "object",
            "properties": {
                "enabled": {
                    "title": "Enabled",
                    "description": "Whether to do data process cleanup.",
                    "default": true,
                    "type": "boolean"
                },
                "retention_days": {
                    "title": "Retention Days",
                    "description": "Number of days to retain metadata in DataHub",
                    "default": 10,
                    "type": "integer"
                },
                "aspects_to_clean": {
                    "title": "Aspects To Clean",
                    "description": "List of aspect names to clean up",
                    "default": [
                        "DataprocessInstance"
                    ],
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "keep_last_n": {
                    "title": "Keep Last N",
                    "description": "Number of latest aspects to keep",
                    "default": 5,
                    "type": "integer"
                },
                "delete_empty_data_jobs": {
                    "title": "Delete Empty Data Jobs",
                    "description": "Whether to delete Data Jobs without runs",
                    "default": false,
                    "type": "boolean"
                },
                "delete_empty_data_flows": {
                    "title": "Delete Empty Data Flows",
                    "description": "Whether to delete Data Flows without runs",
                    "default": false,
                    "type": "boolean"
                },
                "hard_delete_entities": {
                    "title": "Hard Delete Entities",
                    "description": "Whether to hard delete entities",
                    "default": false,
                    "type": "boolean"
                },
                "batch_size": {
                    "title": "Batch Size",
                    "description": "The number of entities to get in a batch from API",
                    "default": 500,
                    "type": "integer"
                },
                "max_workers": {
                    "title": "Max Workers",
                    "description": "The number of workers to use for deletion",
                    "default": 10,
                    "type": "integer"
                },
                "delay": {
                    "title": "Delay",
                    "description": "Delay between each batch",
                    "default": 0.25,
                    "type": "number"
                }
            },
            "additionalProperties": false
        },
        "SoftDeletedEntitiesCleanupConfig": {
            "title": "SoftDeletedEntitiesCleanupConfig",
            "type": "object",
            "properties": {
                "enabled": {
                    "title": "Enabled",
                    "description": "Whether to do soft deletion cleanup.",
                    "default": true,
                    "type": "boolean"
                },
                "retention_days": {
                    "title": "Retention Days",
                    "description": "Number of days to retain metadata in DataHub",
                    "default": 10,
                    "type": "integer"
                },
                "batch_size": {
                    "title": "Batch Size",
                    "description": "The number of entities to get in a batch from GraphQL",
                    "default": 500,
                    "type": "integer"
                },
                "delay": {
                    "title": "Delay",
                    "description": "Delay between each batch",
                    "default": 0.25,
                    "type": "number"
                },
                "max_workers": {
                    "title": "Max Workers",
                    "description": "The number of workers to use for deletion",
                    "default": 10,
                    "type": "integer"
                },
                "entity_types": {
                    "title": "Entity Types",
                    "description": "List of entity types to cleanup",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "platform": {
                    "title": "Platform",
                    "description": "Platform to cleanup",
                    "type": "string"
                },
                "env": {
                    "title": "Env",
                    "description": "Environment to cleanup",
                    "type": "string"
                },
                "query": {
                    "title": "Query",
                    "description": "Query to filter entities",
                    "type": "string"
                },
                "limit_entities_delete": {
                    "title": "Limit Entities Delete",
                    "description": "Max number of entities to delete.",
                    "default": 25000,
                    "type": "integer"
                },
                "runtime_limit_seconds": {
                    "title": "Runtime Limit Seconds",
                    "description": "Runtime limit in seconds",
                    "type": "integer"
                }
            },
            "additionalProperties": false
        },
        "DatahubExecutionRequestCleanupConfig": {
            "title": "DatahubExecutionRequestCleanupConfig",
            "type": "object",
            "properties": {
                "keep_history_min_count": {
                    "title": "Keep History Min Count",
                    "description": "Minimum number of execution requests to keep, per ingestion source",
                    "default": 10,
                    "type": "integer"
                },
                "keep_history_max_count": {
                    "title": "Keep History Max Count",
                    "description": "Maximum number of execution requests to keep, per ingestion source",
                    "default": 1000,
                    "type": "integer"
                },
                "keep_history_max_days": {
                    "title": "Keep History Max Days",
                    "description": "Maximum number of days to keep execution requests for, per ingestion source",
                    "default": 30,
                    "type": "integer"
                },
                "batch_read_size": {
                    "title": "Batch Read Size",
                    "description": "Number of records per read operation",
                    "default": 100,
                    "type": "integer"
                },
                "enabled": {
                    "title": "Enabled",
                    "description": "Global switch for this cleanup task",
                    "default": true,
                    "type": "boolean"
                }
            },
            "additionalProperties": false
        },
        "BaseUsageConfig": {
            "title": "BaseUsageConfig",
            "type": "object",
            "properties": {
                "bucket_duration": {
                    "description": "Size of the time window to aggregate usage stats.",
                    "default": "DAY",
                    "allOf": [
                        {
                            "$ref": "#/definitions/BucketDuration"
                        }
                    ]
                },
                "end_time": {
                    "title": "End Time",
                    "description": "Latest date of lineage/usage to consider. Default: Current time in UTC",
                    "type": "string",
                    "format": "date-time"
                },
                "start_time": {
                    "title": "Start Time",
                    "description": "Earliest date of lineage/usage to consider. Default: Last full day in UTC (or hour, depending on `bucket_duration`). You can also specify relative time with respect to end_time such as '-7 days' Or '-7d'.",
                    "type": "string",
                    "format": "date-time"
                },
                "top_n_queries": {
                    "title": "Top N Queries",
                    "description": "Number of top queries to save to each table.",
                    "default": 10,
                    "exclusiveMinimum": 0,
                    "type": "integer"
                },
                "user_email_pattern": {
                    "title": "User Email Pattern",
                    "description": "regex patterns for user emails to filter in usage.",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "allOf": [
                        {
                            "$ref": "#/definitions/AllowDenyPattern"
                        }
                    ]
                },
                "include_operational_stats": {
                    "title": "Include Operational Stats",
                    "description": "Whether to display operational stats.",
                    "default": true,
                    "type": "boolean"
                },
                "include_read_operational_stats": {
                    "title": "Include Read Operational Stats",
                    "description": "Whether to report read operational stats. Experimental.",
                    "default": false,
                    "type": "boolean"
                },
                "format_sql_queries": {
                    "title": "Format Sql Queries",
                    "description": "Whether to format sql queries",
                    "default": false,
                    "type": "boolean"
                },
                "include_top_n_queries": {
                    "title": "Include Top N Queries",
                    "description": "Whether to ingest the top_n_queries.",
                    "default": true,
                    "type": "boolean"
                }
            },
            "additionalProperties": false
        },
        "AzureConnectionConfig": {
            "title": "AzureConnectionConfig",
            "description": "Common Azure credentials config.\n\nhttps://docs.microsoft.com/en-us/azure/storage/blobs/data-lake-storage-directory-file-acl-python",
            "type": "object",
            "properties": {
                "base_path": {
                    "title": "Base Path",
                    "description": "Base folder in hierarchical namespaces to start from.",
                    "default": "/",
                    "type": "string"
                },
                "container_name": {
                    "title": "Container Name",
                    "description": "Azure storage account container name.",
                    "type": "string"
                },
                "account_name": {
                    "title": "Account Name",
                    "description": "Name of the Azure storage account.  See [Microsoft official documentation on how to create a storage account.](https://docs.microsoft.com/en-us/azure/storage/blobs/create-data-lake-storage-account)",
                    "type": "string"
                },
                "account_key": {
                    "title": "Account Key",
                    "description": "Azure storage account access key that can be used as a credential. **An account key, a SAS token or a client secret is required for authentication.**",
                    "type": "string"
                },
                "sas_token": {
                    "title": "Sas Token",
                    "description": "Azure storage account Shared Access Signature (SAS) token that can be used as a credential. **An account key, a SAS token or a client secret is required for authentication.**",
                    "type": "string"
                },
                "client_secret": {
                    "title": "Client Secret",
                    "description": "Azure client secret that can be used as a credential. **An account key, a SAS token or a client secret is required for authentication.**",
                    "type": "string"
                },
                "client_id": {
                    "title": "Client Id",
                    "description": "Azure client (Application) ID required when a `client_secret` is used as a credential.",
                    "type": "string"
                },
                "tenant_id": {
                    "title": "Tenant Id",
                    "description": "Azure tenant (Directory) ID required when a `client_secret` is used as a credential.",
                    "type": "string"
                }
            },
            "required": [
                "container_name",
                "account_name"
            ],
            "additionalProperties": false
        },
        "DataLakeProfilerConfig": {
            "title": "DataLakeProfilerConfig",
            "type": "object",
            "properties": {
                "enabled": {
                    "title": "Enabled",
                    "description": "Whether profiling should be done.",
                    "default": false,
                    "type": "boolean"
                },
                "operation_config": {
                    "title": "Operation Config",
                    "description": "Experimental feature. To specify operation configs.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/OperationConfig"
                        }
                    ]
                },
                "profile_table_level_only": {
                    "title": "Profile Table Level Only",
                    "description": "Whether to perform profiling at table-level only or include column-level profiling as well.",
                    "default": false,
                    "type": "boolean"
                },
                "max_number_of_fields_to_profile": {
                    "title": "Max Number Of Fields To Profile",
                    "description": "A positive integer that specifies the maximum number of columns to profile for any table. `None` implies all columns. The cost of profiling goes up significantly as the number of columns to profile goes up.",
                    "exclusiveMinimum": 0,
                    "type": "integer"
                },
                "include_field_null_count": {
                    "title": "Include Field Null Count",
                    "description": "Whether to profile for the number of nulls for each column.",
                    "default": true,
                    "type": "boolean"
                },
                "include_field_min_value": {
                    "title": "Include Field Min Value",
                    "description": "Whether to profile for the min value of numeric columns.",
                    "default": true,
                    "type": "boolean"
                },
                "include_field_max_value": {
                    "title": "Include Field Max Value",
                    "description": "Whether to profile for the max value of numeric columns.",
                    "default": true,
                    "type": "boolean"
                },
                "include_field_mean_value": {
                    "title": "Include Field Mean Value",
                    "description": "Whether to profile for the mean value of numeric columns.",
                    "default": true,
                    "type": "boolean"
                },
                "include_field_median_value": {
                    "title": "Include Field Median Value",
                    "description": "Whether to profile for the median value of numeric columns.",
                    "default": true,
                    "type": "boolean"
                },
                "include_field_stddev_value": {
                    "title": "Include Field Stddev Value",
                    "description": "Whether to profile for the standard deviation of numeric columns.",
                    "default": true,
                    "type": "boolean"
                },
                "include_field_quantiles": {
                    "title": "Include Field Quantiles",
                    "description": "Whether to profile for the quantiles of numeric columns.",
                    "default": true,
                    "type": "boolean"
                },
                "include_field_distinct_value_frequencies": {
                    "title": "Include Field Distinct Value Frequencies",
                    "description": "Whether to profile for distinct value frequencies.",
                    "default": true,
                    "type": "boolean"
                },
                "include_field_histogram": {
                    "title": "Include Field Histogram",
                    "description": "Whether to profile for the histogram for numeric fields.",
                    "default": true,
                    "type": "boolean"
                },
                "include_field_sample_values": {
                    "title": "Include Field Sample Values",
                    "description": "Whether to profile for the sample values for all columns.",
                    "default": true,
                    "type": "boolean"
                }
            },
            "additionalProperties": false
        },
        "ElasticProfiling": {
            "title": "ElasticProfiling",
            "type": "object",
            "properties": {
                "enabled": {
                    "title": "Enabled",
                    "description": "Whether to enable profiling for the elastic search source.",
                    "default": false,
                    "type": "boolean"
                },
                "operation_config": {
                    "title": "Operation Config",
                    "description": "Experimental feature. To specify operation configs.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/OperationConfig"
                        }
                    ]
                }
            },
            "additionalProperties": false
        },
        "CollapseUrns": {
            "title": "CollapseUrns",
            "type": "object",
            "properties": {
                "urns_suffix_regex": {
                    "title": "Urns Suffix Regex",
                    "description": "List of regex patterns to remove from the name of the URN. All of the indices before removal of URNs are considered as the same dataset. These are applied in order for each URN.\n        The main case where you would want to have multiple of these if the name where you are trying to remove suffix from have different formats.\n        e.g. ending with -YYYY-MM-DD as well as ending -epochtime would require you to have 2 regex patterns to remove the suffixes across all URNs.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "additionalProperties": false
        },
        "ConnectorDetail": {
            "title": "ConnectorDetail",
            "description": "Any source that connects to a platform should inherit this class",
            "type": "object",
            "properties": {
                "env": {
                    "title": "Env",
                    "description": "The environment that all assets produced by this connector belong to",
                    "default": "PROD",
                    "type": "string"
                },
                "platform_instance": {
                    "title": "Platform Instance",
                    "description": "The instance of the platform that all assets produced by this recipe belong to. This should be unique within the platform. See https://datahubproject.io/docs/platform-instances/ for more details.",
                    "type": "string"
                },
                "connector_database": {
                    "title": "Connector Database",
                    "type": "string"
                },
                "connector_platform": {
                    "title": "Connector Platform",
                    "description": "A connector's actual platform name. If not provided, will take from metadata tablesEg: hive catalog can have a connector platform as 'hive' or 'glue' or some other metastore.",
                    "type": "string"
                }
            },
            "additionalProperties": false
        },
        "StatefulIngestionConfig": {
            "title": "StatefulIngestionConfig",
            "description": "Basic Stateful Ingestion Specific Configuration for any source.",
            "type": "object",
            "properties": {
                "enabled": {
                    "title": "Enabled",
                    "description": "Whether or not to enable stateful ingest. Default: True if a pipeline_name is set and either a datahub-rest sink or `datahub_api` is specified, otherwise False",
                    "default": false,
                    "type": "boolean"
                }
            },
            "additionalProperties": false
        },
        "IcebergProfilingConfig": {
            "title": "IcebergProfilingConfig",
            "type": "object",
            "properties": {
                "enabled": {
                    "title": "Enabled",
                    "description": "Whether profiling should be done.",
                    "default": false,
                    "type": "boolean"
                },
                "include_field_null_count": {
                    "title": "Include Field Null Count",
                    "description": "Whether to profile for the number of nulls for each column.",
                    "default": true,
                    "type": "boolean"
                },
                "include_field_min_value": {
                    "title": "Include Field Min Value",
                    "description": "Whether to profile for the min value of numeric columns.",
                    "default": true,
                    "type": "boolean"
                },
                "include_field_max_value": {
                    "title": "Include Field Max Value",
                    "description": "Whether to profile for the max value of numeric columns.",
                    "default": true,
                    "type": "boolean"
                },
                "operation_config": {
                    "title": "Operation Config",
                    "description": "Experimental feature. To specify operation configs.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/OperationConfig"
                        }
                    ]
                }
            },
            "additionalProperties": false
        },
        "OAuthIdentityProvider": {
            "title": "OAuthIdentityProvider",
            "description": "An enumeration.",
            "enum": [
                "microsoft",
                "okta"
            ]
        },
        "OAuthConfiguration": {
            "title": "OAuthConfiguration",
            "type": "object",
            "properties": {
                "provider": {
                    "description": "Identity provider for oauth.Supported providers are microsoft and okta.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/OAuthIdentityProvider"
                        }
                    ]
                },
                "authority_url": {
                    "title": "Authority Url",
                    "description": "Authority url of your identity provider",
                    "type": "string"
                },
                "client_id": {
                    "title": "Client Id",
                    "description": "client id of your registered application",
                    "type": "string"
                },
                "scopes": {
                    "title": "Scopes",
                    "description": "scopes required to connect to snowflake",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "use_certificate": {
                    "title": "Use Certificate",
                    "description": "Do you want to use certificate and private key to authenticate using oauth",
                    "default": false,
                    "type": "boolean"
                },
                "client_secret": {
                    "title": "Client Secret",
                    "description": "client secret of the application if use_certificate = false",
                    "type": "string",
                    "writeOnly": true,
                    "format": "password"
                },
                "encoded_oauth_public_key": {
                    "title": "Encoded Oauth Public Key",
                    "description": "base64 encoded certificate content if use_certificate = true",
                    "type": "string"
                },
                "encoded_oauth_private_key": {
                    "title": "Encoded Oauth Private Key",
                    "description": "base64 encoded private key content if use_certificate = true",
                    "type": "string"
                }
            },
            "required": [
                "provider",
                "authority_url",
                "client_id",
                "scopes"
            ],
            "additionalProperties": false
        },
        "TagOption": {
            "title": "TagOption",
            "description": "An enumeration.",
            "enum": [
                "with_lineage",
                "without_lineage",
                "skip"
            ],
            "type": "string"
        },
        "DatabaseId": {
            "title": "DatabaseId",
            "type": "object",
            "properties": {
                "database": {
                    "title": "Database",
                    "description": "Database created from share in consumer account.",
                    "type": "string"
                },
                "platform_instance": {
                    "title": "Platform Instance",
                    "description": "Platform instance of consumer snowflake account.",
                    "type": "string"
                }
            },
            "required": [
                "database"
            ],
            "additionalProperties": false
        },
        "SnowflakeShareConfig": {
            "title": "SnowflakeShareConfig",
            "type": "object",
            "properties": {
                "database": {
                    "title": "Database",
                    "description": "Database from which share is created.",
                    "type": "string"
                },
                "platform_instance": {
                    "title": "Platform Instance",
                    "description": "Platform instance for snowflake account in which share is created.",
                    "type": "string"
                },
                "consumers": {
                    "title": "Consumers",
                    "description": "List of databases created in consumer accounts.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/DatabaseId"
                    },
                    "uniqueItems": true
                }
            },
            "required": [
                "database",
                "consumers"
            ],
            "additionalProperties": false
        },
        "AwsAssumeRoleConfig": {
            "title": "AwsAssumeRoleConfig",
            "type": "object",
            "properties": {
                "RoleArn": {
                    "title": "Rolearn",
                    "description": "ARN of the role to assume.",
                    "type": "string"
                },
                "ExternalId": {
                    "title": "Externalid",
                    "description": "External ID to use when assuming the role.",
                    "type": "string"
                }
            },
            "required": [
                "RoleArn"
            ]
        },
        "SQLAlchemyConnectionConfig": {
            "title": "SQLAlchemyConnectionConfig",
            "type": "object",
            "properties": {
                "username": {
                    "title": "Username",
                    "description": "username",
                    "type": "string"
                },
                "password": {
                    "title": "Password",
                    "description": "password",
                    "type": "string",
                    "writeOnly": true,
                    "format": "password"
                },
                "host_port": {
                    "title": "Host Port",
                    "description": "host URL",
                    "type": "string"
                },
                "database": {
                    "title": "Database",
                    "description": "database (catalog)",
                    "type": "string"
                },
                "scheme": {
                    "title": "Scheme",
                    "description": "scheme",
                    "type": "string"
                },
                "sqlalchemy_uri": {
                    "title": "Sqlalchemy Uri",
                    "description": "URI of database to connect to. See https://docs.sqlalchemy.org/en/14/core/engines.html#database-urls. Takes precedence over other connection parameters.",
                    "type": "string"
                },
                "options": {
                    "title": "Options",
                    "description": "Any options specified here will be passed to [SQLAlchemy.create_engine](https://docs.sqlalchemy.org/en/14/core/engines.html#sqlalchemy.create_engine) as kwargs. To set connection arguments in the URL, specify them under `connect_args`.",
                    "type": "object"
                }
            },
            "required": [
                "host_port",
                "scheme"
            ],
            "additionalProperties": false
        },
        "KafkaConsumerConnectionConfig": {
            "title": "KafkaConsumerConnectionConfig",
            "description": "Configuration class for holding connectivity information for Kafka consumers",
            "type": "object",
            "properties": {
                "bootstrap": {
                    "title": "Bootstrap",
                    "default": "localhost:9092",
                    "type": "string"
                },
                "schema_registry_url": {
                    "title": "Schema Registry Url",
                    "default": "http://localhost:8080/schema-registry/api/",
                    "type": "string"
                },
                "schema_registry_config": {
                    "title": "Schema Registry Config",
                    "description": "Extra schema registry config serialized as JSON. These options will be passed into Kafka's SchemaRegistryClient. https://docs.confluent.io/platform/current/clients/confluent-kafka-python/html/index.html?#schemaregistryclient",
                    "type": "object"
                },
                "client_timeout_seconds": {
                    "title": "Client Timeout Seconds",
                    "description": "The request timeout used when interacting with the Kafka APIs.",
                    "default": 60,
                    "type": "integer"
                },
                "consumer_config": {
                    "title": "Consumer Config",
                    "description": "Extra consumer config serialized as JSON. These options will be passed into Kafka's DeserializingConsumer. See https://docs.confluent.io/platform/current/clients/confluent-kafka-python/html/index.html#deserializingconsumer and https://github.com/edenhill/librdkafka/blob/master/CONFIGURATION.md .",
                    "type": "object"
                }
            },
            "additionalProperties": false
        },
        "ProvidedConfig": {
            "title": "ProvidedConfig",
            "type": "object",
            "properties": {
                "provider": {
                    "title": "Provider",
                    "type": "string"
                },
                "path_key": {
                    "title": "Path Key",
                    "type": "string"
                },
                "value": {
                    "title": "Value",
                    "type": "string"
                }
            },
            "required": [
                "provider",
                "path_key",
                "value"
            ],
            "additionalProperties": false
        },
        "GenericConnectorConfig": {
            "title": "GenericConnectorConfig",
            "type": "object",
            "properties": {
                "connector_name": {
                    "title": "Connector Name",
                    "type": "string"
                },
                "source_dataset": {
                    "title": "Source Dataset",
                    "type": "string"
                },
                "source_platform": {
                    "title": "Source Platform",
                    "type": "string"
                }
            },
            "required": [
                "connector_name",
                "source_dataset",
                "source_platform"
            ],
            "additionalProperties": false
        },
        "TableauLineageOverrides": {
            "title": "TableauLineageOverrides",
            "type": "object",
            "properties": {
                "platform_override_map": {
                    "title": "Platform Override Map",
                    "description": "A holder for platform -> platform mappings to generate correct dataset urns",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "database_override_map": {
                    "title": "Database Override Map",
                    "description": "A holder for database -> database mappings to generate correct dataset urns",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                }
            },
            "additionalProperties": false
        },
        "PermissionIngestionConfig": {
            "title": "PermissionIngestionConfig",
            "type": "object",
            "properties": {
                "enable_workbooks": {
                    "title": "Enable Workbooks",
                    "description": "Whether or not to enable group permission ingestion for workbooks. Default: True",
                    "default": true,
                    "type": "boolean"
                },
                "group_name_pattern": {
                    "title": "Group Name Pattern",
                    "description": "Filter for Tableau group names when ingesting group permissions. For example, you could filter for groups that include the term 'Consumer' in their name by adding '^.*Consumer$' to the allow list.By default, all groups will be ingested. You can both allow and deny groups based on their name using their name, or a Regex pattern. Deny patterns always take precedence over allow patterns. ",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "allOf": [
                        {
                            "$ref": "#/definitions/AllowDenyPattern"
                        }
                    ]
                }
            },
            "additionalProperties": false
        },
        "UnityCatalogGEProfilerConfig": {
            "title": "UnityCatalogGEProfilerConfig",
            "type": "object",
            "properties": {
                "enabled": {
                    "title": "Enabled",
                    "description": "Whether profiling should be done.",
                    "default": false,
                    "type": "boolean"
                },
                "operation_config": {
                    "title": "Operation Config",
                    "description": "Experimental feature. To specify operation configs.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/OperationConfig"
                        }
                    ]
                },
                "limit": {
                    "title": "Limit",
                    "description": "Max number of documents to profile. By default, profiles all documents.",
                    "type": "integer"
                },
                "offset": {
                    "title": "Offset",
                    "description": "Offset in documents to profile. By default, uses no offset.",
                    "type": "integer"
                },
                "profile_table_level_only": {
                    "title": "Profile Table Level Only",
                    "description": "Whether to perform profiling at table-level only, or include column-level profiling as well.",
                    "default": false,
                    "type": "boolean"
                },
                "include_field_null_count": {
                    "title": "Include Field Null Count",
                    "description": "Whether to profile for the number of nulls for each column.",
                    "default": true,
                    "type": "boolean"
                },
                "include_field_distinct_count": {
                    "title": "Include Field Distinct Count",
                    "description": "Whether to profile for the number of distinct values for each column.",
                    "default": true,
                    "type": "boolean"
                },
                "include_field_min_value": {
                    "title": "Include Field Min Value",
                    "description": "Whether to profile for the min value of numeric columns.",
                    "default": true,
                    "type": "boolean"
                },
                "include_field_max_value": {
                    "title": "Include Field Max Value",
                    "description": "Whether to profile for the max value of numeric columns.",
                    "default": true,
                    "type": "boolean"
                },
                "include_field_mean_value": {
                    "title": "Include Field Mean Value",
                    "description": "Whether to profile for the mean value of numeric columns.",
                    "default": true,
                    "type": "boolean"
                },
                "include_field_median_value": {
                    "title": "Include Field Median Value",
                    "description": "Whether to profile for the median value of numeric columns.",
                    "default": true,
                    "type": "boolean"
                },
                "include_field_stddev_value": {
                    "title": "Include Field Stddev Value",
                    "description": "Whether to profile for the standard deviation of numeric columns.",
                    "default": true,
                    "type": "boolean"
                },
                "include_field_quantiles": {
                    "title": "Include Field Quantiles",
                    "description": "Whether to profile for the quantiles of numeric columns.",
                    "default": false,
                    "type": "boolean"
                },
                "include_field_distinct_value_frequencies": {
                    "title": "Include Field Distinct Value Frequencies",
                    "description": "Whether to profile for distinct value frequencies.",
                    "default": false,
                    "type": "boolean"
                },
                "include_field_histogram": {
                    "title": "Include Field Histogram",
                    "description": "Whether to profile for the histogram for numeric fields.",
                    "default": false,
                    "type": "boolean"
                },
                "include_field_sample_values": {
                    "title": "Include Field Sample Values",
                    "description": "Whether to profile for the sample values for all columns.",
                    "default": true,
                    "type": "boolean"
                },
                "max_workers": {
                    "title": "Max Workers",
                    "description": "Number of worker threads to use for profiling. Set to 1 to disable.",
                    "default": 20,
                    "type": "integer"
                },
                "report_dropped_profiles": {
                    "title": "Report Dropped Profiles",
                    "description": "Whether to report datasets or dataset columns which were not profiled. Set to `True` for debugging purposes.",
                    "default": false,
                    "type": "boolean"
                },
                "turn_off_expensive_profiling_metrics": {
                    "title": "Turn Off Expensive Profiling Metrics",
                    "description": "Whether to turn off expensive profiling or not. This turns off profiling for quantiles, distinct_value_frequencies, histogram & sample_values. This also limits maximum number of fields being profiled to 10.",
                    "default": false,
                    "type": "boolean"
                },
                "field_sample_values_limit": {
                    "title": "Field Sample Values Limit",
                    "description": "Upper limit for number of sample values to collect for all columns.",
                    "default": 20,
                    "type": "integer"
                },
                "max_number_of_fields_to_profile": {
                    "title": "Max Number Of Fields To Profile",
                    "description": "A positive integer that specifies the maximum number of columns to profile for any table. `None` implies all columns. The cost of profiling goes up significantly as the number of columns to profile goes up.",
                    "exclusiveMinimum": 0,
                    "type": "integer"
                },
                "profile_if_updated_since_days": {
                    "title": "Profile If Updated Since Days",
                    "description": "Profile table only if it has been updated since these many number of days. If set to `null`, no constraint of last modified time for tables to profile. Supported only in `snowflake` and `BigQuery`.",
                    "exclusiveMinimum": 0,
                    "type": "number"
                },
                "profile_table_size_limit": {
                    "title": "Profile Table Size Limit",
                    "description": "Profile tables only if their size is less than specified GBs. If set to `null`, no limit on the size of tables to profile. Supported only in `snowflake` and `BigQuery`Supported for `oracle` based on calculated size from gathered stats.",
                    "default": 5,
                    "type": "integer"
                },
                "profile_table_row_limit": {
                    "title": "Profile Table Row Limit",
                    "description": "Profile tables only if their row count is less than specified count. If set to `null`, no limit on the row count of tables to profile. Supported only in `snowflake` and `BigQuery`Supported for `oracle` based on gathered stats.",
                    "default": 5000000,
                    "type": "integer"
                },
                "profile_table_row_count_estimate_only": {
                    "title": "Profile Table Row Count Estimate Only",
                    "description": "Use an approximate query for row count. This will be much faster but slightly less accurate. Only supported for Postgres and MySQL. ",
                    "default": false,
                    "type": "boolean"
                },
                "query_combiner_enabled": {
                    "title": "Query Combiner Enabled",
                    "description": "*This feature is still experimental and can be disabled if it causes issues.* Reduces the total number of queries issued and speeds up profiling by dynamically combining SQL queries where possible.",
                    "default": true,
                    "type": "boolean"
                },
                "catch_exceptions": {
                    "title": "Catch Exceptions",
                    "default": true,
                    "type": "boolean"
                },
                "partition_profiling_enabled": {
                    "title": "Partition Profiling Enabled",
                    "description": "Whether to profile partitioned tables. Only BigQuery and Aws Athena supports this. If enabled, latest partition data is used for profiling.",
                    "default": true,
                    "type": "boolean"
                },
                "partition_datetime": {
                    "title": "Partition Datetime",
                    "description": "If specified, profile only the partition which matches this datetime. If not specified, profile the latest partition. Only Bigquery supports this.",
                    "type": "string",
                    "format": "date-time"
                },
                "use_sampling": {
                    "title": "Use Sampling",
                    "description": "Whether to profile column level stats on sample of table. Only BigQuery and Snowflake support this. If enabled, profiling is done on rows sampled from table. Sampling is not done for smaller tables. ",
                    "default": true,
                    "type": "boolean"
                },
                "sample_size": {
                    "title": "Sample Size",
                    "description": "Number of rows to be sampled from table for column level profiling.Applicable only if `use_sampling` is set to True.",
                    "default": 10000,
                    "type": "integer"
                },
                "profile_external_tables": {
                    "title": "Profile External Tables",
                    "description": "Whether to profile external tables. Only Snowflake and Redshift supports this.",
                    "default": false,
                    "type": "boolean"
                },
                "tags_to_ignore_sampling": {
                    "title": "Tags To Ignore Sampling",
                    "description": "Fixed list of tags to ignore sampling. If not specified, tables will be sampled based on `use_sampling`.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "profile_nested_fields": {
                    "title": "Profile Nested Fields",
                    "description": "Whether to profile complex types like structs, arrays and maps. ",
                    "default": false,
                    "type": "boolean"
                },
                "method": {
                    "title": "Method",
                    "default": "ge",
                    "enum": [
                        "ge"
                    ],
                    "type": "string"
                },
                "warehouse_id": {
                    "title": "Warehouse Id",
                    "description": "SQL Warehouse id, for running profiling queries.",
                    "type": "string"
                },
                "pattern": {
                    "title": "Pattern",
                    "description": "Regex patterns to filter tables for profiling during ingestion. Specify regex to match the `catalog.schema.table` format. Note that only tables allowed by the `table_pattern` will be considered.",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "allOf": [
                        {
                            "$ref": "#/definitions/AllowDenyPattern"
                        }
                    ]
                },
                "max_wait_secs": {
                    "title": "Max Wait Secs",
                    "description": "Maximum time to wait for a table to be profiled.",
                    "type": "integer"
                }
            },
            "additionalProperties": false
        },
        "UnityCatalogAnalyzeProfilerConfig": {
            "title": "UnityCatalogAnalyzeProfilerConfig",
            "type": "object",
            "properties": {
                "method": {
                    "title": "Method",
                    "default": "analyze",
                    "enum": [
                        "analyze"
                    ],
                    "type": "string"
                },
                "warehouse_id": {
                    "title": "Warehouse Id",
                    "description": "SQL Warehouse id, for running profiling queries.",
                    "type": "string"
                },
                "pattern": {
                    "title": "Pattern",
                    "description": "Regex patterns to filter tables for profiling during ingestion. Specify regex to match the `catalog.schema.table` format. Note that only tables allowed by the `table_pattern` will be considered.",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "allOf": [
                        {
                            "$ref": "#/definitions/AllowDenyPattern"
                        }
                    ]
                },
                "enabled": {
                    "title": "Enabled",
                    "description": "Whether profiling should be done.",
                    "default": false,
                    "type": "boolean"
                },
                "operation_config": {
                    "title": "Operation Config",
                    "description": "Experimental feature. To specify operation configs.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/OperationConfig"
                        }
                    ]
                },
                "profile_table_level_only": {
                    "title": "Profile Table Level Only",
                    "description": "Whether to perform profiling at table-level only or include column-level profiling as well.",
                    "default": false,
                    "type": "boolean"
                },
                "call_analyze": {
                    "title": "Call Analyze",
                    "description": "Whether to call ANALYZE TABLE as part of profile ingestion.If false, will ingest the results of the most recent ANALYZE TABLE call, if any.",
                    "default": true,
                    "type": "boolean"
                },
                "max_wait_secs": {
                    "title": "Max Wait Secs",
                    "description": "Maximum time to wait for an ANALYZE TABLE query to complete.",
                    "default": 3600,
                    "type": "integer"
                },
                "max_workers": {
                    "title": "Max Workers",
                    "description": "Number of worker threads to use for profiling. Set to 1 to disable.",
                    "default": 20,
                    "type": "integer"
                }
            },
            "additionalProperties": false
        },
        "DeltaLakeDetails": {
            "title": "DeltaLakeDetails",
            "type": "object",
            "properties": {
                "platform_instance_name": {
                    "title": "Platform Instance Name",
                    "description": "Delta-lake paltform instance name",
                    "type": "string"
                },
                "env": {
                    "title": "Env",
                    "description": "Delta-lake environment",
                    "default": "PROD",
                    "type": "string"
                }
            },
            "additionalProperties": false
        },
        "AwsConnectionConfig": {
            "title": "AwsConnectionConfig",
            "description": "Common AWS credentials config.\n\nCurrently used by:\n    - Glue source\n    - SageMaker source\n    - dbt source",
            "type": "object",
            "properties": {
                "aws_access_key_id": {
                    "title": "Aws Access Key Id",
                    "description": "AWS access key ID. Can be auto-detected, see [the AWS boto3 docs](https://boto3.amazonaws.com/v1/documentation/api/latest/guide/credentials.html) for details.",
                    "type": "string"
                },
                "aws_secret_access_key": {
                    "title": "Aws Secret Access Key",
                    "description": "AWS secret access key. Can be auto-detected, see [the AWS boto3 docs](https://boto3.amazonaws.com/v1/documentation/api/latest/guide/credentials.html) for details.",
                    "type": "string"
                },
                "aws_session_token": {
                    "title": "Aws Session Token",
                    "description": "AWS session token. Can be auto-detected, see [the AWS boto3 docs](https://boto3.amazonaws.com/v1/documentation/api/latest/guide/credentials.html) for details.",
                    "type": "string"
                },
                "aws_role": {
                    "title": "Aws Role",
                    "description": "AWS roles to assume. If using the string format, the role ARN can be specified directly. If using the object format, the role can be specified in the RoleArn field and additional available arguments are the same as [boto3's STS.Client.assume_role](https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/sts.html?highlight=assume_role#STS.Client.assume_role).",
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "array",
                            "items": {
                                "anyOf": [
                                    {
                                        "type": "string"
                                    },
                                    {
                                        "$ref": "#/definitions/AwsAssumeRoleConfig"
                                    }
                                ]
                            }
                        }
                    ]
                },
                "aws_profile": {
                    "title": "Aws Profile",
                    "description": "The [named profile](https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-profiles.html) to use from AWS credentials. Falls back to default profile if not specified and no access keys provided. Profiles are configured in ~/.aws/credentials or ~/.aws/config.",
                    "type": "string"
                },
                "aws_region": {
                    "title": "Aws Region",
                    "description": "AWS region code.",
                    "type": "string"
                },
                "aws_endpoint_url": {
                    "title": "Aws Endpoint Url",
                    "description": "The AWS service endpoint. This is normally [constructed automatically](https://boto3.amazonaws.com/v1/documentation/api/latest/reference/core/session.html), but can be overridden here.",
                    "type": "string"
                },
                "aws_proxy": {
                    "title": "Aws Proxy",
                    "description": "A set of proxy configs to use with AWS. See the [botocore.config](https://botocore.amazonaws.com/v1/documentation/api/latest/reference/config.html) docs for details.",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "aws_retry_num": {
                    "title": "Aws Retry Num",
                    "description": "Number of times to retry failed AWS requests. See the [botocore.retry](https://boto3.amazonaws.com/v1/documentation/api/latest/guide/retries.html) docs for details.",
                    "default": 5,
                    "type": "integer"
                },
                "aws_retry_mode": {
                    "title": "Aws Retry Mode",
                    "description": "Retry mode to use for failed AWS requests. See the [botocore.retry](https://boto3.amazonaws.com/v1/documentation/api/latest/guide/retries.html) docs for details.",
                    "default": "standard",
                    "enum": [
                        "legacy",
                        "standard",
                        "adaptive"
                    ],
                    "type": "string"
                },
                "read_timeout": {
                    "title": "Read Timeout",
                    "description": "The timeout for reading from the connection (in seconds).",
                    "default": 60,
                    "type": "number"
                },
                "aws_advanced_config": {
                    "title": "Aws Advanced Config",
                    "description": "Advanced AWS configuration options. These are passed directly to [botocore.config.Config](https://botocore.amazonaws.com/v1/documentation/api/latest/reference/config.html).",
                    "type": "object"
                }
            },
            "additionalProperties": false
        },
        "S3": {
            "title": "S3",
            "type": "object",
            "properties": {
                "aws_config": {
                    "title": "Aws Config",
                    "description": "AWS configuration",
                    "allOf": [
                        {
                            "$ref": "#/definitions/AwsConnectionConfig"
                        }
                    ]
                },
                "use_s3_bucket_tags": {
                    "title": "Use S3 Bucket Tags",
                    "description": "Whether or not to create tags in datahub from the s3 bucket",
                    "default": false,
                    "type": "boolean"
                },
                "use_s3_object_tags": {
                    "title": "Use S3 Object Tags",
                    "description": "# Whether or not to create tags in datahub from the s3 object",
                    "default": false,
                    "type": "boolean"
                }
            },
            "additionalProperties": false
        },
        "S3LineageProviderConfig": {
            "title": "S3LineageProviderConfig",
            "description": "Any source that produces s3 lineage from/to Datasets should inherit this class.",
            "type": "object",
            "properties": {
                "path_specs": {
                    "title": "Path Specs",
                    "description": "List of PathSpec. See below the details about PathSpec",
                    "default": [],
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/PathSpec"
                    }
                },
                "strip_urls": {
                    "title": "Strip Urls",
                    "description": "Strip filename from s3 url. It only applies if path_specs are not specified.",
                    "default": true,
                    "type": "boolean"
                },
                "ignore_non_path_spec_path": {
                    "title": "Ignore Non Path Spec Path",
                    "description": "Ignore paths that are not match in path_specs. It only applies if path_specs are specified.",
                    "default": false,
                    "type": "boolean"
                }
            },
            "additionalProperties": false
        },
        "LineageMode": {
            "title": "LineageMode",
            "description": "An enumeration.",
            "enum": [
                "sql_based",
                "stl_scan_based",
                "mixed"
            ]
        },
        "BigQueryCredential": {
            "title": "BigQueryCredential",
            "type": "object",
            "properties": {
                "project_id": {
                    "title": "Project Id",
                    "description": "Project id to set the credentials",
                    "type": "string"
                },
                "private_key_id": {
                    "title": "Private Key Id",
                    "description": "Private key id",
                    "type": "string"
                },
                "private_key": {
                    "title": "Private Key",
                    "description": "Private key in a form of '-----BEGIN PRIVATE KEY-----\\nprivate-key\\n-----END PRIVATE KEY-----\\n'",
                    "type": "string"
                },
                "client_email": {
                    "title": "Client Email",
                    "description": "Client email",
                    "type": "string"
                },
                "client_id": {
                    "title": "Client Id",
                    "description": "Client Id",
                    "type": "string"
                },
                "auth_uri": {
                    "title": "Auth Uri",
                    "description": "Authentication uri",
                    "default": "https://accounts.google.com/o/oauth2/auth",
                    "type": "string"
                },
                "token_uri": {
                    "title": "Token Uri",
                    "description": "Token uri",
                    "default": "https://oauth2.googleapis.com/token",
                    "type": "string"
                },
                "auth_provider_x509_cert_url": {
                    "title": "Auth Provider X509 Cert Url",
                    "description": "Auth provider x509 certificate url",
                    "default": "https://www.googleapis.com/oauth2/v1/certs",
                    "type": "string"
                },
                "type": {
                    "title": "Type",
                    "description": "Authentication type",
                    "default": "service_account",
                    "type": "string"
                },
                "client_x509_cert_url": {
                    "title": "Client X509 Cert Url",
                    "description": "If not set it will be default to https://www.googleapis.com/robot/v1/metadata/x509/client_email",
                    "type": "string"
                }
            },
            "required": [
                "project_id",
                "private_key_id",
                "private_key",
                "client_email",
                "client_id"
            ],
            "additionalProperties": false
        },
        "GcsLineageProviderConfig": {
            "title": "GcsLineageProviderConfig",
            "description": "Any source that produces gcs lineage from/to Datasets should inherit this class.",
            "type": "object",
            "properties": {
                "path_specs": {
                    "title": "Path Specs",
                    "description": "List of PathSpec. See below the details about PathSpec",
                    "default": [],
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/PathSpec"
                    }
                },
                "strip_urls": {
                    "title": "Strip Urls",
                    "description": "Strip filename from gcs url. It only applies if path_specs are not specified.",
                    "default": true,
                    "type": "boolean"
                },
                "ignore_non_path_spec_path": {
                    "title": "Ignore Non Path Spec Path",
                    "description": "Ignore paths that are not match in path_specs. It only applies if path_specs are specified.",
                    "default": false,
                    "type": "boolean"
                }
            },
            "additionalProperties": false
        },
        "BigQueryUsageConfig": {
            "title": "BigQueryUsageConfig",
            "type": "object",
            "properties": {
                "bucket_duration": {
                    "description": "Size of the time window to aggregate usage stats.",
                    "default": "DAY",
                    "allOf": [
                        {
                            "$ref": "#/definitions/BucketDuration"
                        }
                    ]
                },
                "end_time": {
                    "title": "End Time",
                    "description": "Latest date of lineage/usage to consider. Default: Current time in UTC",
                    "type": "string",
                    "format": "date-time"
                },
                "start_time": {
                    "title": "Start Time",
                    "description": "Earliest date of lineage/usage to consider. Default: Last full day in UTC (or hour, depending on `bucket_duration`). You can also specify relative time with respect to end_time such as '-7 days' Or '-7d'.",
                    "type": "string",
                    "format": "date-time"
                },
                "top_n_queries": {
                    "title": "Top N Queries",
                    "description": "Number of top queries to save to each table.",
                    "default": 10,
                    "exclusiveMinimum": 0,
                    "type": "integer"
                },
                "user_email_pattern": {
                    "title": "User Email Pattern",
                    "description": "regex patterns for user emails to filter in usage.",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "allOf": [
                        {
                            "$ref": "#/definitions/AllowDenyPattern"
                        }
                    ]
                },
                "include_operational_stats": {
                    "title": "Include Operational Stats",
                    "description": "Whether to display operational stats.",
                    "default": true,
                    "type": "boolean"
                },
                "include_read_operational_stats": {
                    "title": "Include Read Operational Stats",
                    "description": "Whether to report read operational stats. Experimental.",
                    "default": false,
                    "type": "boolean"
                },
                "format_sql_queries": {
                    "title": "Format Sql Queries",
                    "description": "Whether to format sql queries",
                    "default": false,
                    "type": "boolean"
                },
                "include_top_n_queries": {
                    "title": "Include Top N Queries",
                    "description": "Whether to ingest the top_n_queries.",
                    "default": true,
                    "type": "boolean"
                },
                "max_query_duration": {
                    "title": "Max Query Duration",
                    "description": "Correction to pad start_time and end_time with. For handling the case where the read happens within our time range but the query completion event is delayed and happens after the configured end time.",
                    "default": 900.0,
                    "type": "number",
                    "format": "time-delta"
                },
                "apply_view_usage_to_tables": {
                    "title": "Apply View Usage To Tables",
                    "description": "Whether to apply view's usage to its base tables. If set to False, uses sql parser and applies usage to views / tables mentioned in the query. If set to True, usage is applied to base tables only.",
                    "default": false,
                    "type": "boolean"
                }
            },
            "additionalProperties": false
        },
        "NifiAuthType": {
            "title": "NifiAuthType",
            "description": "An enumeration.",
            "enum": [
                "NO_AUTH",
                "SINGLE_USER",
                "CLIENT_CERT",
                "KERBEROS",
                "BASIC_AUTH"
            ]
        },
        "HostingEnvironment": {
            "title": "HostingEnvironment",
            "description": "An enumeration.",
            "enum": [
                "SELF_HOSTED",
                "ATLAS",
                "AWS_DOCUMENTDB"
            ]
        },
        "URIReplacePattern": {
            "title": "URIReplacePattern",
            "type": "object",
            "properties": {
                "match": {
                    "title": "Match",
                    "description": "Pattern to match on uri-s as part of reference resolution. See replace field",
                    "type": "string"
                },
                "replace": {
                    "title": "Replace",
                    "description": "Pattern to replace with as part of reference resolution. See match field",
                    "type": "string"
                }
            },
            "required": [
                "match",
                "replace"
            ],
            "additionalProperties": false
        },
        "ModeAPIConfig": {
            "title": "ModeAPIConfig",
            "type": "object",
            "properties": {
                "retry_backoff_multiplier": {
                    "title": "Retry Backoff Multiplier",
                    "description": "Multiplier for exponential backoff when waiting to retry",
                    "default": 2,
                    "anyOf": [
                        {
                            "type": "integer"
                        },
                        {
                            "type": "number"
                        }
                    ]
                },
                "max_retry_interval": {
                    "title": "Max Retry Interval",
                    "description": "Maximum interval to wait when retrying",
                    "default": 10,
                    "anyOf": [
                        {
                            "type": "integer"
                        },
                        {
                            "type": "number"
                        }
                    ]
                },
                "max_attempts": {
                    "title": "Max Attempts",
                    "description": "Maximum number of attempts to retry before failing",
                    "default": 5,
                    "type": "integer"
                },
                "timeout": {
                    "title": "Timeout",
                    "description": "Timout setting, how long to wait for the Mode rest api to send data before giving up",
                    "default": 40,
                    "type": "integer"
                }
            },
            "additionalProperties": false
        },
        "FileReadMode": {
            "title": "FileReadMode",
            "description": "An enumeration.",
            "enum": [
                "STREAM",
                "BATCH",
                "AUTO"
            ]
        },
        "EmitDirective": {
            "title": "EmitDirective",
            "description": "A holder for directives for emission for specific types of entities",
            "enum": [
                "YES",
                "NO",
                "ONLY"
            ]
        },
        "DBTEntitiesEnabled": {
            "title": "DBTEntitiesEnabled",
            "description": "Controls which dbt entities are going to be emitted by this source",
            "type": "object",
            "properties": {
                "models": {
                    "description": "Emit metadata for dbt models when set to Yes or Only",
                    "default": "YES",
                    "allOf": [
                        {
                            "$ref": "#/definitions/EmitDirective"
                        }
                    ]
                },
                "sources": {
                    "description": "Emit metadata for dbt sources when set to Yes or Only",
                    "default": "YES",
                    "allOf": [
                        {
                            "$ref": "#/definitions/EmitDirective"
                        }
                    ]
                },
                "seeds": {
                    "description": "Emit metadata for dbt seeds when set to Yes or Only",
                    "default": "YES",
                    "allOf": [
                        {
                            "$ref": "#/definitions/EmitDirective"
                        }
                    ]
                },
                "snapshots": {
                    "description": "Emit metadata for dbt snapshots when set to Yes or Only",
                    "default": "YES",
                    "allOf": [
                        {
                            "$ref": "#/definitions/EmitDirective"
                        }
                    ]
                },
                "test_definitions": {
                    "description": "Emit metadata for test definitions when enabled when set to Yes or Only",
                    "default": "YES",
                    "allOf": [
                        {
                            "$ref": "#/definitions/EmitDirective"
                        }
                    ]
                },
                "test_results": {
                    "description": "Emit metadata for test results when set to Yes or Only",
                    "default": "YES",
                    "allOf": [
                        {
                            "$ref": "#/definitions/EmitDirective"
                        }
                    ]
                },
                "model_performance": {
                    "description": "Emit model performance metadata when set to Yes or Only. Only supported with dbt core.",
                    "default": "YES",
                    "allOf": [
                        {
                            "$ref": "#/definitions/EmitDirective"
                        }
                    ]
                }
            },
            "additionalProperties": false
        },
        "GitReference": {
            "title": "GitReference",
            "description": "Reference to a hosted Git repository. Used to generate \"view source\" links.",
            "type": "object",
            "properties": {
                "repo": {
                    "title": "Repo",
                    "description": "Name of your Git repo e.g. https://github.com/datahub-project/datahub or https://gitlab.com/gitlab-org/gitlab. If organization/repo is provided, we assume it is a GitHub repo.",
                    "type": "string"
                },
                "branch": {
                    "title": "Branch",
                    "description": "Branch on which your files live by default. Typically main or master. This can also be a commit hash.",
                    "default": "main",
                    "type": "string"
                },
                "url_subdir": {
                    "title": "Url Subdir",
                    "description": "Prefix to prepend when generating URLs for files - useful when files are in a subdirectory. Only affects URL generation, not git operations.",
                    "type": "string"
                },
                "url_template": {
                    "title": "Url Template",
                    "description": "Template for generating a URL to a file in the repo e.g. '{repo_url}/blob/{branch}/{file_path}'. We can infer this for GitHub and GitLab repos, and it is otherwise required.It supports the following variables: {repo_url}, {branch}, {file_path}",
                    "type": "string"
                }
            },
            "required": [
                "repo"
            ],
            "additionalProperties": false
        },
        "LookerNamingPattern": {
            "title": "LookerNamingPattern",
            "type": "object",
            "properties": {
                "pattern": {
                    "title": "Pattern",
                    "type": "string"
                }
            },
            "required": [
                "pattern"
            ],
            "additionalProperties": false
        },
        "LookerViewNamingPattern": {
            "title": "LookerViewNamingPattern",
            "type": "object",
            "properties": {
                "pattern": {
                    "title": "Pattern",
                    "type": "string"
                }
            },
            "required": [
                "pattern"
            ],
            "additionalProperties": false
        },
        "GitInfo": {
            "title": "GitInfo",
            "description": "A reference to a Git repository, including a deploy key that can be used to clone it.",
            "type": "object",
            "properties": {
                "repo": {
                    "title": "Repo",
                    "description": "Name of your Git repo e.g. https://github.com/datahub-project/datahub or https://gitlab.com/gitlab-org/gitlab. If organization/repo is provided, we assume it is a GitHub repo.",
                    "type": "string"
                },
                "branch": {
                    "title": "Branch",
                    "description": "Branch on which your files live by default. Typically main or master. This can also be a commit hash.",
                    "default": "main",
                    "type": "string"
                },
                "url_subdir": {
                    "title": "Url Subdir",
                    "description": "Prefix to prepend when generating URLs for files - useful when files are in a subdirectory. Only affects URL generation, not git operations.",
                    "type": "string"
                },
                "url_template": {
                    "title": "Url Template",
                    "description": "Template for generating a URL to a file in the repo e.g. '{repo_url}/blob/{branch}/{file_path}'. We can infer this for GitHub and GitLab repos, and it is otherwise required.It supports the following variables: {repo_url}, {branch}, {file_path}",
                    "type": "string"
                },
                "deploy_key_file": {
                    "title": "Deploy Key File",
                    "description": "A private key file that contains an ssh key that has been configured as a deploy key for this repository. Use a file where possible, else see deploy_key for a config field that accepts a raw string. We expect the key not have a passphrase.",
                    "format": "file-path",
                    "type": "string"
                },
                "deploy_key": {
                    "title": "Deploy Key",
                    "description": "A private key that contains an ssh key that has been configured as a deploy key for this repository. See deploy_key_file if you want to use a file that contains this key.",
                    "type": "string",
                    "writeOnly": true,
                    "format": "password"
                },
                "repo_ssh_locator": {
                    "title": "Repo Ssh Locator",
                    "description": "The url to call `git clone` on. We infer this for github and gitlab repos, but it is required for other hosts.",
                    "type": "string"
                }
            },
            "required": [
                "repo"
            ],
            "additionalProperties": false
        },
        "LookerConnectionDefinition": {
            "title": "LookerConnectionDefinition",
            "type": "object",
            "properties": {
                "platform": {
                    "title": "Platform",
                    "type": "string"
                },
                "default_db": {
                    "title": "Default Db",
                    "type": "string"
                },
                "default_schema": {
                    "title": "Default Schema",
                    "type": "string"
                },
                "platform_instance": {
                    "title": "Platform Instance",
                    "type": "string"
                },
                "platform_env": {
                    "title": "Platform Env",
                    "description": "The environment that the platform is located in. Leaving this empty will inherit defaults from the top level Looker configuration",
                    "type": "string"
                }
            },
            "required": [
                "platform",
                "default_db"
            ],
            "additionalProperties": false
        },
        "TransportOptionsConfig": {
            "title": "TransportOptionsConfig",
            "type": "object",
            "properties": {
                "timeout": {
                    "title": "Timeout",
                    "type": "integer"
                },
                "headers": {
                    "title": "Headers",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                }
            },
            "required": [
                "timeout",
                "headers"
            ],
            "additionalProperties": false
        },
        "LookerAPIConfig": {
            "title": "LookerAPIConfig",
            "type": "object",
            "properties": {
                "client_id": {
                    "title": "Client Id",
                    "description": "Looker API client id.",
                    "type": "string"
                },
                "client_secret": {
                    "title": "Client Secret",
                    "description": "Looker API client secret.",
                    "type": "string"
                },
                "base_url": {
                    "title": "Base Url",
                    "description": "Url to your Looker instance: `https://company.looker.com:19999` or `https://looker.company.com`, or similar. Used for making API calls to Looker and constructing clickable dashboard and chart urls.",
                    "type": "string"
                },
                "transport_options": {
                    "title": "Transport Options",
                    "description": "Populates the [TransportOptions](https://github.com/looker-open-source/sdk-codegen/blob/94d6047a0d52912ac082eb91616c1e7c379ab262/python/looker_sdk/rtl/transport.py#L70) struct for looker client",
                    "allOf": [
                        {
                            "$ref": "#/definitions/TransportOptionsConfig"
                        }
                    ]
                },
                "max_retries": {
                    "title": "Max Retries",
                    "description": "Number of retries for Looker API calls",
                    "default": 3,
                    "type": "integer"
                }
            },
            "required": [
                "client_id",
                "client_secret",
                "base_url"
            ],
            "additionalProperties": false
        },
        "SnowflakeDestinationConfig": {
            "title": "SnowflakeDestinationConfig",
            "type": "object",
            "properties": {
                "options": {
                    "title": "Options",
                    "description": "Any options specified here will be passed to [SQLAlchemy.create_engine](https://docs.sqlalchemy.org/en/14/core/engines.html#sqlalchemy.create_engine) as kwargs.",
                    "type": "object"
                },
                "scheme": {
                    "title": "Scheme",
                    "default": "snowflake",
                    "type": "string"
                },
                "username": {
                    "title": "Username",
                    "description": "Snowflake username.",
                    "type": "string"
                },
                "password": {
                    "title": "Password",
                    "description": "Snowflake password.",
                    "type": "string",
                    "writeOnly": true,
                    "format": "password"
                },
                "private_key": {
                    "title": "Private Key",
                    "description": "Private key in a form of '-----BEGIN PRIVATE KEY-----\\nprivate-key\\n-----END PRIVATE KEY-----\\n' if using key pair authentication. Encrypted version of private key will be in a form of '-----BEGIN ENCRYPTED PRIVATE KEY-----\\nencrypted-private-key\\n-----END ENCRYPTED PRIVATE KEY-----\\n' See: https://docs.snowflake.com/en/user-guide/key-pair-auth.html",
                    "type": "string"
                },
                "private_key_path": {
                    "title": "Private Key Path",
                    "description": "The path to the private key if using key pair authentication. Ignored if `private_key` is set. See: https://docs.snowflake.com/en/user-guide/key-pair-auth.html",
                    "type": "string"
                },
                "private_key_password": {
                    "title": "Private Key Password",
                    "description": "Password for your private key. Required if using key pair authentication with encrypted private key.",
                    "type": "string",
                    "writeOnly": true,
                    "format": "password"
                },
                "oauth_config": {
                    "title": "Oauth Config",
                    "description": "oauth configuration - https://docs.snowflake.com/en/user-guide/python-connector-example.html#connecting-with-oauth",
                    "allOf": [
                        {
                            "$ref": "#/definitions/OAuthConfiguration"
                        }
                    ]
                },
                "authentication_type": {
                    "title": "Authentication Type",
                    "description": "The type of authenticator to use when connecting to Snowflake. Supports \"DEFAULT_AUTHENTICATOR\", \"OAUTH_AUTHENTICATOR\", \"EXTERNAL_BROWSER_AUTHENTICATOR\" and \"KEY_PAIR_AUTHENTICATOR\".",
                    "default": "DEFAULT_AUTHENTICATOR",
                    "type": "string"
                },
                "account_id": {
                    "title": "Account Id",
                    "description": "Snowflake account identifier. e.g. xy12345,  xy12345.us-east-2.aws, xy12345.us-central1.gcp, xy12345.central-us.azure, xy12345.us-west-2.privatelink. Refer [Account Identifiers](https://docs.snowflake.com/en/user-guide/admin-account-identifier.html#format-2-legacy-account-locator-in-a-region) for more details.",
                    "type": "string"
                },
                "warehouse": {
                    "title": "Warehouse",
                    "description": "Snowflake warehouse.",
                    "type": "string"
                },
                "role": {
                    "title": "Role",
                    "description": "Snowflake role.",
                    "type": "string"
                },
                "connect_args": {
                    "title": "Connect Args",
                    "description": "Connect args to pass to Snowflake SqlAlchemy driver",
                    "type": "object"
                },
                "token": {
                    "title": "Token",
                    "description": "OAuth token from external identity provider. Not recommended for most use cases because it will not be able to refresh once expired.",
                    "type": "string"
                },
                "database": {
                    "title": "Database",
                    "description": "The fivetran connector log database.",
                    "type": "string"
                },
                "log_schema": {
                    "title": "Log Schema",
                    "description": "The fivetran connector log schema.",
                    "type": "string"
                }
            },
            "required": [
                "account_id",
                "database",
                "log_schema"
            ],
            "additionalProperties": false
        },
        "BigQueryDestinationConfig": {
            "title": "BigQueryDestinationConfig",
            "type": "object",
            "properties": {
                "credential": {
                    "title": "Credential",
                    "description": "BigQuery credential informations",
                    "allOf": [
                        {
                            "$ref": "#/definitions/BigQueryCredential"
                        }
                    ]
                },
                "extra_client_options": {
                    "title": "Extra Client Options",
                    "description": "Additional options to pass to google.cloud.logging_v2.client.Client.",
                    "default": {},
                    "type": "object"
                },
                "project_on_behalf": {
                    "title": "Project On Behalf",
                    "description": "[Advanced] The BigQuery project in which queries are executed. Will be passed when creating a job. If not passed, falls back to the project associated with the service account.",
                    "type": "string"
                },
                "dataset": {
                    "title": "Dataset",
                    "description": "The fivetran connector log dataset.",
                    "type": "string"
                }
            },
            "required": [
                "dataset"
            ],
            "additionalProperties": false
        },
        "FivetranLogConfig": {
            "title": "FivetranLogConfig",
            "type": "object",
            "properties": {
                "destination_platform": {
                    "title": "Destination Platform",
                    "description": "The destination platform where fivetran connector log tables are dumped.",
                    "default": "snowflake",
                    "enum": [
                        "snowflake",
                        "bigquery"
                    ],
                    "type": "string"
                },
                "snowflake_destination_config": {
                    "title": "Snowflake Destination Config",
                    "description": "If destination platform is 'snowflake', provide snowflake configuration.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/SnowflakeDestinationConfig"
                        }
                    ]
                },
                "bigquery_destination_config": {
                    "title": "Bigquery Destination Config",
                    "description": "If destination platform is 'bigquery', provide bigquery configuration.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/BigQueryDestinationConfig"
                        }
                    ]
                }
            },
            "additionalProperties": false
        },
        "DremioSourceMapping": {
            "title": "DremioSourceMapping",
            "description": "Any source that produces dataset urns in a single environment should inherit this class",
            "type": "object",
            "properties": {
                "platform_instance": {
                    "title": "Platform Instance",
                    "description": "The instance of the platform that all assets produced by this recipe belong to. This should be unique within the platform. See https://datahubproject.io/docs/platform-instances/ for more details.",
                    "type": "string"
                },
                "env": {
                    "title": "Env",
                    "description": "The environment that all assets produced by this connector belong to",
                    "default": "PROD",
                    "type": "string"
                },
                "platform": {
                    "title": "Platform",
                    "description": "Source connection made by Dremio (e.g. S3, Snowflake)",
                    "type": "string"
                },
                "source_name": {
                    "title": "Source Name",
                    "description": "Alias of platform in Dremio connection",
                    "type": "string"
                }
            },
            "required": [
                "platform",
                "source_name"
            ],
            "additionalProperties": false
        },
        "ProfileConfig": {
            "title": "ProfileConfig",
            "type": "object",
            "properties": {
                "enabled": {
                    "title": "Enabled",
                    "description": "Whether profiling should be done.",
                    "default": false,
                    "type": "boolean"
                },
                "operation_config": {
                    "title": "Operation Config",
                    "description": "Experimental feature. To specify operation configs.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/OperationConfig"
                        }
                    ]
                },
                "limit": {
                    "title": "Limit",
                    "description": "Max number of documents to profile. By default, profiles all documents.",
                    "type": "integer"
                },
                "offset": {
                    "title": "Offset",
                    "description": "Offset in documents to profile. By default, uses no offset.",
                    "type": "integer"
                },
                "profile_table_level_only": {
                    "title": "Profile Table Level Only",
                    "description": "Whether to perform profiling at table-level only, or include column-level profiling as well.",
                    "default": false,
                    "type": "boolean"
                },
                "include_field_null_count": {
                    "title": "Include Field Null Count",
                    "description": "Whether to profile for the number of nulls for each column.",
                    "default": true,
                    "type": "boolean"
                },
                "include_field_distinct_count": {
                    "title": "Include Field Distinct Count",
                    "description": "Whether to profile for the number of distinct values for each column.",
                    "default": true,
                    "type": "boolean"
                },
                "include_field_min_value": {
                    "title": "Include Field Min Value",
                    "description": "Whether to profile for the min value of numeric columns.",
                    "default": true,
                    "type": "boolean"
                },
                "include_field_max_value": {
                    "title": "Include Field Max Value",
                    "description": "Whether to profile for the max value of numeric columns.",
                    "default": true,
                    "type": "boolean"
                },
                "include_field_mean_value": {
                    "title": "Include Field Mean Value",
                    "description": "Whether to profile for the mean value of numeric columns.",
                    "default": true,
                    "type": "boolean"
                },
                "include_field_stddev_value": {
                    "title": "Include Field Stddev Value",
                    "description": "Whether to profile for the standard deviation of numeric columns.",
                    "default": true,
                    "type": "boolean"
                },
                "include_field_quantiles": {
                    "title": "Include Field Quantiles",
                    "description": "Whether to profile for the quantiles of numeric columns.",
                    "default": false,
                    "type": "boolean"
                },
                "include_field_distinct_value_frequencies": {
                    "title": "Include Field Distinct Value Frequencies",
                    "description": "Whether to profile for distinct value frequencies.",
                    "default": false,
                    "type": "boolean"
                },
                "include_field_histogram": {
                    "title": "Include Field Histogram",
                    "description": "Whether to profile for the histogram for numeric fields.",
                    "default": false,
                    "type": "boolean"
                },
                "include_field_sample_values": {
                    "title": "Include Field Sample Values",
                    "description": "Whether to profile for the sample values for all columns.",
                    "default": true,
                    "type": "boolean"
                },
                "max_workers": {
                    "title": "Max Workers",
                    "description": "Number of worker threads to use for profiling. Set to 1 to disable.",
                    "default": 20,
                    "type": "integer"
                },
                "query_timeout": {
                    "title": "Query Timeout",
                    "description": "Time before cancelling Dremio profiling query",
                    "default": 300,
                    "type": "integer"
                }
            },
            "additionalProperties": false
        },
        "GlueProfilingConfig": {
            "title": "GlueProfilingConfig",
            "type": "object",
            "properties": {
                "enabled": {
                    "title": "Enabled",
                    "description": "Whether profiling should be done.",
                    "default": false,
                    "type": "boolean"
                },
                "profile_table_level_only": {
                    "title": "Profile Table Level Only",
                    "description": "Whether to perform profiling at table-level only, or include column-level profiling as well.",
                    "default": false,
                    "type": "boolean"
                },
                "row_count": {
                    "title": "Row Count",
                    "description": "The parameter name for row count in glue table.",
                    "type": "string"
                },
                "column_count": {
                    "title": "Column Count",
                    "description": "The parameter name for column count in glue table.",
                    "type": "string"
                },
                "unique_count": {
                    "title": "Unique Count",
                    "description": "The parameter name for the count of unique value in a column.",
                    "type": "string"
                },
                "unique_proportion": {
                    "title": "Unique Proportion",
                    "description": "The parameter name for the proportion of unique values in a column.",
                    "type": "string"
                },
                "null_count": {
                    "title": "Null Count",
                    "description": "The parameter name for the count of null values in a column.",
                    "type": "string"
                },
                "null_proportion": {
                    "title": "Null Proportion",
                    "description": "The parameter name for the proportion of null values in a column.",
                    "type": "string"
                },
                "min": {
                    "title": "Min",
                    "description": "The parameter name for the min value of a column.",
                    "type": "string"
                },
                "max": {
                    "title": "Max",
                    "description": "The parameter name for the max value of a column.",
                    "type": "string"
                },
                "mean": {
                    "title": "Mean",
                    "description": "The parameter name for the mean value of a column.",
                    "type": "string"
                },
                "median": {
                    "title": "Median",
                    "description": "The parameter name for the median value of a column.",
                    "type": "string"
                },
                "stdev": {
                    "title": "Stdev",
                    "description": "The parameter name for the standard deviation of a column.",
                    "type": "string"
                },
                "partition_patterns": {
                    "title": "Partition Patterns",
                    "description": "Regex patterns for filtering partitions for profile. The pattern should be a string like: \"{'key':'value'}\".",
                    "default": {
                        "allow": [
                            ".*"
                        ],
                        "deny": [],
                        "ignoreCase": true
                    },
                    "allOf": [
                        {
                            "$ref": "#/definitions/AllowDenyPattern"
                        }
                    ]
                },
                "operation_config": {
                    "title": "Operation Config",
                    "description": "Experimental feature. To specify operation configs.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/OperationConfig"
                        }
                    ]
                }
            },
            "additionalProperties": false
        },
        "SalesforceAuthType": {
            "title": "SalesforceAuthType",
            "description": "An enumeration.",
            "enum": [
                "USERNAME_PASSWORD",
                "DIRECT_ACCESS_TOKEN",
                "JSON_WEB_TOKEN"
            ]
        },
        "SalesforceProfilingConfig": {
            "title": "SalesforceProfilingConfig",
            "type": "object",
            "properties": {
                "enabled": {
                    "title": "Enabled",
                    "description": "Whether profiling should be done. Supports only table-level profiling at this stage",
                    "default": false,
                    "type": "boolean"
                },
                "operation_config": {
                    "title": "Operation Config",
                    "description": "Experimental feature. To specify operation configs.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/OperationConfig"
                        }
                    ]
                }
            },
            "additionalProperties": false
        }
    },
    "type": "object",
    "properties": {
        "source": {
            "anyOf": [
                {
                    "$ref": "#/definitions/sac"
                },
                {
                    "$ref": "#/definitions/powerbi"
                },
                {
                    "$ref": "#/definitions/cockroachdb"
                },
                {
                    "$ref": "#/definitions/athena"
                },
                {
                    "$ref": "#/definitions/clickhouse-usage"
                },
                {
                    "$ref": "#/definitions/cassandra"
                },
                {
                    "$ref": "#/definitions/azure-ad"
                },
                {
                    "$ref": "#/definitions/neo4j"
                },
                {
                    "$ref": "#/definitions/gcs"
                },
                {
                    "$ref": "#/definitions/hive-metastore"
                },
                {
                    "$ref": "#/definitions/datahub-gc"
                },
                {
                    "$ref": "#/definitions/teradata"
                },
                {
                    "$ref": "#/definitions/abs"
                },
                {
                    "$ref": "#/definitions/elasticsearch"
                },
                {
                    "$ref": "#/definitions/trino"
                },
                {
                    "$ref": "#/definitions/datahub-business-glossary"
                },
                {
                    "$ref": "#/definitions/pulsar"
                },
                {
                    "$ref": "#/definitions/oracle"
                },
                {
                    "$ref": "#/definitions/sql-queries"
                },
                {
                    "$ref": "#/definitions/grafana"
                },
                {
                    "$ref": "#/definitions/hana"
                },
                {
                    "$ref": "#/definitions/sqlalchemy"
                },
                {
                    "$ref": "#/definitions/presto"
                },
                {
                    "$ref": "#/definitions/iceberg"
                },
                {
                    "$ref": "#/definitions/vertica"
                },
                {
                    "$ref": "#/definitions/snowflake"
                },
                {
                    "$ref": "#/definitions/ldap"
                },
                {
                    "$ref": "#/definitions/dynamodb"
                },
                {
                    "$ref": "#/definitions/sagemaker"
                },
                {
                    "$ref": "#/definitions/powerbi-report-server"
                },
                {
                    "$ref": "#/definitions/datahub"
                },
                {
                    "$ref": "#/definitions/kafka-connect"
                },
                {
                    "$ref": "#/definitions/metabase"
                },
                {
                    "$ref": "#/definitions/csv-enricher"
                },
                {
                    "$ref": "#/definitions/tableau"
                },
                {
                    "$ref": "#/definitions/unity-catalog"
                },
                {
                    "$ref": "#/definitions/mysql"
                },
                {
                    "$ref": "#/definitions/kafka"
                },
                {
                    "$ref": "#/definitions/delta-lake"
                },
                {
                    "$ref": "#/definitions/feast"
                },
                {
                    "$ref": "#/definitions/druid"
                },
                {
                    "$ref": "#/definitions/clickhouse"
                },
                {
                    "$ref": "#/definitions/redshift"
                },
                {
                    "$ref": "#/definitions/superset"
                },
                {
                    "$ref": "#/definitions/mariadb"
                },
                {
                    "$ref": "#/definitions/s3"
                },
                {
                    "$ref": "#/definitions/datahub-lineage-file"
                },
                {
                    "$ref": "#/definitions/qlik-sense"
                },
                {
                    "$ref": "#/definitions/hive"
                },
                {
                    "$ref": "#/definitions/bigquery"
                },
                {
                    "$ref": "#/definitions/demo-data"
                },
                {
                    "$ref": "#/definitions/nifi"
                },
                {
                    "$ref": "#/definitions/mongodb"
                },
                {
                    "$ref": "#/definitions/json-schema"
                },
                {
                    "$ref": "#/definitions/openapi"
                },
                {
                    "$ref": "#/definitions/starburst-trino-usage"
                },
                {
                    "$ref": "#/definitions/sigma"
                },
                {
                    "$ref": "#/definitions/okta"
                },
                {
                    "$ref": "#/definitions/mode"
                },
                {
                    "$ref": "#/definitions/file"
                },
                {
                    "$ref": "#/definitions/postgres"
                },
                {
                    "$ref": "#/definitions/dbt"
                },
                {
                    "$ref": "#/definitions/lookml"
                },
                {
                    "$ref": "#/definitions/preset"
                },
                {
                    "$ref": "#/definitions/slack"
                },
                {
                    "$ref": "#/definitions/redash"
                },
                {
                    "$ref": "#/definitions/presto-on-hive"
                },
                {
                    "$ref": "#/definitions/looker"
                },
                {
                    "$ref": "#/definitions/fivetran"
                },
                {
                    "$ref": "#/definitions/dremio"
                },
                {
                    "$ref": "#/definitions/dbt-cloud"
                },
                {
                    "$ref": "#/definitions/mssql"
                },
                {
                    "$ref": "#/definitions/glue"
                },
                {
                    "$ref": "#/definitions/salesforce"
                },
                {
                    "$ref": "#/definitions/mlflow"
                }
            ]
        },
        "transformers": {
            "type": "array",
            "items": {
                "type": "object",
                "description": "Transformer configs see at https://datahubproject.io/docs/metadata-ingestion/docs/transformer",
                "properties": {
                    "type": {
                        "type": "string",
                        "description": "Transformer type"
                    },
                    "config": {
                        "type": "object",
                        "description": "Transformer config"
                    }
                },
                "required": [
                    "type"
                ],
                "additionalProperties": false
            }
        },
        "sink": {
            "description": "sink",
            "anyOf": [
                {
                    "$ref": "#/definitions/datahub_kafka_sink"
                },
                {
                    "$ref": "#/definitions/datahub_rest_sink"
                },
                {
                    "$ref": "#/definitions/console_sink"
                },
                {
                    "$ref": "#/definitions/file_sink"
                }
            ]
        }
    },
    "required": [
        "source"
    ]
}